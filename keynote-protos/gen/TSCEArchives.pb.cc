// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TSCEArchives.proto

#include "TSCEArchives.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace TSCE {
constexpr CellReferenceArchive::CellReferenceArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : table_id_(nullptr)
  , column_(0u)
  , row_(0u){}
struct CellReferenceArchiveDefaultTypeInternal {
  constexpr CellReferenceArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CellReferenceArchiveDefaultTypeInternal() {}
  union {
    CellReferenceArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CellReferenceArchiveDefaultTypeInternal _CellReferenceArchive_default_instance_;
constexpr InternalCellReferenceArchive::InternalCellReferenceArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : coordinate_(nullptr)
  , owner_id_(0u){}
struct InternalCellReferenceArchiveDefaultTypeInternal {
  constexpr InternalCellReferenceArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InternalCellReferenceArchiveDefaultTypeInternal() {}
  union {
    InternalCellReferenceArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InternalCellReferenceArchiveDefaultTypeInternal _InternalCellReferenceArchive_default_instance_;
constexpr RangeReferenceArchive::RangeReferenceArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : table_id_(nullptr)
  , top_left_column_(0u)
  , top_left_row_(0u)
  , bottom_right_column_(0u)
  , bottom_right_row_(0u){}
struct RangeReferenceArchiveDefaultTypeInternal {
  constexpr RangeReferenceArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RangeReferenceArchiveDefaultTypeInternal() {}
  union {
    RangeReferenceArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RangeReferenceArchiveDefaultTypeInternal _RangeReferenceArchive_default_instance_;
constexpr InternalRangeReferenceArchive::InternalRangeReferenceArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : range_(nullptr)
  , owner_id_(0u){}
struct InternalRangeReferenceArchiveDefaultTypeInternal {
  constexpr InternalRangeReferenceArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InternalRangeReferenceArchiveDefaultTypeInternal() {}
  union {
    InternalRangeReferenceArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InternalRangeReferenceArchiveDefaultTypeInternal _InternalRangeReferenceArchive_default_instance_;
constexpr IndexSetArchive_IndexSetEntry::IndexSetArchive_IndexSetEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : range_begin_(0)
  , range_end_(0){}
struct IndexSetArchive_IndexSetEntryDefaultTypeInternal {
  constexpr IndexSetArchive_IndexSetEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IndexSetArchive_IndexSetEntryDefaultTypeInternal() {}
  union {
    IndexSetArchive_IndexSetEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IndexSetArchive_IndexSetEntryDefaultTypeInternal _IndexSetArchive_IndexSetEntry_default_instance_;
constexpr IndexSetArchive::IndexSetArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : entries_(){}
struct IndexSetArchiveDefaultTypeInternal {
  constexpr IndexSetArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IndexSetArchiveDefaultTypeInternal() {}
  union {
    IndexSetArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IndexSetArchiveDefaultTypeInternal _IndexSetArchive_default_instance_;
constexpr CellCoordSetArchive_ColumnEntry::CellCoordSetArchive_ColumnEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : row_set_(nullptr)
  , column_(0u){}
struct CellCoordSetArchive_ColumnEntryDefaultTypeInternal {
  constexpr CellCoordSetArchive_ColumnEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CellCoordSetArchive_ColumnEntryDefaultTypeInternal() {}
  union {
    CellCoordSetArchive_ColumnEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CellCoordSetArchive_ColumnEntryDefaultTypeInternal _CellCoordSetArchive_ColumnEntry_default_instance_;
constexpr CellCoordSetArchive::CellCoordSetArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : column_entries_(){}
struct CellCoordSetArchiveDefaultTypeInternal {
  constexpr CellCoordSetArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CellCoordSetArchiveDefaultTypeInternal() {}
  union {
    CellCoordSetArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CellCoordSetArchiveDefaultTypeInternal _CellCoordSetArchive_default_instance_;
constexpr InternalCellRefSetArchive_OwnerEntry::InternalCellRefSetArchive_OwnerEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : coord_set_(nullptr)
  , owner_id_(0u){}
struct InternalCellRefSetArchive_OwnerEntryDefaultTypeInternal {
  constexpr InternalCellRefSetArchive_OwnerEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InternalCellRefSetArchive_OwnerEntryDefaultTypeInternal() {}
  union {
    InternalCellRefSetArchive_OwnerEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InternalCellRefSetArchive_OwnerEntryDefaultTypeInternal _InternalCellRefSetArchive_OwnerEntry_default_instance_;
constexpr InternalCellRefSetArchive::InternalCellRefSetArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : owner_entries_(){}
struct InternalCellRefSetArchiveDefaultTypeInternal {
  constexpr InternalCellRefSetArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InternalCellRefSetArchiveDefaultTypeInternal() {}
  union {
    InternalCellRefSetArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InternalCellRefSetArchiveDefaultTypeInternal _InternalCellRefSetArchive_default_instance_;
constexpr ColumnRowSize::ColumnRowSize(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : num_columns_(1u)
  , num_rows_(1u){}
struct ColumnRowSizeDefaultTypeInternal {
  constexpr ColumnRowSizeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ColumnRowSizeDefaultTypeInternal() {}
  union {
    ColumnRowSize _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ColumnRowSizeDefaultTypeInternal _ColumnRowSize_default_instance_;
constexpr CellRectArchive::CellRectArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : origin_(nullptr)
  , size_(nullptr){}
struct CellRectArchiveDefaultTypeInternal {
  constexpr CellRectArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CellRectArchiveDefaultTypeInternal() {}
  union {
    CellRectArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CellRectArchiveDefaultTypeInternal _CellRectArchive_default_instance_;
constexpr CellRefSetArchive_OwnerEntry::CellRefSetArchive_OwnerEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : owner_uid_(nullptr)
  , coord_set_(nullptr){}
struct CellRefSetArchive_OwnerEntryDefaultTypeInternal {
  constexpr CellRefSetArchive_OwnerEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CellRefSetArchive_OwnerEntryDefaultTypeInternal() {}
  union {
    CellRefSetArchive_OwnerEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CellRefSetArchive_OwnerEntryDefaultTypeInternal _CellRefSetArchive_OwnerEntry_default_instance_;
constexpr CellRefSetArchive::CellRefSetArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : owner_entries_(){}
struct CellRefSetArchiveDefaultTypeInternal {
  constexpr CellRefSetArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CellRefSetArchiveDefaultTypeInternal() {}
  union {
    CellRefSetArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CellRefSetArchiveDefaultTypeInternal _CellRefSetArchive_default_instance_;
constexpr UidCoordSetArchive_ColumnEntry::UidCoordSetArchive_ColumnEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : row_set_()
  , column_(nullptr){}
struct UidCoordSetArchive_ColumnEntryDefaultTypeInternal {
  constexpr UidCoordSetArchive_ColumnEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UidCoordSetArchive_ColumnEntryDefaultTypeInternal() {}
  union {
    UidCoordSetArchive_ColumnEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UidCoordSetArchive_ColumnEntryDefaultTypeInternal _UidCoordSetArchive_ColumnEntry_default_instance_;
constexpr UidCoordSetArchive::UidCoordSetArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : column_entries_(){}
struct UidCoordSetArchiveDefaultTypeInternal {
  constexpr UidCoordSetArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UidCoordSetArchiveDefaultTypeInternal() {}
  union {
    UidCoordSetArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UidCoordSetArchiveDefaultTypeInternal _UidCoordSetArchive_default_instance_;
constexpr UidCellRefSetArchive_OwnerEntry::UidCellRefSetArchive_OwnerEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : owner_uid_(nullptr)
  , coord_set_(nullptr){}
struct UidCellRefSetArchive_OwnerEntryDefaultTypeInternal {
  constexpr UidCellRefSetArchive_OwnerEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UidCellRefSetArchive_OwnerEntryDefaultTypeInternal() {}
  union {
    UidCellRefSetArchive_OwnerEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UidCellRefSetArchive_OwnerEntryDefaultTypeInternal _UidCellRefSetArchive_OwnerEntry_default_instance_;
constexpr UidCellRefSetArchive::UidCellRefSetArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : owner_entries_(){}
struct UidCellRefSetArchiveDefaultTypeInternal {
  constexpr UidCellRefSetArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UidCellRefSetArchiveDefaultTypeInternal() {}
  union {
    UidCellRefSetArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UidCellRefSetArchiveDefaultTypeInternal _UidCellRefSetArchive_default_instance_;
constexpr ReferencesToDirtyArchive::ReferencesToDirtyArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : to_dirty_range_refs_()
  , to_dirty_owner_ids_(nullptr)
  , to_dirty_cells_(nullptr)
  , to_dirty_cells_additional_(nullptr)
  , calc_in_progress_cells_(nullptr){}
struct ReferencesToDirtyArchiveDefaultTypeInternal {
  constexpr ReferencesToDirtyArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReferencesToDirtyArchiveDefaultTypeInternal() {}
  union {
    ReferencesToDirtyArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReferencesToDirtyArchiveDefaultTypeInternal _ReferencesToDirtyArchive_default_instance_;
constexpr CoordMapperArchive_BaseToViewEntry::CoordMapperArchive_BaseToViewEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : base_row_(0u)
  , view_row_(0u){}
struct CoordMapperArchive_BaseToViewEntryDefaultTypeInternal {
  constexpr CoordMapperArchive_BaseToViewEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CoordMapperArchive_BaseToViewEntryDefaultTypeInternal() {}
  union {
    CoordMapperArchive_BaseToViewEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CoordMapperArchive_BaseToViewEntryDefaultTypeInternal _CoordMapperArchive_BaseToViewEntry_default_instance_;
constexpr CoordMapperArchive::CoordMapperArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : base_to_view_map_()
  , summary_and_label_rows_set_(nullptr)
  , table_uid_(nullptr){}
struct CoordMapperArchiveDefaultTypeInternal {
  constexpr CoordMapperArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CoordMapperArchiveDefaultTypeInternal() {}
  union {
    CoordMapperArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CoordMapperArchiveDefaultTypeInternal _CoordMapperArchive_default_instance_;
constexpr ReferenceArchive::ReferenceArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cell_reference_(nullptr)
  , range_reference_(nullptr)
  , reference_type_(1)
{}
struct ReferenceArchiveDefaultTypeInternal {
  constexpr ReferenceArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReferenceArchiveDefaultTypeInternal() {}
  union {
    ReferenceArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReferenceArchiveDefaultTypeInternal _ReferenceArchive_default_instance_;
constexpr EdgeArchive::EdgeArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : owner_id_(nullptr)
  , column_(0u)
  , row_(0u)
  , is_precedent_(false){}
struct EdgeArchiveDefaultTypeInternal {
  constexpr EdgeArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EdgeArchiveDefaultTypeInternal() {}
  union {
    EdgeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EdgeArchiveDefaultTypeInternal _EdgeArchive_default_instance_;
constexpr EdgesArchive::EdgesArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : packed_edge_without_owner_()
  , packed_edge_with_owner_()
  , owner_id_for_edge_()
  , internal_owner_id_for_edge_(){}
struct EdgesArchiveDefaultTypeInternal {
  constexpr EdgesArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EdgesArchiveDefaultTypeInternal() {}
  union {
    EdgesArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EdgesArchiveDefaultTypeInternal _EdgesArchive_default_instance_;
constexpr ExpandedEdgesArchive::ExpandedEdgesArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : edge_without_owner_rows_()
  , edge_without_owner_columns_()
  , edge_with_owner_rows_()
  , edge_with_owner_columns_()
  , internal_owner_id_for_edge_(){}
struct ExpandedEdgesArchiveDefaultTypeInternal {
  constexpr ExpandedEdgesArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ExpandedEdgesArchiveDefaultTypeInternal() {}
  union {
    ExpandedEdgesArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ExpandedEdgesArchiveDefaultTypeInternal _ExpandedEdgesArchive_default_instance_;
constexpr CellRecordArchive::CellRecordArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : edge_()
  , edges_(nullptr)
  , column_(0u)
  , row_(0u)
  , dirty_self_plus_precedents_count_(PROTOBUF_ULONGLONG(0))
  , is_in_a_cycle_(false)
  , has_calculated_precedents_(false)
  , calculate_precedents_on_next_recalc_(false)
  , translate_for_excel_import_on_next_recalc_(false)
  , contains_a_formula_(true){}
struct CellRecordArchiveDefaultTypeInternal {
  constexpr CellRecordArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CellRecordArchiveDefaultTypeInternal() {}
  union {
    CellRecordArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CellRecordArchiveDefaultTypeInternal _CellRecordArchive_default_instance_;
constexpr CellDependenciesArchive::CellDependenciesArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cell_record_()
  , num_dirty_cells_(0u){}
struct CellDependenciesArchiveDefaultTypeInternal {
  constexpr CellDependenciesArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CellDependenciesArchiveDefaultTypeInternal() {}
  union {
    CellDependenciesArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CellDependenciesArchiveDefaultTypeInternal _CellDependenciesArchive_default_instance_;
constexpr CellRecordExpandedArchive::CellRecordExpandedArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : expanded_edges_(nullptr)
  , column_(0u)
  , row_(0u)
  , dirty_self_plus_precedents_count_(PROTOBUF_ULONGLONG(0))
  , is_in_a_cycle_(false)
  , has_calculated_precedents_(false){}
struct CellRecordExpandedArchiveDefaultTypeInternal {
  constexpr CellRecordExpandedArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CellRecordExpandedArchiveDefaultTypeInternal() {}
  union {
    CellRecordExpandedArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CellRecordExpandedArchiveDefaultTypeInternal _CellRecordExpandedArchive_default_instance_;
constexpr CellDependenciesExpandedArchive::CellDependenciesExpandedArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cell_record_(){}
struct CellDependenciesExpandedArchiveDefaultTypeInternal {
  constexpr CellDependenciesExpandedArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CellDependenciesExpandedArchiveDefaultTypeInternal() {}
  union {
    CellDependenciesExpandedArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CellDependenciesExpandedArchiveDefaultTypeInternal _CellDependenciesExpandedArchive_default_instance_;
constexpr CellRecordTileArchive::CellRecordTileArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cell_records_()
  , internal_owner_id_(0u)
  , tile_column_begin_(0u)
  , tile_row_begin_(0u){}
struct CellRecordTileArchiveDefaultTypeInternal {
  constexpr CellRecordTileArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CellRecordTileArchiveDefaultTypeInternal() {}
  union {
    CellRecordTileArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CellRecordTileArchiveDefaultTypeInternal _CellRecordTileArchive_default_instance_;
constexpr CellDependenciesTiledArchive::CellDependenciesTiledArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cell_record_tiles_(){}
struct CellDependenciesTiledArchiveDefaultTypeInternal {
  constexpr CellDependenciesTiledArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CellDependenciesTiledArchiveDefaultTypeInternal() {}
  union {
    CellDependenciesTiledArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CellDependenciesTiledArchiveDefaultTypeInternal _CellDependenciesTiledArchive_default_instance_;
constexpr VolatileDependenciesArchive::VolatileDependenciesArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : volatile_time_cell_column_()
  , volatile_time_cell_row_()
  , volatile_random_cell_column_()
  , volatile_random_cell_row_()
  , volatile_location_cell_column_()
  , volatile_location_cell_row_()
  , volatile_compass_cell_column_()
  , volatile_compass_cell_row_()
  , calculated_dependency_cell_column_()
  , calculated_dependency_cell_row_()
  , volatile_geometry_cell_()
  , volatile_geometry_cell_reference_()
  , volatile_locale_cell_column_()
  , volatile_locale_cell_row_()
  , volatile_sheet_table_name_cell_column_()
  , volatile_sheet_table_name_cell_row_()
  , volatile_remote_data_cell_column_()
  , volatile_remote_data_cell_row_(){}
struct VolatileDependenciesArchiveDefaultTypeInternal {
  constexpr VolatileDependenciesArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VolatileDependenciesArchiveDefaultTypeInternal() {}
  union {
    VolatileDependenciesArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VolatileDependenciesArchiveDefaultTypeInternal _VolatileDependenciesArchive_default_instance_;
constexpr VolatileDependenciesExpandedArchive::VolatileDependenciesExpandedArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : volatile_time_cells_(nullptr)
  , volatile_random_cells_(nullptr)
  , volatile_locale_cells_(nullptr)
  , volatile_sheet_table_name_cells_(nullptr)
  , volatile_remote_data_cells_(nullptr)
  , volatile_geometry_cell_refs_(nullptr){}
struct VolatileDependenciesExpandedArchiveDefaultTypeInternal {
  constexpr VolatileDependenciesExpandedArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VolatileDependenciesExpandedArchiveDefaultTypeInternal() {}
  union {
    VolatileDependenciesExpandedArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VolatileDependenciesExpandedArchiveDefaultTypeInternal _VolatileDependenciesExpandedArchive_default_instance_;
constexpr RTreeInternalNodeContentsArchive::RTreeInternalNodeContentsArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : min_()
  , max_()
  , child_(nullptr){}
struct RTreeInternalNodeContentsArchiveDefaultTypeInternal {
  constexpr RTreeInternalNodeContentsArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RTreeInternalNodeContentsArchiveDefaultTypeInternal() {}
  union {
    RTreeInternalNodeContentsArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RTreeInternalNodeContentsArchiveDefaultTypeInternal _RTreeInternalNodeContentsArchive_default_instance_;
constexpr RTreeLeafNodeContentsArchive::RTreeLeafNodeContentsArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : min_()
  , max_()
  , cell_reference_(nullptr){}
struct RTreeLeafNodeContentsArchiveDefaultTypeInternal {
  constexpr RTreeLeafNodeContentsArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RTreeLeafNodeContentsArchiveDefaultTypeInternal() {}
  union {
    RTreeLeafNodeContentsArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RTreeLeafNodeContentsArchiveDefaultTypeInternal _RTreeLeafNodeContentsArchive_default_instance_;
constexpr RTreeNodeArchive::RTreeNodeArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : internal_node_contents_()
  , leaf_node_contents_()
  , level_(0u)
  , count_(0u){}
struct RTreeNodeArchiveDefaultTypeInternal {
  constexpr RTreeNodeArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RTreeNodeArchiveDefaultTypeInternal() {}
  union {
    RTreeNodeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RTreeNodeArchiveDefaultTypeInternal _RTreeNodeArchive_default_instance_;
constexpr RTreeArchive::RTreeArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : root_(nullptr)
  , data_file_id_(0u)
  , data_size_(0u)
  , data_num_dims_(0u)
  , data_elem_size_(0u)
  , data_elem_real_size_(0u)
  , data_max_nodes_(0u)
  , data_min_nodes_(0u){}
struct RTreeArchiveDefaultTypeInternal {
  constexpr RTreeArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RTreeArchiveDefaultTypeInternal() {}
  union {
    RTreeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RTreeArchiveDefaultTypeInternal _RTreeArchive_default_instance_;
constexpr RangeBackDependencyArchive::RangeBackDependencyArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : range_reference_(nullptr)
  , internal_range_reference_(nullptr)
  , cell_coord_row_(0u)
  , cell_coord_column_(0u){}
struct RangeBackDependencyArchiveDefaultTypeInternal {
  constexpr RangeBackDependencyArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RangeBackDependencyArchiveDefaultTypeInternal() {}
  union {
    RangeBackDependencyArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RangeBackDependencyArchiveDefaultTypeInternal _RangeBackDependencyArchive_default_instance_;
constexpr RangeDependenciesArchive::RangeDependenciesArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : back_dependency_(){}
struct RangeDependenciesArchiveDefaultTypeInternal {
  constexpr RangeDependenciesArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RangeDependenciesArchiveDefaultTypeInternal() {}
  union {
    RangeDependenciesArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RangeDependenciesArchiveDefaultTypeInternal _RangeDependenciesArchive_default_instance_;
constexpr RangePrecedentsTileArchive_FromToRangeArchive::RangePrecedentsTileArchive_FromToRangeArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : from_coord_(nullptr)
  , refers_to_rect_(nullptr){}
struct RangePrecedentsTileArchive_FromToRangeArchiveDefaultTypeInternal {
  constexpr RangePrecedentsTileArchive_FromToRangeArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RangePrecedentsTileArchive_FromToRangeArchiveDefaultTypeInternal() {}
  union {
    RangePrecedentsTileArchive_FromToRangeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RangePrecedentsTileArchive_FromToRangeArchiveDefaultTypeInternal _RangePrecedentsTileArchive_FromToRangeArchive_default_instance_;
constexpr RangePrecedentsTileArchive::RangePrecedentsTileArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : from_to_range_()
  , to_owner_id_(0u){}
struct RangePrecedentsTileArchiveDefaultTypeInternal {
  constexpr RangePrecedentsTileArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RangePrecedentsTileArchiveDefaultTypeInternal() {}
  union {
    RangePrecedentsTileArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RangePrecedentsTileArchiveDefaultTypeInternal _RangePrecedentsTileArchive_default_instance_;
constexpr RangeDependenciesTiledArchive::RangeDependenciesTiledArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : range_precedents_tile_(){}
struct RangeDependenciesTiledArchiveDefaultTypeInternal {
  constexpr RangeDependenciesTiledArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RangeDependenciesTiledArchiveDefaultTypeInternal() {}
  union {
    RangeDependenciesTiledArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RangeDependenciesTiledArchiveDefaultTypeInternal _RangeDependenciesTiledArchive_default_instance_;
constexpr SpanningDependenciesArchive_ReferringColumnToLocalCells::SpanningDependenciesArchive_ReferringColumnToLocalCells(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cell_coordinate_()
  , column_(0u)
  , range_context_(0)
{}
struct SpanningDependenciesArchive_ReferringColumnToLocalCellsDefaultTypeInternal {
  constexpr SpanningDependenciesArchive_ReferringColumnToLocalCellsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SpanningDependenciesArchive_ReferringColumnToLocalCellsDefaultTypeInternal() {}
  union {
    SpanningDependenciesArchive_ReferringColumnToLocalCells _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SpanningDependenciesArchive_ReferringColumnToLocalCellsDefaultTypeInternal _SpanningDependenciesArchive_ReferringColumnToLocalCells_default_instance_;
constexpr SpanningDependenciesArchive_ReferringColumnToRemoteCells::SpanningDependenciesArchive_ReferringColumnToRemoteCells(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : internal_cell_reference_()
  , column_(0u)
  , range_context_(0)
{}
struct SpanningDependenciesArchive_ReferringColumnToRemoteCellsDefaultTypeInternal {
  constexpr SpanningDependenciesArchive_ReferringColumnToRemoteCellsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SpanningDependenciesArchive_ReferringColumnToRemoteCellsDefaultTypeInternal() {}
  union {
    SpanningDependenciesArchive_ReferringColumnToRemoteCells _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SpanningDependenciesArchive_ReferringColumnToRemoteCellsDefaultTypeInternal _SpanningDependenciesArchive_ReferringColumnToRemoteCells_default_instance_;
constexpr SpanningDependenciesArchive::SpanningDependenciesArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : column_()
  , range_context_()
  , cell_()
  , referring_column_to_local_cells_()
  , referring_column_to_remote_cells_()
  , total_range_for_deleted_table_(nullptr)
  , body_range_for_deleted_table_(nullptr){}
struct SpanningDependenciesArchiveDefaultTypeInternal {
  constexpr SpanningDependenciesArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SpanningDependenciesArchiveDefaultTypeInternal() {}
  union {
    SpanningDependenciesArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SpanningDependenciesArchiveDefaultTypeInternal _SpanningDependenciesArchive_default_instance_;
constexpr SpanningDependenciesExpandedArchive_ExtentRange::SpanningDependenciesExpandedArchive_ExtentRange(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : extent_begin_(0u)
  , extent_end_(0u){}
struct SpanningDependenciesExpandedArchive_ExtentRangeDefaultTypeInternal {
  constexpr SpanningDependenciesExpandedArchive_ExtentRangeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SpanningDependenciesExpandedArchive_ExtentRangeDefaultTypeInternal() {}
  union {
    SpanningDependenciesExpandedArchive_ExtentRange _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SpanningDependenciesExpandedArchive_ExtentRangeDefaultTypeInternal _SpanningDependenciesExpandedArchive_ExtentRange_default_instance_;
constexpr SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext::SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ranges_()
  , owner_id_(0u)
  , range_context_(0)
{}
struct SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContextDefaultTypeInternal {
  constexpr SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContextDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContextDefaultTypeInternal() {}
  union {
    SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContextDefaultTypeInternal _SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext_default_instance_;
constexpr SpanningDependenciesExpandedArchive_CellCoordRefersToExtents::SpanningDependenciesExpandedArchive_CellCoordRefersToExtents(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ranges_by_table_context_()
  , coordinate_(nullptr){}
struct SpanningDependenciesExpandedArchive_CellCoordRefersToExtentsDefaultTypeInternal {
  constexpr SpanningDependenciesExpandedArchive_CellCoordRefersToExtentsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SpanningDependenciesExpandedArchive_CellCoordRefersToExtentsDefaultTypeInternal() {}
  union {
    SpanningDependenciesExpandedArchive_CellCoordRefersToExtents _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SpanningDependenciesExpandedArchive_CellCoordRefersToExtentsDefaultTypeInternal _SpanningDependenciesExpandedArchive_CellCoordRefersToExtents_default_instance_;
constexpr SpanningDependenciesExpandedArchive::SpanningDependenciesExpandedArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : coord_refers_to_spans_()
  , total_range_for_table_(nullptr)
  , body_range_for_table_(nullptr){}
struct SpanningDependenciesExpandedArchiveDefaultTypeInternal {
  constexpr SpanningDependenciesExpandedArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SpanningDependenciesExpandedArchiveDefaultTypeInternal() {}
  union {
    SpanningDependenciesExpandedArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SpanningDependenciesExpandedArchiveDefaultTypeInternal _SpanningDependenciesExpandedArchive_default_instance_;
constexpr WholeOwnerDependenciesArchive::WholeOwnerDependenciesArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : dependent_cell_(){}
struct WholeOwnerDependenciesArchiveDefaultTypeInternal {
  constexpr WholeOwnerDependenciesArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WholeOwnerDependenciesArchiveDefaultTypeInternal() {}
  union {
    WholeOwnerDependenciesArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WholeOwnerDependenciesArchiveDefaultTypeInternal _WholeOwnerDependenciesArchive_default_instance_;
constexpr WholeOwnerDependenciesExpandedArchive::WholeOwnerDependenciesExpandedArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : dependent_cells_(nullptr){}
struct WholeOwnerDependenciesExpandedArchiveDefaultTypeInternal {
  constexpr WholeOwnerDependenciesExpandedArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WholeOwnerDependenciesExpandedArchiveDefaultTypeInternal() {}
  union {
    WholeOwnerDependenciesExpandedArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WholeOwnerDependenciesExpandedArchiveDefaultTypeInternal _WholeOwnerDependenciesExpandedArchive_default_instance_;
constexpr CellErrorsArchive_ErrorForCell::CellErrorsArchive_ErrorForCell(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : coordinate_(nullptr)
  , err_due_to_cell_(nullptr)
  , error_flavor_(0)
{}
struct CellErrorsArchive_ErrorForCellDefaultTypeInternal {
  constexpr CellErrorsArchive_ErrorForCellDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CellErrorsArchive_ErrorForCellDefaultTypeInternal() {}
  union {
    CellErrorsArchive_ErrorForCell _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CellErrorsArchive_ErrorForCellDefaultTypeInternal _CellErrorsArchive_ErrorForCell_default_instance_;
constexpr CellErrorsArchive::CellErrorsArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : errors_(){}
struct CellErrorsArchiveDefaultTypeInternal {
  constexpr CellErrorsArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CellErrorsArchiveDefaultTypeInternal() {}
  union {
    CellErrorsArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CellErrorsArchiveDefaultTypeInternal _CellErrorsArchive_default_instance_;
constexpr UuidReferencesArchive_TableRef::UuidReferencesArchive_TableRef(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : owner_uuid_(nullptr)
  , coord_set_(nullptr){}
struct UuidReferencesArchive_TableRefDefaultTypeInternal {
  constexpr UuidReferencesArchive_TableRefDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UuidReferencesArchive_TableRefDefaultTypeInternal() {}
  union {
    UuidReferencesArchive_TableRef _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UuidReferencesArchive_TableRefDefaultTypeInternal _UuidReferencesArchive_TableRef_default_instance_;
constexpr UuidReferencesArchive_UuidRef::UuidReferencesArchive_UuidRef(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : uuid_(nullptr)
  , coord_set_(nullptr){}
struct UuidReferencesArchive_UuidRefDefaultTypeInternal {
  constexpr UuidReferencesArchive_UuidRefDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UuidReferencesArchive_UuidRefDefaultTypeInternal() {}
  union {
    UuidReferencesArchive_UuidRef _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UuidReferencesArchive_UuidRefDefaultTypeInternal _UuidReferencesArchive_UuidRef_default_instance_;
constexpr UuidReferencesArchive_TableWithUuidRef::UuidReferencesArchive_TableWithUuidRef(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : uuid_refs_()
  , owner_uuid_(nullptr){}
struct UuidReferencesArchive_TableWithUuidRefDefaultTypeInternal {
  constexpr UuidReferencesArchive_TableWithUuidRefDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UuidReferencesArchive_TableWithUuidRefDefaultTypeInternal() {}
  union {
    UuidReferencesArchive_TableWithUuidRef _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UuidReferencesArchive_TableWithUuidRefDefaultTypeInternal _UuidReferencesArchive_TableWithUuidRef_default_instance_;
constexpr UuidReferencesArchive::UuidReferencesArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : table_refs_()
  , table_uuid_refs_(){}
struct UuidReferencesArchiveDefaultTypeInternal {
  constexpr UuidReferencesArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UuidReferencesArchiveDefaultTypeInternal() {}
  union {
    UuidReferencesArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UuidReferencesArchiveDefaultTypeInternal _UuidReferencesArchive_default_instance_;
constexpr FormulaOwnerDependenciesArchive::FormulaOwnerDependenciesArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : formula_owner_uid_(nullptr)
  , cell_dependencies_(nullptr)
  , range_dependencies_(nullptr)
  , volatile_dependencies_(nullptr)
  , spanning_column_dependencies_(nullptr)
  , spanning_row_dependencies_(nullptr)
  , whole_owner_dependencies_(nullptr)
  , cell_errors_(nullptr)
  , formula_owner_(nullptr)
  , base_owner_uid_(nullptr)
  , tiled_cell_dependencies_(nullptr)
  , uuid_references_(nullptr)
  , tiled_range_dependencies_(nullptr)
  , internal_formula_owner_id_(0u)
  , owner_kind_(0u){}
struct FormulaOwnerDependenciesArchiveDefaultTypeInternal {
  constexpr FormulaOwnerDependenciesArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FormulaOwnerDependenciesArchiveDefaultTypeInternal() {}
  union {
    FormulaOwnerDependenciesArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FormulaOwnerDependenciesArchiveDefaultTypeInternal _FormulaOwnerDependenciesArchive_default_instance_;
constexpr FormulaOwnerInfoArchive::FormulaOwnerInfoArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : formula_owner_id_(nullptr)
  , cell_dependencies_(nullptr)
  , range_dependencies_(nullptr)
  , volatile_dependencies_(nullptr)
  , spanning_column_dependencies_(nullptr)
  , spanning_row_dependencies_(nullptr)
  , formula_owner_(nullptr)
  , whole_owner_dependencies_(nullptr)
  , cell_errors_(nullptr){}
struct FormulaOwnerInfoArchiveDefaultTypeInternal {
  constexpr FormulaOwnerInfoArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FormulaOwnerInfoArchiveDefaultTypeInternal() {}
  union {
    FormulaOwnerInfoArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FormulaOwnerInfoArchiveDefaultTypeInternal _FormulaOwnerInfoArchive_default_instance_;
constexpr SubFormulaOwnerIDArchive::SubFormulaOwnerIDArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : base_owner_uid_(nullptr)
  , owner_kind_(0u){}
struct SubFormulaOwnerIDArchiveDefaultTypeInternal {
  constexpr SubFormulaOwnerIDArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SubFormulaOwnerIDArchiveDefaultTypeInternal() {}
  union {
    SubFormulaOwnerIDArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SubFormulaOwnerIDArchiveDefaultTypeInternal _SubFormulaOwnerIDArchive_default_instance_;
constexpr OwnerIDMapArchive_OwnerIDMapArchiveEntry::OwnerIDMapArchive_OwnerIDMapArchiveEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : owner_id_(nullptr)
  , sub_formula_owner_uid_(nullptr)
  , internal_owner_id_(0u){}
struct OwnerIDMapArchive_OwnerIDMapArchiveEntryDefaultTypeInternal {
  constexpr OwnerIDMapArchive_OwnerIDMapArchiveEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OwnerIDMapArchive_OwnerIDMapArchiveEntryDefaultTypeInternal() {}
  union {
    OwnerIDMapArchive_OwnerIDMapArchiveEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OwnerIDMapArchive_OwnerIDMapArchiveEntryDefaultTypeInternal _OwnerIDMapArchive_OwnerIDMapArchiveEntry_default_instance_;
constexpr OwnerIDMapArchive::OwnerIDMapArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : map_entry_()
  , unregistered_internal_owner_id_(){}
struct OwnerIDMapArchiveDefaultTypeInternal {
  constexpr OwnerIDMapArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OwnerIDMapArchiveDefaultTypeInternal() {}
  union {
    OwnerIDMapArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OwnerIDMapArchiveDefaultTypeInternal _OwnerIDMapArchive_default_instance_;
constexpr UidLookupListArchive::UidLookupListArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : uuids_(){}
struct UidLookupListArchiveDefaultTypeInternal {
  constexpr UidLookupListArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UidLookupListArchiveDefaultTypeInternal() {}
  union {
    UidLookupListArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UidLookupListArchiveDefaultTypeInternal _UidLookupListArchive_default_instance_;
constexpr DependencyTrackerArchive::DependencyTrackerArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : formula_owner_info_()
  , dirty_leaf_()
  , internal_dirty_leaf_()
  , formula_owner_dependencies_()
  , owner_id_map_(nullptr)
  , number_of_formulas_(PROTOBUF_ULONGLONG(0)){}
struct DependencyTrackerArchiveDefaultTypeInternal {
  constexpr DependencyTrackerArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DependencyTrackerArchiveDefaultTypeInternal() {}
  union {
    DependencyTrackerArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DependencyTrackerArchiveDefaultTypeInternal _DependencyTrackerArchive_default_instance_;
constexpr RemoteDataSpecifierArchive::RemoteDataSpecifierArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : symbol_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , function_index_(0u)
  , attribute_(0u)
  , date_(0){}
struct RemoteDataSpecifierArchiveDefaultTypeInternal {
  constexpr RemoteDataSpecifierArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RemoteDataSpecifierArchiveDefaultTypeInternal() {}
  union {
    RemoteDataSpecifierArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RemoteDataSpecifierArchiveDefaultTypeInternal _RemoteDataSpecifierArchive_default_instance_;
constexpr RemoteDataValueMapArchive_RemoteDataMapEntry::RemoteDataValueMapArchive_RemoteDataMapEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : specifier_(nullptr)
  , value_(nullptr){}
struct RemoteDataValueMapArchive_RemoteDataMapEntryDefaultTypeInternal {
  constexpr RemoteDataValueMapArchive_RemoteDataMapEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RemoteDataValueMapArchive_RemoteDataMapEntryDefaultTypeInternal() {}
  union {
    RemoteDataValueMapArchive_RemoteDataMapEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RemoteDataValueMapArchive_RemoteDataMapEntryDefaultTypeInternal _RemoteDataValueMapArchive_RemoteDataMapEntry_default_instance_;
constexpr RemoteDataValueMapArchive::RemoteDataValueMapArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : entry_(){}
struct RemoteDataValueMapArchiveDefaultTypeInternal {
  constexpr RemoteDataValueMapArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RemoteDataValueMapArchiveDefaultTypeInternal() {}
  union {
    RemoteDataValueMapArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RemoteDataValueMapArchiveDefaultTypeInternal _RemoteDataValueMapArchive_default_instance_;
constexpr StockArchive_AttributeEntry::StockArchive_AttributeEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , attribute_(0u){}
struct StockArchive_AttributeEntryDefaultTypeInternal {
  constexpr StockArchive_AttributeEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StockArchive_AttributeEntryDefaultTypeInternal() {}
  union {
    StockArchive_AttributeEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StockArchive_AttributeEntryDefaultTypeInternal _StockArchive_AttributeEntry_default_instance_;
constexpr StockArchive::StockArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : attribute_()
  , symbol_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , date_(0){}
struct StockArchiveDefaultTypeInternal {
  constexpr StockArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StockArchiveDefaultTypeInternal() {}
  union {
    StockArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StockArchiveDefaultTypeInternal _StockArchive_default_instance_;
constexpr RemoteDataStoreArchive::RemoteDataStoreArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stocks_()
  , value_map_(nullptr){}
struct RemoteDataStoreArchiveDefaultTypeInternal {
  constexpr RemoteDataStoreArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RemoteDataStoreArchiveDefaultTypeInternal() {}
  union {
    RemoteDataStoreArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RemoteDataStoreArchiveDefaultTypeInternal _RemoteDataStoreArchive_default_instance_;
constexpr NameTrackedReferencePair::NameTrackedReferencePair(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , tracked_reference_(nullptr)
  , tracked_reference_id_(0u){}
struct NameTrackedReferencePairDefaultTypeInternal {
  constexpr NameTrackedReferencePairDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NameTrackedReferencePairDefaultTypeInternal() {}
  union {
    NameTrackedReferencePair _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NameTrackedReferencePairDefaultTypeInternal _NameTrackedReferencePair_default_instance_;
constexpr NamesByTrackedReferenceArchive::NamesByTrackedReferenceArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_tracked_reference_pair_()
  , table_id_(nullptr){}
struct NamesByTrackedReferenceArchiveDefaultTypeInternal {
  constexpr NamesByTrackedReferenceArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NamesByTrackedReferenceArchiveDefaultTypeInternal() {}
  union {
    NamesByTrackedReferenceArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NamesByTrackedReferenceArchiveDefaultTypeInternal _NamesByTrackedReferenceArchive_default_instance_;
constexpr NamedReferenceManagerArchive::NamedReferenceManagerArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : names_by_tracked_reference_by_table_()
  , reference_tracker_(nullptr){}
struct NamedReferenceManagerArchiveDefaultTypeInternal {
  constexpr NamedReferenceManagerArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NamedReferenceManagerArchiveDefaultTypeInternal() {}
  union {
    NamedReferenceManagerArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NamedReferenceManagerArchiveDefaultTypeInternal _NamedReferenceManagerArchive_default_instance_;
constexpr UuidSetStoreArchive_UuidSet::UuidSetStoreArchive_UuidSet(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : uuid_()
  , index_of_set_(0u){}
struct UuidSetStoreArchive_UuidSetDefaultTypeInternal {
  constexpr UuidSetStoreArchive_UuidSetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UuidSetStoreArchive_UuidSetDefaultTypeInternal() {}
  union {
    UuidSetStoreArchive_UuidSet _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UuidSetStoreArchive_UuidSetDefaultTypeInternal _UuidSetStoreArchive_UuidSet_default_instance_;
constexpr UuidSetStoreArchive::UuidSetStoreArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : uuidset_(){}
struct UuidSetStoreArchiveDefaultTypeInternal {
  constexpr UuidSetStoreArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UuidSetStoreArchiveDefaultTypeInternal() {}
  union {
    UuidSetStoreArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UuidSetStoreArchiveDefaultTypeInternal _UuidSetStoreArchive_default_instance_;
constexpr UuidReferenceMapArchive_CellRefsForUuid::UuidReferenceMapArchive_CellRefsForUuid(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cell_ref_()
  , uuid_(nullptr)
  , cell_refs_(nullptr){}
struct UuidReferenceMapArchive_CellRefsForUuidDefaultTypeInternal {
  constexpr UuidReferenceMapArchive_CellRefsForUuidDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UuidReferenceMapArchive_CellRefsForUuidDefaultTypeInternal() {}
  union {
    UuidReferenceMapArchive_CellRefsForUuid _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UuidReferenceMapArchive_CellRefsForUuidDefaultTypeInternal _UuidReferenceMapArchive_CellRefsForUuid_default_instance_;
constexpr UuidReferenceMapArchive::UuidReferenceMapArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cell_refs_for_uuid_(){}
struct UuidReferenceMapArchiveDefaultTypeInternal {
  constexpr UuidReferenceMapArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UuidReferenceMapArchiveDefaultTypeInternal() {}
  union {
    UuidReferenceMapArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UuidReferenceMapArchiveDefaultTypeInternal _UuidReferenceMapArchive_default_instance_;
constexpr GroupByNodeMapArchive_CellRefsForGroupNode::GroupByNodeMapArchive_CellRefsForGroupNode(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : group_node_uid_(nullptr)
  , cell_refs_(nullptr){}
struct GroupByNodeMapArchive_CellRefsForGroupNodeDefaultTypeInternal {
  constexpr GroupByNodeMapArchive_CellRefsForGroupNodeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GroupByNodeMapArchive_CellRefsForGroupNodeDefaultTypeInternal() {}
  union {
    GroupByNodeMapArchive_CellRefsForGroupNode _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GroupByNodeMapArchive_CellRefsForGroupNodeDefaultTypeInternal _GroupByNodeMapArchive_CellRefsForGroupNode_default_instance_;
constexpr GroupByNodeMapArchive_GroupNodesForGroupBy::GroupByNodeMapArchive_GroupNodesForGroupBy(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : refs_for_group_node_()
  , group_by_uid_(nullptr){}
struct GroupByNodeMapArchive_GroupNodesForGroupByDefaultTypeInternal {
  constexpr GroupByNodeMapArchive_GroupNodesForGroupByDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GroupByNodeMapArchive_GroupNodesForGroupByDefaultTypeInternal() {}
  union {
    GroupByNodeMapArchive_GroupNodesForGroupBy _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GroupByNodeMapArchive_GroupNodesForGroupByDefaultTypeInternal _GroupByNodeMapArchive_GroupNodesForGroupBy_default_instance_;
constexpr GroupByNodeMapArchive::GroupByNodeMapArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : refs_for_group_by_(){}
struct GroupByNodeMapArchiveDefaultTypeInternal {
  constexpr GroupByNodeMapArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GroupByNodeMapArchiveDefaultTypeInternal() {}
  union {
    GroupByNodeMapArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GroupByNodeMapArchiveDefaultTypeInternal _GroupByNodeMapArchive_default_instance_;
constexpr CalculationEngineArchive::CalculationEngineArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : begin_tracking_names_legacy_nrm_()
  , end_tracking_names_legacy_nrm_()
  , saved_locale_identifier_for_4_2_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , document_timezone_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , saved_locale_identifier_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , dependency_tracker_(nullptr)
  , named_reference_manager_(nullptr)
  , uuid_reference_map_(nullptr)
  , table_uid_history_(nullptr)
  , remote_data_store_(nullptr)
  , group_node_map_(nullptr)
  , header_name_manager_(nullptr)
  , refs_to_dirty_(nullptr)
  , document_random_seed_(PROTOBUF_ULONGLONG(0))
  , document_timestamp_(0)
  , base_date_1904_(false)
  , excel_import_date_mode_(1)
{}
struct CalculationEngineArchiveDefaultTypeInternal {
  constexpr CalculationEngineArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CalculationEngineArchiveDefaultTypeInternal() {}
  union {
    CalculationEngineArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CalculationEngineArchiveDefaultTypeInternal _CalculationEngineArchive_default_instance_;
constexpr PreserveColumnRowFlagsArchive::PreserveColumnRowFlagsArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : begin_row_is_absolute_(false)
  , begin_column_is_absolute_(false)
  , end_row_is_absolute_(false)
  , end_column_is_absolute_(false){}
struct PreserveColumnRowFlagsArchiveDefaultTypeInternal {
  constexpr PreserveColumnRowFlagsArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PreserveColumnRowFlagsArchiveDefaultTypeInternal() {}
  union {
    PreserveColumnRowFlagsArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PreserveColumnRowFlagsArchiveDefaultTypeInternal _PreserveColumnRowFlagsArchive_default_instance_;
constexpr CategoryReferenceArchive_CatRefUidList::CategoryReferenceArchive_CatRefUidList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : uid_(){}
struct CategoryReferenceArchive_CatRefUidListDefaultTypeInternal {
  constexpr CategoryReferenceArchive_CatRefUidListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CategoryReferenceArchive_CatRefUidListDefaultTypeInternal() {}
  union {
    CategoryReferenceArchive_CatRefUidList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CategoryReferenceArchive_CatRefUidListDefaultTypeInternal _CategoryReferenceArchive_CatRefUidList_default_instance_;
constexpr CategoryReferenceArchive::CategoryReferenceArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : group_by_uid_(nullptr)
  , column_uid_(nullptr)
  , group_uids_(nullptr)
  , preserve_flags_(nullptr)
  , relative_group_uid_(nullptr)
  , absolute_group_uid_(nullptr)
  , aggregate_type_(0)

  , group_level_(0)
  , relative_column_(0){}
struct CategoryReferenceArchiveDefaultTypeInternal {
  constexpr CategoryReferenceArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CategoryReferenceArchiveDefaultTypeInternal() {}
  union {
    CategoryReferenceArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CategoryReferenceArchiveDefaultTypeInternal _CategoryReferenceArchive_default_instance_;
constexpr ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : row_handle_(0u)
  , column_handle_(0u)
  , row_is_sticky_(0u)
  , column_is_sticky_(0u){}
struct ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchiveDefaultTypeInternal {
  constexpr ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchiveDefaultTypeInternal() {}
  union {
    ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchiveDefaultTypeInternal _ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive_default_instance_;
constexpr ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ast_reference_whitespace_after_sheet_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ast_reference_whitespace_before_table_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ast_reference_whitespace_after_table_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ast_reference_whitespace_before_cell_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , table_id_(nullptr)
  , row_handle_(0u)
  , column_handle_(0u)
  , row_is_sticky_(0u)
  , column_is_sticky_(0u){}
struct ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchiveDefaultTypeInternal {
  constexpr ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchiveDefaultTypeInternal() {}
  union {
    ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchiveDefaultTypeInternal _ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive_default_instance_;
constexpr ASTNodeArrayArchive_ASTColumnCoordinateArchive::ASTNodeArrayArchive_ASTColumnCoordinateArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : column_(0)
  , absolute_(false){}
struct ASTNodeArrayArchive_ASTColumnCoordinateArchiveDefaultTypeInternal {
  constexpr ASTNodeArrayArchive_ASTColumnCoordinateArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ASTNodeArrayArchive_ASTColumnCoordinateArchiveDefaultTypeInternal() {}
  union {
    ASTNodeArrayArchive_ASTColumnCoordinateArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ASTNodeArrayArchive_ASTColumnCoordinateArchiveDefaultTypeInternal _ASTNodeArrayArchive_ASTColumnCoordinateArchive_default_instance_;
constexpr ASTNodeArrayArchive_ASTRowCoordinateArchive::ASTNodeArrayArchive_ASTRowCoordinateArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : row_(0)
  , absolute_(false){}
struct ASTNodeArrayArchive_ASTRowCoordinateArchiveDefaultTypeInternal {
  constexpr ASTNodeArrayArchive_ASTRowCoordinateArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ASTNodeArrayArchive_ASTRowCoordinateArchiveDefaultTypeInternal() {}
  union {
    ASTNodeArrayArchive_ASTRowCoordinateArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ASTNodeArrayArchive_ASTRowCoordinateArchiveDefaultTypeInternal _ASTNodeArrayArchive_ASTRowCoordinateArchive_default_instance_;
constexpr ASTNodeArrayArchive_ASTUidList::ASTNodeArrayArchive_ASTUidList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : uid_(){}
struct ASTNodeArrayArchive_ASTUidListDefaultTypeInternal {
  constexpr ASTNodeArrayArchive_ASTUidListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ASTNodeArrayArchive_ASTUidListDefaultTypeInternal() {}
  union {
    ASTNodeArrayArchive_ASTUidList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ASTNodeArrayArchive_ASTUidListDefaultTypeInternal _ASTNodeArrayArchive_ASTUidList_default_instance_;
constexpr ASTNodeArrayArchive_ASTUidTract::ASTNodeArrayArchive_ASTUidTract(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : columnuids_(nullptr)
  , rowuids_(nullptr)
  , is_range_ref_(false)
  , purpose_(0)

  , preserve_rectangular_(true){}
struct ASTNodeArrayArchive_ASTUidTractDefaultTypeInternal {
  constexpr ASTNodeArrayArchive_ASTUidTractDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ASTNodeArrayArchive_ASTUidTractDefaultTypeInternal() {}
  union {
    ASTNodeArrayArchive_ASTUidTract _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ASTNodeArrayArchive_ASTUidTractDefaultTypeInternal _ASTNodeArrayArchive_ASTUidTract_default_instance_;
constexpr ASTNodeArrayArchive_ASTStickyBits::ASTNodeArrayArchive_ASTStickyBits(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : begin_row_is_absolute_(false)
  , begin_column_is_absolute_(false)
  , end_row_is_absolute_(false)
  , end_column_is_absolute_(false){}
struct ASTNodeArrayArchive_ASTStickyBitsDefaultTypeInternal {
  constexpr ASTNodeArrayArchive_ASTStickyBitsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ASTNodeArrayArchive_ASTStickyBitsDefaultTypeInternal() {}
  union {
    ASTNodeArrayArchive_ASTStickyBits _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ASTNodeArrayArchive_ASTStickyBitsDefaultTypeInternal _ASTNodeArrayArchive_ASTStickyBits_default_instance_;
constexpr ASTNodeArrayArchive_ASTUidTractList::ASTNodeArrayArchive_ASTUidTractList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tract_()
  , sticky_bits_(nullptr){}
struct ASTNodeArrayArchive_ASTUidTractListDefaultTypeInternal {
  constexpr ASTNodeArrayArchive_ASTUidTractListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ASTNodeArrayArchive_ASTUidTractListDefaultTypeInternal() {}
  union {
    ASTNodeArrayArchive_ASTUidTractList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ASTNodeArrayArchive_ASTUidTractListDefaultTypeInternal _ASTNodeArrayArchive_ASTUidTractList_default_instance_;
constexpr ASTNodeArrayArchive_ASTUidCoordinateArchive::ASTNodeArrayArchive_ASTUidCoordinateArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : column_uid_(nullptr)
  , row_uid_(nullptr)
  , column_absolute_(false)
  , row_absolute_(false){}
struct ASTNodeArrayArchive_ASTUidCoordinateArchiveDefaultTypeInternal {
  constexpr ASTNodeArrayArchive_ASTUidCoordinateArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ASTNodeArrayArchive_ASTUidCoordinateArchiveDefaultTypeInternal() {}
  union {
    ASTNodeArrayArchive_ASTUidCoordinateArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ASTNodeArrayArchive_ASTUidCoordinateArchiveDefaultTypeInternal _ASTNodeArrayArchive_ASTUidCoordinateArchive_default_instance_;
constexpr ASTNodeArrayArchive_ASTCategoryReferenceArchive::ASTNodeArrayArchive_ASTCategoryReferenceArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : category_ref_(nullptr){}
struct ASTNodeArrayArchive_ASTCategoryReferenceArchiveDefaultTypeInternal {
  constexpr ASTNodeArrayArchive_ASTCategoryReferenceArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ASTNodeArrayArchive_ASTCategoryReferenceArchiveDefaultTypeInternal() {}
  union {
    ASTNodeArrayArchive_ASTCategoryReferenceArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ASTNodeArrayArchive_ASTCategoryReferenceArchiveDefaultTypeInternal _ASTNodeArrayArchive_ASTCategoryReferenceArchive_default_instance_;
constexpr ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive::ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : range_begin_(0)
  , range_end_(0){}
struct ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchiveDefaultTypeInternal {
  constexpr ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchiveDefaultTypeInternal() {}
  union {
    ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchiveDefaultTypeInternal _ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive_default_instance_;
constexpr ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive::ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : range_begin_(0u)
  , range_end_(0u){}
struct ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchiveDefaultTypeInternal {
  constexpr ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchiveDefaultTypeInternal() {}
  union {
    ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchiveDefaultTypeInternal _ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive_default_instance_;
constexpr ASTNodeArrayArchive_ASTColonTractArchive::ASTNodeArrayArchive_ASTColonTractArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : relative_column_()
  , relative_row_()
  , absolute_column_()
  , absolute_row_()
  , preserve_rectangular_(true){}
struct ASTNodeArrayArchive_ASTColonTractArchiveDefaultTypeInternal {
  constexpr ASTNodeArrayArchive_ASTColonTractArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ASTNodeArrayArchive_ASTColonTractArchiveDefaultTypeInternal() {}
  union {
    ASTNodeArrayArchive_ASTColonTractArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ASTNodeArrayArchive_ASTColonTractArchiveDefaultTypeInternal _ASTNodeArrayArchive_ASTColonTractArchive_default_instance_;
constexpr ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ast_reference_whitespace_after_sheet_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ast_reference_whitespace_before_table_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ast_reference_whitespace_after_table_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ast_reference_whitespace_before_cell_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , table_id_(nullptr){}
struct ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchiveDefaultTypeInternal {
  constexpr ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchiveDefaultTypeInternal() {}
  union {
    ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchiveDefaultTypeInternal _ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive_default_instance_;
constexpr ASTNodeArrayArchive_ASTLetNodeWhitespace::ASTNodeArrayArchive_ASTLetNodeWhitespace(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ast_let_whitespace_after_let_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ast_let_whitespace_after_identifier_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ast_let_whitespace_after_equals_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ast_let_whitespace_after_delimiter_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ASTNodeArrayArchive_ASTLetNodeWhitespaceDefaultTypeInternal {
  constexpr ASTNodeArrayArchive_ASTLetNodeWhitespaceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ASTNodeArrayArchive_ASTLetNodeWhitespaceDefaultTypeInternal() {}
  union {
    ASTNodeArrayArchive_ASTLetNodeWhitespace _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ASTNodeArrayArchive_ASTLetNodeWhitespaceDefaultTypeInternal _ASTNodeArrayArchive_ASTLetNodeWhitespace_default_instance_;
constexpr ASTNodeArrayArchive_ASTNodeArchive::ASTNodeArrayArchive_ASTNodeArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ast_string_node_string_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ast_unknown_function_node_string_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ast_date_node_date_time_format_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ast_whitespace_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ast_let_identifier_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ast_thunk_node_array_(nullptr)
  , ast_local_cell_reference_node_reference_(nullptr)
  , ast_cross_table_cell_reference_node_reference_(nullptr)
  , ast_column_(nullptr)
  , ast_row_(nullptr)
  , ast_cross_table_reference_extra_info_(nullptr)
  , ast_uid_coordinate_(nullptr)
  , ast_sticky_bits_(nullptr)
  , ast_let_e2_(nullptr)
  , ast_let_whitespace_(nullptr)
  , ast_tract_list_(nullptr)
  , ast_category_ref_(nullptr)
  , ast_colon_tract_(nullptr)
  , ast_frozen_sticky_bits_(nullptr)
  , ast_function_node_index_(0u)
  , ast_function_node_numargs_(0u)
  , ast_number_node_number_(0)
  , ast_date_node_datenum_(0)
  , ast_duration_node_unitnum_(0)
  , ast_duration_node_unit_(0)
  , ast_token_node_boolean_(false)
  , ast_array_node_numcol_(0u)
  , ast_array_node_numrow_(0u)
  , ast_list_node_numargs_(0u)
  , ast_unknown_function_node_numargs_(0u)
  , ast_boolean_node_boolean_(false)
  , ast_date_node_suppress_date_format_(false)
  , ast_date_node_suppress_time_format_(false)
  , ast_duration_node_use_automatic_units_(false)
  , ast_duration_node_style_(0u)
  , ast_duration_node_duration_unit_largest_(0u)
  , ast_duration_node_duration_unit_smallest_(0u)
  , ast_number_node_decimal_low_(PROTOBUF_ULONGLONG(0))
  , ast_symbol_(0u)
  , ast_number_node_decimal_high_(PROTOBUF_ULONGLONG(0))
  , ast_node_type_(1)
{}
struct ASTNodeArrayArchive_ASTNodeArchiveDefaultTypeInternal {
  constexpr ASTNodeArrayArchive_ASTNodeArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ASTNodeArrayArchive_ASTNodeArchiveDefaultTypeInternal() {}
  union {
    ASTNodeArrayArchive_ASTNodeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ASTNodeArrayArchive_ASTNodeArchiveDefaultTypeInternal _ASTNodeArrayArchive_ASTNodeArchive_default_instance_;
constexpr ASTNodeArrayArchive::ASTNodeArrayArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ast_node_(){}
struct ASTNodeArrayArchiveDefaultTypeInternal {
  constexpr ASTNodeArrayArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ASTNodeArrayArchiveDefaultTypeInternal() {}
  union {
    ASTNodeArrayArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ASTNodeArrayArchiveDefaultTypeInternal _ASTNodeArrayArchive_default_instance_;
constexpr FormulaTranslationFlagsArchive::FormulaTranslationFlagsArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : excel_import_translation_(false)
  , number_to_date_coercion_removal_translation_(false)
  , contains_uid_form_references_(false)
  , contains_frozen_references_(false){}
struct FormulaTranslationFlagsArchiveDefaultTypeInternal {
  constexpr FormulaTranslationFlagsArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FormulaTranslationFlagsArchiveDefaultTypeInternal() {}
  union {
    FormulaTranslationFlagsArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FormulaTranslationFlagsArchiveDefaultTypeInternal _FormulaTranslationFlagsArchive_default_instance_;
constexpr FormulaArchive::FormulaArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ast_node_array_(nullptr)
  , translation_flags_(nullptr)
  , host_table_uid_(nullptr)
  , host_column_uid_(nullptr)
  , host_row_uid_(nullptr)
  , host_column_(0u)
  , host_row_(0u)
  , host_column_is_negative_(false)
  , host_row_is_negative_(false){}
struct FormulaArchiveDefaultTypeInternal {
  constexpr FormulaArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FormulaArchiveDefaultTypeInternal() {}
  union {
    FormulaArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FormulaArchiveDefaultTypeInternal _FormulaArchive_default_instance_;
constexpr FunctorArchive::FunctorArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : formula_(nullptr)
  , num_args_(0u){}
struct FunctorArchiveDefaultTypeInternal {
  constexpr FunctorArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FunctorArchiveDefaultTypeInternal() {}
  union {
    FunctorArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FunctorArchiveDefaultTypeInternal _FunctorArchive_default_instance_;
constexpr FormatStructArchive::FormatStructArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : currency_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , date_time_format_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , format_type_(0u)
  , decimal_places_(0u)
  , negative_style_(0u)
  , duration_style_(0u)
  , base_(0u)
  , show_thousands_separator_(false)
  , use_accounting_style_(false)
  , base_use_minus_sign_(false)
  , suppress_date_format_(false)
  , base_places_(0u)
  , fraction_accuracy_(0u)
  , suppress_time_format_(false)
  , duration_unit_largest_(0u)
  , duration_unit_smallest_(0u){}
struct FormatStructArchiveDefaultTypeInternal {
  constexpr FormatStructArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FormatStructArchiveDefaultTypeInternal() {}
  union {
    FormatStructArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FormatStructArchiveDefaultTypeInternal _FormatStructArchive_default_instance_;
constexpr RangeCoordinateArchive::RangeCoordinateArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : top_left_column_(0u)
  , top_left_row_(0u)
  , bottom_right_column_(0u)
  , bottom_right_row_(0u){}
struct RangeCoordinateArchiveDefaultTypeInternal {
  constexpr RangeCoordinateArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RangeCoordinateArchiveDefaultTypeInternal() {}
  union {
    RangeCoordinateArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RangeCoordinateArchiveDefaultTypeInternal _RangeCoordinateArchive_default_instance_;
constexpr TableTransposeInfoArchive::TableTransposeInfoArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : body_range_for_transposed_table_(nullptr)
  , number_of_footer_rows_(0u){}
struct TableTransposeInfoArchiveDefaultTypeInternal {
  constexpr TableTransposeInfoArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TableTransposeInfoArchiveDefaultTypeInternal() {}
  union {
    TableTransposeInfoArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TableTransposeInfoArchiveDefaultTypeInternal _TableTransposeInfoArchive_default_instance_;
constexpr MergeOriginMovedArchive::MergeOriginMovedArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : src_column_()
  , src_row_()
  , dst_column_()
  , dst_row_(){}
struct MergeOriginMovedArchiveDefaultTypeInternal {
  constexpr MergeOriginMovedArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MergeOriginMovedArchiveDefaultTypeInternal() {}
  union {
    MergeOriginMovedArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MergeOriginMovedArchiveDefaultTypeInternal _MergeOriginMovedArchive_default_instance_;
constexpr OwnerUIDMapperArchive::OwnerUIDMapperArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : table_uid_(nullptr)
  , next_table_uid_(nullptr)
  , hidden_state_for_rows_owner_uid_(nullptr)
  , next_hidden_state_for_rows_owner_uid_(nullptr)
  , hidden_state_for_columns_owner_uid_(nullptr)
  , next_hidden_state_for_columns_owner_uid_(nullptr)
  , conditional_style_owner_uid_(nullptr)
  , next_conditional_style_owner_uid_(nullptr)
  , sort_rule_reference_tracker_owner_uid_(nullptr)
  , next_sort_rule_reference_tracker_owner_uid_(nullptr)
  , merge_owner_uid_(nullptr)
  , next_merge_owner_uid_(nullptr)
  , category_owner_uid_(nullptr)
  , next_category_owner_uid_(nullptr)
  , category_aggregates_owner_uid_(nullptr)
  , next_category_aggregates_owner_uid_(nullptr)
  , group_by_uid_(nullptr)
  , next_group_by_uid_(nullptr)
  , pencil_annotation_owner_uid_(nullptr)
  , next_pencil_annotation_owner_uid_(nullptr){}
struct OwnerUIDMapperArchiveDefaultTypeInternal {
  constexpr OwnerUIDMapperArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OwnerUIDMapperArchiveDefaultTypeInternal() {}
  union {
    OwnerUIDMapperArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OwnerUIDMapperArchiveDefaultTypeInternal _OwnerUIDMapperArchive_default_instance_;
constexpr RewriteTableUIDInfoArchive_TableUIDMapEntryArchive::RewriteTableUIDInfoArchive_TableUIDMapEntryArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : prev_table_uid_(nullptr)
  , new_table_uid_(nullptr){}
struct RewriteTableUIDInfoArchive_TableUIDMapEntryArchiveDefaultTypeInternal {
  constexpr RewriteTableUIDInfoArchive_TableUIDMapEntryArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RewriteTableUIDInfoArchive_TableUIDMapEntryArchiveDefaultTypeInternal() {}
  union {
    RewriteTableUIDInfoArchive_TableUIDMapEntryArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RewriteTableUIDInfoArchive_TableUIDMapEntryArchiveDefaultTypeInternal _RewriteTableUIDInfoArchive_TableUIDMapEntryArchive_default_instance_;
constexpr RewriteTableUIDInfoArchive::RewriteTableUIDInfoArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : table_uid_map_(){}
struct RewriteTableUIDInfoArchiveDefaultTypeInternal {
  constexpr RewriteTableUIDInfoArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RewriteTableUIDInfoArchiveDefaultTypeInternal() {}
  union {
    RewriteTableUIDInfoArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RewriteTableUIDInfoArchiveDefaultTypeInternal _RewriteTableUIDInfoArchive_default_instance_;
constexpr GroupByChangeArchive_GroupingColumnChangeArchive::GroupByChangeArchive_GroupingColumnChangeArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : old_level_(0u)
  , new_level_(0u){}
struct GroupByChangeArchive_GroupingColumnChangeArchiveDefaultTypeInternal {
  constexpr GroupByChangeArchive_GroupingColumnChangeArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GroupByChangeArchive_GroupingColumnChangeArchiveDefaultTypeInternal() {}
  union {
    GroupByChangeArchive_GroupingColumnChangeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GroupByChangeArchive_GroupingColumnChangeArchiveDefaultTypeInternal _GroupByChangeArchive_GroupingColumnChangeArchive_default_instance_;
constexpr GroupByChangeArchive::GroupByChangeArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : removed_group_uids_()
  , grouping_column_changes_()
  , group_by_uid_(nullptr)
  , previous_to_updated_map_(nullptr)
  , updated_to_previous_map_(nullptr)
  , change_type_(0)

  , previous_level_(0u)
  , updated_level_(0u){}
struct GroupByChangeArchiveDefaultTypeInternal {
  constexpr GroupByChangeArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GroupByChangeArchiveDefaultTypeInternal() {}
  union {
    GroupByChangeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GroupByChangeArchiveDefaultTypeInternal _GroupByChangeArchive_default_instance_;
constexpr RewriteGroupNodeUIDInfoArchive::RewriteGroupNodeUIDInfoArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : group_by_uid_(nullptr)
  , group_node_uid_map_(nullptr){}
struct RewriteGroupNodeUIDInfoArchiveDefaultTypeInternal {
  constexpr RewriteGroupNodeUIDInfoArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RewriteGroupNodeUIDInfoArchiveDefaultTypeInternal() {}
  union {
    RewriteGroupNodeUIDInfoArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RewriteGroupNodeUIDInfoArchiveDefaultTypeInternal _RewriteGroupNodeUIDInfoArchive_default_instance_;
constexpr IndexedUidsArchive_IndexedUid::IndexedUidsArchive_IndexedUid(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : uid_for_index_(nullptr)
  , index_for_uid_(0u){}
struct IndexedUidsArchive_IndexedUidDefaultTypeInternal {
  constexpr IndexedUidsArchive_IndexedUidDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IndexedUidsArchive_IndexedUidDefaultTypeInternal() {}
  union {
    IndexedUidsArchive_IndexedUid _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IndexedUidsArchive_IndexedUidDefaultTypeInternal _IndexedUidsArchive_IndexedUid_default_instance_;
constexpr IndexedUidsArchive::IndexedUidsArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : uids_(){}
struct IndexedUidsArchiveDefaultTypeInternal {
  constexpr IndexedUidsArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IndexedUidsArchiveDefaultTypeInternal() {}
  union {
    IndexedUidsArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IndexedUidsArchiveDefaultTypeInternal _IndexedUidsArchive_default_instance_;
constexpr RewriteRangeEntryArchive::RewriteRangeEntryArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : range_uids_()
  , range_location_(0u)
  , range_length_(0u)
  , offset_(0u){}
struct RewriteRangeEntryArchiveDefaultTypeInternal {
  constexpr RewriteRangeEntryArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RewriteRangeEntryArchiveDefaultTypeInternal() {}
  union {
    RewriteRangeEntryArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RewriteRangeEntryArchiveDefaultTypeInternal _RewriteRangeEntryArchive_default_instance_;
constexpr ColumnOrRowUuidsInfoArchive::ColumnOrRowUuidsInfoArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : range_entries_()
  , table_uid_(nullptr)
  , cond_style_owner_uid_(nullptr)
  , group_by_uid_(nullptr)
  , uids_(nullptr)
  , table_range_(nullptr)
  , insert_at_uid_(nullptr)
  , insert_opposite_uid_(nullptr)
  , is_rows_(false){}
struct ColumnOrRowUuidsInfoArchiveDefaultTypeInternal {
  constexpr ColumnOrRowUuidsInfoArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ColumnOrRowUuidsInfoArchiveDefaultTypeInternal() {}
  union {
    ColumnOrRowUuidsInfoArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ColumnOrRowUuidsInfoArchiveDefaultTypeInternal _ColumnOrRowUuidsInfoArchive_default_instance_;
constexpr RegionInfoArchive::RegionInfoArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : table_uid_(nullptr)
  , column_uids_(nullptr)
  , row_uids_(nullptr){}
struct RegionInfoArchiveDefaultTypeInternal {
  constexpr RegionInfoArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RegionInfoArchiveDefaultTypeInternal() {}
  union {
    RegionInfoArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RegionInfoArchiveDefaultTypeInternal _RegionInfoArchive_default_instance_;
constexpr RegionMovedInfoArchive::RegionMovedInfoArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : src_region_(nullptr)
  , dst_region_(nullptr)
  , original_src_region_(nullptr)
  , final_dest_table_uid_(nullptr)
  , span_rows_(false)
  , span_columns_(false){}
struct RegionMovedInfoArchiveDefaultTypeInternal {
  constexpr RegionMovedInfoArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RegionMovedInfoArchiveDefaultTypeInternal() {}
  union {
    RegionMovedInfoArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RegionMovedInfoArchiveDefaultTypeInternal _RegionMovedInfoArchive_default_instance_;
constexpr MergeSourceArchive::MergeSourceArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : coord_column_(0u)
  , coord_row_(0u){}
struct MergeSourceArchiveDefaultTypeInternal {
  constexpr MergeSourceArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MergeSourceArchiveDefaultTypeInternal() {}
  union {
    MergeSourceArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MergeSourceArchiveDefaultTypeInternal _MergeSourceArchive_default_instance_;
constexpr FormulaRewriteSpecArchive::FormulaRewriteSpecArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : table_uid_(nullptr)
  , cond_style_owner_uid_(nullptr)
  , group_by_uid_(nullptr)
  , column_or_row_uuids_info_(nullptr)
  , aux_column_or_row_uuids_info_(nullptr)
  , region_moved_info_(nullptr)
  , region_info_(nullptr)
  , rewrite_table_id_info_(nullptr)
  , transposed_table_info_(nullptr)
  , merge_origin_moved_info_(nullptr)
  , merge_source_(nullptr)
  , group_node_info_(nullptr)
  , groupby_change_(nullptr)
  , is_inverse_(false)
  , rewrite_type_(4)
{}
struct FormulaRewriteSpecArchiveDefaultTypeInternal {
  constexpr FormulaRewriteSpecArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FormulaRewriteSpecArchiveDefaultTypeInternal() {}
  union {
    FormulaRewriteSpecArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FormulaRewriteSpecArchiveDefaultTypeInternal _FormulaRewriteSpecArchive_default_instance_;
constexpr HauntedOwnerArchive::HauntedOwnerArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : owner_uid_(nullptr){}
struct HauntedOwnerArchiveDefaultTypeInternal {
  constexpr HauntedOwnerArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HauntedOwnerArchiveDefaultTypeInternal() {}
  union {
    HauntedOwnerArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HauntedOwnerArchiveDefaultTypeInternal _HauntedOwnerArchive_default_instance_;
constexpr CellCoordinateArchive::CellCoordinateArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : packeddata_(0u)
  , column_(0u)
  , row_(0u){}
struct CellCoordinateArchiveDefaultTypeInternal {
  constexpr CellCoordinateArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CellCoordinateArchiveDefaultTypeInternal() {}
  union {
    CellCoordinateArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CellCoordinateArchiveDefaultTypeInternal _CellCoordinateArchive_default_instance_;
constexpr CellCoordinateVectorArchive::CellCoordinateVectorArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cell_coord_(){}
struct CellCoordinateVectorArchiveDefaultTypeInternal {
  constexpr CellCoordinateVectorArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CellCoordinateVectorArchiveDefaultTypeInternal() {}
  union {
    CellCoordinateVectorArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CellCoordinateVectorArchiveDefaultTypeInternal _CellCoordinateVectorArchive_default_instance_;
constexpr ExpandedCellRefObjectPairArchive::ExpandedCellRefObjectPairArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cell_ref_(nullptr)
  , object_(nullptr){}
struct ExpandedCellRefObjectPairArchiveDefaultTypeInternal {
  constexpr ExpandedCellRefObjectPairArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ExpandedCellRefObjectPairArchiveDefaultTypeInternal() {}
  union {
    ExpandedCellRefObjectPairArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ExpandedCellRefObjectPairArchiveDefaultTypeInternal _ExpandedCellRefObjectPairArchive_default_instance_;
constexpr ExpandedCellRefObjectMapArchive::ExpandedCellRefObjectMapArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cell_ref_object_pair_(){}
struct ExpandedCellRefObjectMapArchiveDefaultTypeInternal {
  constexpr ExpandedCellRefObjectMapArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ExpandedCellRefObjectMapArchiveDefaultTypeInternal() {}
  union {
    ExpandedCellRefObjectMapArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ExpandedCellRefObjectMapArchiveDefaultTypeInternal _ExpandedCellRefObjectMapArchive_default_instance_;
constexpr FormulaAtCoordArchive::FormulaAtCoordArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : formula_(nullptr)
  , column_(0u)
  , row_(0u)
  , repeat_previous_formula_(false){}
struct FormulaAtCoordArchiveDefaultTypeInternal {
  constexpr FormulaAtCoordArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FormulaAtCoordArchiveDefaultTypeInternal() {}
  union {
    FormulaAtCoordArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FormulaAtCoordArchiveDefaultTypeInternal _FormulaAtCoordArchive_default_instance_;
constexpr FormulaCoordPairsByOwnerArchive::FormulaCoordPairsByOwnerArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : formula_at_coords_()
  , owner_uid_(nullptr)
  , owner_kind_(0u){}
struct FormulaCoordPairsByOwnerArchiveDefaultTypeInternal {
  constexpr FormulaCoordPairsByOwnerArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FormulaCoordPairsByOwnerArchiveDefaultTypeInternal() {}
  union {
    FormulaCoordPairsByOwnerArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FormulaCoordPairsByOwnerArchiveDefaultTypeInternal _FormulaCoordPairsByOwnerArchive_default_instance_;
constexpr FormulasForUndoArchive::FormulasForUndoArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : formulas_for_owner_(){}
struct FormulasForUndoArchiveDefaultTypeInternal {
  constexpr FormulasForUndoArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FormulasForUndoArchiveDefaultTypeInternal() {}
  union {
    FormulasForUndoArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FormulasForUndoArchiveDefaultTypeInternal _FormulasForUndoArchive_default_instance_;
constexpr FormulaRewriteCommandArchive::FormulaRewriteCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : table_rewrite_command_(nullptr)
  , super_(nullptr){}
struct FormulaRewriteCommandArchiveDefaultTypeInternal {
  constexpr FormulaRewriteCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FormulaRewriteCommandArchiveDefaultTypeInternal() {}
  union {
    FormulaRewriteCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FormulaRewriteCommandArchiveDefaultTypeInternal _FormulaRewriteCommandArchive_default_instance_;
constexpr ExtendTableIDHistoryCommandArchive::ExtendTableIDHistoryCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : super_(nullptr)
  , rewrite_spec_(nullptr)
  , table_uid_history_rollback_(nullptr){}
struct ExtendTableIDHistoryCommandArchiveDefaultTypeInternal {
  constexpr ExtendTableIDHistoryCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ExtendTableIDHistoryCommandArchiveDefaultTypeInternal() {}
  union {
    ExtendTableIDHistoryCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ExtendTableIDHistoryCommandArchiveDefaultTypeInternal _ExtendTableIDHistoryCommandArchive_default_instance_;
constexpr NumberTrackedReferencePairArchive::NumberTrackedReferencePairArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tracked_reference_(nullptr)
  , number_(0u){}
struct NumberTrackedReferencePairArchiveDefaultTypeInternal {
  constexpr NumberTrackedReferencePairArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NumberTrackedReferencePairArchiveDefaultTypeInternal() {}
  union {
    NumberTrackedReferencePairArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NumberTrackedReferencePairArchiveDefaultTypeInternal _NumberTrackedReferencePairArchive_default_instance_;
constexpr NumberToTrackedReferenceMapArchive::NumberToTrackedReferenceMapArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : number_tracked_reference_pair_(){}
struct NumberToTrackedReferenceMapArchiveDefaultTypeInternal {
  constexpr NumberToTrackedReferenceMapArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NumberToTrackedReferenceMapArchiveDefaultTypeInternal() {}
  union {
    NumberToTrackedReferenceMapArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NumberToTrackedReferenceMapArchiveDefaultTypeInternal _NumberToTrackedReferenceMapArchive_default_instance_;
constexpr TrackedReferencesRewriteCommandArchive::TrackedReferencesRewriteCommandArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : references_in_reference_tracker_(nullptr)
  , original_tracked_reference_copies_(nullptr)
  , rewrite_spec_(nullptr)
  , super_(nullptr){}
struct TrackedReferencesRewriteCommandArchiveDefaultTypeInternal {
  constexpr TrackedReferencesRewriteCommandArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TrackedReferencesRewriteCommandArchiveDefaultTypeInternal() {}
  union {
    TrackedReferencesRewriteCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TrackedReferencesRewriteCommandArchiveDefaultTypeInternal _TrackedReferencesRewriteCommandArchive_default_instance_;
constexpr TrackedReferenceArchive::TrackedReferenceArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ast_(nullptr)
  , formula_id_(0u){}
struct TrackedReferenceArchiveDefaultTypeInternal {
  constexpr TrackedReferenceArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TrackedReferenceArchiveDefaultTypeInternal() {}
  union {
    TrackedReferenceArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TrackedReferenceArchiveDefaultTypeInternal _TrackedReferenceArchive_default_instance_;
constexpr ExpandedTrackedReferenceArchive::ExpandedTrackedReferenceArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ast_(nullptr)
  , formula_column_(0u)
  , formula_row_(0u){}
struct ExpandedTrackedReferenceArchiveDefaultTypeInternal {
  constexpr ExpandedTrackedReferenceArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ExpandedTrackedReferenceArchiveDefaultTypeInternal() {}
  union {
    ExpandedTrackedReferenceArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ExpandedTrackedReferenceArchiveDefaultTypeInternal _ExpandedTrackedReferenceArchive_default_instance_;
constexpr ReferenceTrackerArchive::ReferenceTrackerArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tracked_reference_()
  , contained_tracked_reference_()
  , contained_expanded_tracked_reference_()
  , uuid_(nullptr){}
struct ReferenceTrackerArchiveDefaultTypeInternal {
  constexpr ReferenceTrackerArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReferenceTrackerArchiveDefaultTypeInternal() {}
  union {
    ReferenceTrackerArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReferenceTrackerArchiveDefaultTypeInternal _ReferenceTrackerArchive_default_instance_;
constexpr BooleanCellValueArchive::BooleanCellValueArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : format_(nullptr)
  , value_(false)
  , format_is_explicit_(false){}
struct BooleanCellValueArchiveDefaultTypeInternal {
  constexpr BooleanCellValueArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BooleanCellValueArchiveDefaultTypeInternal() {}
  union {
    BooleanCellValueArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BooleanCellValueArchiveDefaultTypeInternal _BooleanCellValueArchive_default_instance_;
constexpr DateCellValueArchive::DateCellValueArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : format_(nullptr)
  , value_(0)
  , format_is_implicit_(false)
  , format_is_explicit_(false){}
struct DateCellValueArchiveDefaultTypeInternal {
  constexpr DateCellValueArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DateCellValueArchiveDefaultTypeInternal() {}
  union {
    DateCellValueArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DateCellValueArchiveDefaultTypeInternal _DateCellValueArchive_default_instance_;
constexpr NumberCellValueArchive::NumberCellValueArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : currency_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , format_(nullptr)
  , value_(0)
  , unit_index_(0)
  , format_is_implicit_(false)
  , format_is_explicit_(false)
  , decimal_low_(PROTOBUF_ULONGLONG(0))
  , decimal_high_(PROTOBUF_ULONGLONG(0)){}
struct NumberCellValueArchiveDefaultTypeInternal {
  constexpr NumberCellValueArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NumberCellValueArchiveDefaultTypeInternal() {}
  union {
    NumberCellValueArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NumberCellValueArchiveDefaultTypeInternal _NumberCellValueArchive_default_instance_;
constexpr StringCellValueArchive::StringCellValueArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , format_(nullptr)
  , format_is_implicit_(false)
  , format_is_explicit_(false)
  , is_regex_(false)
  , is_case_sensitive_regex_(false){}
struct StringCellValueArchiveDefaultTypeInternal {
  constexpr StringCellValueArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StringCellValueArchiveDefaultTypeInternal() {}
  union {
    StringCellValueArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StringCellValueArchiveDefaultTypeInternal _StringCellValueArchive_default_instance_;
constexpr ErrorCellValueArchive::ErrorCellValueArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : extra_info_string_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , extra_info_double_(0)
  , extra_info_int_(0)
  , error_type_(1)
{}
struct ErrorCellValueArchiveDefaultTypeInternal {
  constexpr ErrorCellValueArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ErrorCellValueArchiveDefaultTypeInternal() {}
  union {
    ErrorCellValueArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ErrorCellValueArchiveDefaultTypeInternal _ErrorCellValueArchive_default_instance_;
constexpr CellValueArchive::CellValueArchive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : boolean_value_(nullptr)
  , date_value_(nullptr)
  , number_value_(nullptr)
  , string_value_(nullptr)
  , error_value_(nullptr)
  , cell_value_type_(1)
{}
struct CellValueArchiveDefaultTypeInternal {
  constexpr CellValueArchiveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CellValueArchiveDefaultTypeInternal() {}
  union {
    CellValueArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CellValueArchiveDefaultTypeInternal _CellValueArchive_default_instance_;
}  // namespace TSCE
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_TSCEArchives_2eproto[144];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_TSCEArchives_2eproto[12];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_TSCEArchives_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_TSCEArchives_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::TSCE::CellReferenceArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellReferenceArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::CellReferenceArchive, column_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellReferenceArchive, row_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellReferenceArchive, table_id_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::TSCE::InternalCellReferenceArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::InternalCellReferenceArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::InternalCellReferenceArchive, coordinate_),
  PROTOBUF_FIELD_OFFSET(::TSCE::InternalCellReferenceArchive, owner_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSCE::RangeReferenceArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RangeReferenceArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::RangeReferenceArchive, table_id_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RangeReferenceArchive, top_left_column_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RangeReferenceArchive, top_left_row_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RangeReferenceArchive, bottom_right_column_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RangeReferenceArchive, bottom_right_row_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::TSCE::InternalRangeReferenceArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::InternalRangeReferenceArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::InternalRangeReferenceArchive, owner_id_),
  PROTOBUF_FIELD_OFFSET(::TSCE::InternalRangeReferenceArchive, range_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::TSCE::IndexSetArchive_IndexSetEntry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::IndexSetArchive_IndexSetEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::IndexSetArchive_IndexSetEntry, range_begin_),
  PROTOBUF_FIELD_OFFSET(::TSCE::IndexSetArchive_IndexSetEntry, range_end_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSCE::IndexSetArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::IndexSetArchive, entries_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellCoordSetArchive_ColumnEntry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellCoordSetArchive_ColumnEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::CellCoordSetArchive_ColumnEntry, column_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellCoordSetArchive_ColumnEntry, row_set_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSCE::CellCoordSetArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::CellCoordSetArchive, column_entries_),
  PROTOBUF_FIELD_OFFSET(::TSCE::InternalCellRefSetArchive_OwnerEntry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::InternalCellRefSetArchive_OwnerEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::InternalCellRefSetArchive_OwnerEntry, owner_id_),
  PROTOBUF_FIELD_OFFSET(::TSCE::InternalCellRefSetArchive_OwnerEntry, coord_set_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSCE::InternalCellRefSetArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::InternalCellRefSetArchive, owner_entries_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ColumnRowSize, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ColumnRowSize, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::ColumnRowSize, num_columns_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ColumnRowSize, num_rows_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSCE::CellRectArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellRectArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::CellRectArchive, origin_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellRectArchive, size_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSCE::CellRefSetArchive_OwnerEntry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellRefSetArchive_OwnerEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::CellRefSetArchive_OwnerEntry, owner_uid_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellRefSetArchive_OwnerEntry, coord_set_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSCE::CellRefSetArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::CellRefSetArchive, owner_entries_),
  PROTOBUF_FIELD_OFFSET(::TSCE::UidCoordSetArchive_ColumnEntry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::UidCoordSetArchive_ColumnEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::UidCoordSetArchive_ColumnEntry, column_),
  PROTOBUF_FIELD_OFFSET(::TSCE::UidCoordSetArchive_ColumnEntry, row_set_),
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSCE::UidCoordSetArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::UidCoordSetArchive, column_entries_),
  PROTOBUF_FIELD_OFFSET(::TSCE::UidCellRefSetArchive_OwnerEntry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::UidCellRefSetArchive_OwnerEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::UidCellRefSetArchive_OwnerEntry, owner_uid_),
  PROTOBUF_FIELD_OFFSET(::TSCE::UidCellRefSetArchive_OwnerEntry, coord_set_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSCE::UidCellRefSetArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::UidCellRefSetArchive, owner_entries_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ReferencesToDirtyArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ReferencesToDirtyArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::ReferencesToDirtyArchive, to_dirty_owner_ids_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ReferencesToDirtyArchive, to_dirty_cells_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ReferencesToDirtyArchive, to_dirty_cells_additional_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ReferencesToDirtyArchive, to_dirty_range_refs_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ReferencesToDirtyArchive, calc_in_progress_cells_),
  0,
  1,
  2,
  ~0u,
  3,
  PROTOBUF_FIELD_OFFSET(::TSCE::CoordMapperArchive_BaseToViewEntry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CoordMapperArchive_BaseToViewEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::CoordMapperArchive_BaseToViewEntry, base_row_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CoordMapperArchive_BaseToViewEntry, view_row_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSCE::CoordMapperArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CoordMapperArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::CoordMapperArchive, summary_and_label_rows_set_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CoordMapperArchive, table_uid_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CoordMapperArchive, base_to_view_map_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSCE::ReferenceArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ReferenceArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::ReferenceArchive, reference_type_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ReferenceArchive, cell_reference_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ReferenceArchive, range_reference_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSCE::EdgeArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::EdgeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::EdgeArchive, column_),
  PROTOBUF_FIELD_OFFSET(::TSCE::EdgeArchive, row_),
  PROTOBUF_FIELD_OFFSET(::TSCE::EdgeArchive, is_precedent_),
  PROTOBUF_FIELD_OFFSET(::TSCE::EdgeArchive, owner_id_),
  1,
  2,
  3,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSCE::EdgesArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::EdgesArchive, packed_edge_without_owner_),
  PROTOBUF_FIELD_OFFSET(::TSCE::EdgesArchive, packed_edge_with_owner_),
  PROTOBUF_FIELD_OFFSET(::TSCE::EdgesArchive, owner_id_for_edge_),
  PROTOBUF_FIELD_OFFSET(::TSCE::EdgesArchive, internal_owner_id_for_edge_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSCE::ExpandedEdgesArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::ExpandedEdgesArchive, edge_without_owner_rows_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ExpandedEdgesArchive, edge_without_owner_columns_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ExpandedEdgesArchive, edge_with_owner_rows_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ExpandedEdgesArchive, edge_with_owner_columns_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ExpandedEdgesArchive, internal_owner_id_for_edge_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellRecordArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellRecordArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::CellRecordArchive, column_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellRecordArchive, row_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellRecordArchive, dirty_self_plus_precedents_count_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellRecordArchive, is_in_a_cycle_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellRecordArchive, edge_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellRecordArchive, contains_a_formula_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellRecordArchive, has_calculated_precedents_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellRecordArchive, calculate_precedents_on_next_recalc_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellRecordArchive, translate_for_excel_import_on_next_recalc_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellRecordArchive, edges_),
  1,
  2,
  3,
  4,
  ~0u,
  8,
  5,
  6,
  7,
  0,
  PROTOBUF_FIELD_OFFSET(::TSCE::CellDependenciesArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellDependenciesArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::CellDependenciesArchive, cell_record_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellDependenciesArchive, num_dirty_cells_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::TSCE::CellRecordExpandedArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellRecordExpandedArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::CellRecordExpandedArchive, column_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellRecordExpandedArchive, row_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellRecordExpandedArchive, dirty_self_plus_precedents_count_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellRecordExpandedArchive, is_in_a_cycle_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellRecordExpandedArchive, has_calculated_precedents_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellRecordExpandedArchive, expanded_edges_),
  1,
  2,
  3,
  4,
  5,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSCE::CellDependenciesExpandedArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::CellDependenciesExpandedArchive, cell_record_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellRecordTileArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellRecordTileArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::CellRecordTileArchive, internal_owner_id_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellRecordTileArchive, tile_column_begin_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellRecordTileArchive, tile_row_begin_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellRecordTileArchive, cell_records_),
  0,
  1,
  2,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSCE::CellDependenciesTiledArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::CellDependenciesTiledArchive, cell_record_tiles_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSCE::VolatileDependenciesArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::VolatileDependenciesArchive, volatile_time_cell_column_),
  PROTOBUF_FIELD_OFFSET(::TSCE::VolatileDependenciesArchive, volatile_time_cell_row_),
  PROTOBUF_FIELD_OFFSET(::TSCE::VolatileDependenciesArchive, volatile_random_cell_column_),
  PROTOBUF_FIELD_OFFSET(::TSCE::VolatileDependenciesArchive, volatile_random_cell_row_),
  PROTOBUF_FIELD_OFFSET(::TSCE::VolatileDependenciesArchive, volatile_locale_cell_column_),
  PROTOBUF_FIELD_OFFSET(::TSCE::VolatileDependenciesArchive, volatile_locale_cell_row_),
  PROTOBUF_FIELD_OFFSET(::TSCE::VolatileDependenciesArchive, volatile_location_cell_column_),
  PROTOBUF_FIELD_OFFSET(::TSCE::VolatileDependenciesArchive, volatile_location_cell_row_),
  PROTOBUF_FIELD_OFFSET(::TSCE::VolatileDependenciesArchive, volatile_compass_cell_column_),
  PROTOBUF_FIELD_OFFSET(::TSCE::VolatileDependenciesArchive, volatile_compass_cell_row_),
  PROTOBUF_FIELD_OFFSET(::TSCE::VolatileDependenciesArchive, volatile_remote_data_cell_column_),
  PROTOBUF_FIELD_OFFSET(::TSCE::VolatileDependenciesArchive, volatile_remote_data_cell_row_),
  PROTOBUF_FIELD_OFFSET(::TSCE::VolatileDependenciesArchive, volatile_sheet_table_name_cell_column_),
  PROTOBUF_FIELD_OFFSET(::TSCE::VolatileDependenciesArchive, volatile_sheet_table_name_cell_row_),
  PROTOBUF_FIELD_OFFSET(::TSCE::VolatileDependenciesArchive, calculated_dependency_cell_column_),
  PROTOBUF_FIELD_OFFSET(::TSCE::VolatileDependenciesArchive, calculated_dependency_cell_row_),
  PROTOBUF_FIELD_OFFSET(::TSCE::VolatileDependenciesArchive, volatile_geometry_cell_reference_),
  PROTOBUF_FIELD_OFFSET(::TSCE::VolatileDependenciesArchive, volatile_geometry_cell_),
  PROTOBUF_FIELD_OFFSET(::TSCE::VolatileDependenciesExpandedArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::VolatileDependenciesExpandedArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::VolatileDependenciesExpandedArchive, volatile_time_cells_),
  PROTOBUF_FIELD_OFFSET(::TSCE::VolatileDependenciesExpandedArchive, volatile_random_cells_),
  PROTOBUF_FIELD_OFFSET(::TSCE::VolatileDependenciesExpandedArchive, volatile_locale_cells_),
  PROTOBUF_FIELD_OFFSET(::TSCE::VolatileDependenciesExpandedArchive, volatile_sheet_table_name_cells_),
  PROTOBUF_FIELD_OFFSET(::TSCE::VolatileDependenciesExpandedArchive, volatile_remote_data_cells_),
  PROTOBUF_FIELD_OFFSET(::TSCE::VolatileDependenciesExpandedArchive, volatile_geometry_cell_refs_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::TSCE::RTreeInternalNodeContentsArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RTreeInternalNodeContentsArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::RTreeInternalNodeContentsArchive, min_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RTreeInternalNodeContentsArchive, max_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RTreeInternalNodeContentsArchive, child_),
  ~0u,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::TSCE::RTreeLeafNodeContentsArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RTreeLeafNodeContentsArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::RTreeLeafNodeContentsArchive, min_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RTreeLeafNodeContentsArchive, max_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RTreeLeafNodeContentsArchive, cell_reference_),
  ~0u,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::TSCE::RTreeNodeArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RTreeNodeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::RTreeNodeArchive, level_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RTreeNodeArchive, count_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RTreeNodeArchive, internal_node_contents_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RTreeNodeArchive, leaf_node_contents_),
  0,
  1,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSCE::RTreeArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RTreeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::RTreeArchive, data_file_id_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RTreeArchive, data_size_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RTreeArchive, data_num_dims_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RTreeArchive, data_elem_size_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RTreeArchive, data_elem_real_size_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RTreeArchive, data_max_nodes_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RTreeArchive, data_min_nodes_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RTreeArchive, root_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  0,
  PROTOBUF_FIELD_OFFSET(::TSCE::RangeBackDependencyArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RangeBackDependencyArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::RangeBackDependencyArchive, cell_coord_row_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RangeBackDependencyArchive, cell_coord_column_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RangeBackDependencyArchive, range_reference_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RangeBackDependencyArchive, internal_range_reference_),
  2,
  3,
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSCE::RangeDependenciesArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::RangeDependenciesArchive, back_dependency_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RangePrecedentsTileArchive_FromToRangeArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RangePrecedentsTileArchive_FromToRangeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::RangePrecedentsTileArchive_FromToRangeArchive, from_coord_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RangePrecedentsTileArchive_FromToRangeArchive, refers_to_rect_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSCE::RangePrecedentsTileArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RangePrecedentsTileArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::RangePrecedentsTileArchive, to_owner_id_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RangePrecedentsTileArchive, from_to_range_),
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSCE::RangeDependenciesTiledArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::RangeDependenciesTiledArchive, range_precedents_tile_),
  PROTOBUF_FIELD_OFFSET(::TSCE::SpanningDependenciesArchive_ReferringColumnToLocalCells, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::SpanningDependenciesArchive_ReferringColumnToLocalCells, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::SpanningDependenciesArchive_ReferringColumnToLocalCells, column_),
  PROTOBUF_FIELD_OFFSET(::TSCE::SpanningDependenciesArchive_ReferringColumnToLocalCells, range_context_),
  PROTOBUF_FIELD_OFFSET(::TSCE::SpanningDependenciesArchive_ReferringColumnToLocalCells, cell_coordinate_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSCE::SpanningDependenciesArchive_ReferringColumnToRemoteCells, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::SpanningDependenciesArchive_ReferringColumnToRemoteCells, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::SpanningDependenciesArchive_ReferringColumnToRemoteCells, column_),
  PROTOBUF_FIELD_OFFSET(::TSCE::SpanningDependenciesArchive_ReferringColumnToRemoteCells, range_context_),
  PROTOBUF_FIELD_OFFSET(::TSCE::SpanningDependenciesArchive_ReferringColumnToRemoteCells, internal_cell_reference_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSCE::SpanningDependenciesArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::SpanningDependenciesArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::SpanningDependenciesArchive, column_),
  PROTOBUF_FIELD_OFFSET(::TSCE::SpanningDependenciesArchive, range_context_),
  PROTOBUF_FIELD_OFFSET(::TSCE::SpanningDependenciesArchive, cell_),
  PROTOBUF_FIELD_OFFSET(::TSCE::SpanningDependenciesArchive, total_range_for_deleted_table_),
  PROTOBUF_FIELD_OFFSET(::TSCE::SpanningDependenciesArchive, body_range_for_deleted_table_),
  PROTOBUF_FIELD_OFFSET(::TSCE::SpanningDependenciesArchive, referring_column_to_local_cells_),
  PROTOBUF_FIELD_OFFSET(::TSCE::SpanningDependenciesArchive, referring_column_to_remote_cells_),
  ~0u,
  ~0u,
  ~0u,
  0,
  1,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSCE::SpanningDependenciesExpandedArchive_ExtentRange, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::SpanningDependenciesExpandedArchive_ExtentRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::SpanningDependenciesExpandedArchive_ExtentRange, extent_begin_),
  PROTOBUF_FIELD_OFFSET(::TSCE::SpanningDependenciesExpandedArchive_ExtentRange, extent_end_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSCE::SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext, owner_id_),
  PROTOBUF_FIELD_OFFSET(::TSCE::SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext, range_context_),
  PROTOBUF_FIELD_OFFSET(::TSCE::SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext, ranges_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSCE::SpanningDependenciesExpandedArchive_CellCoordRefersToExtents, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::SpanningDependenciesExpandedArchive_CellCoordRefersToExtents, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::SpanningDependenciesExpandedArchive_CellCoordRefersToExtents, coordinate_),
  PROTOBUF_FIELD_OFFSET(::TSCE::SpanningDependenciesExpandedArchive_CellCoordRefersToExtents, ranges_by_table_context_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSCE::SpanningDependenciesExpandedArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::SpanningDependenciesExpandedArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::SpanningDependenciesExpandedArchive, coord_refers_to_spans_),
  PROTOBUF_FIELD_OFFSET(::TSCE::SpanningDependenciesExpandedArchive, total_range_for_table_),
  PROTOBUF_FIELD_OFFSET(::TSCE::SpanningDependenciesExpandedArchive, body_range_for_table_),
  ~0u,
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSCE::WholeOwnerDependenciesArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::WholeOwnerDependenciesArchive, dependent_cell_),
  PROTOBUF_FIELD_OFFSET(::TSCE::WholeOwnerDependenciesExpandedArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::WholeOwnerDependenciesExpandedArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::WholeOwnerDependenciesExpandedArchive, dependent_cells_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSCE::CellErrorsArchive_ErrorForCell, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellErrorsArchive_ErrorForCell, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::CellErrorsArchive_ErrorForCell, coordinate_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellErrorsArchive_ErrorForCell, error_flavor_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellErrorsArchive_ErrorForCell, err_due_to_cell_),
  0,
  2,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSCE::CellErrorsArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::CellErrorsArchive, errors_),
  PROTOBUF_FIELD_OFFSET(::TSCE::UuidReferencesArchive_TableRef, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::UuidReferencesArchive_TableRef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::UuidReferencesArchive_TableRef, owner_uuid_),
  PROTOBUF_FIELD_OFFSET(::TSCE::UuidReferencesArchive_TableRef, coord_set_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSCE::UuidReferencesArchive_UuidRef, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::UuidReferencesArchive_UuidRef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::UuidReferencesArchive_UuidRef, uuid_),
  PROTOBUF_FIELD_OFFSET(::TSCE::UuidReferencesArchive_UuidRef, coord_set_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSCE::UuidReferencesArchive_TableWithUuidRef, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::UuidReferencesArchive_TableWithUuidRef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::UuidReferencesArchive_TableWithUuidRef, owner_uuid_),
  PROTOBUF_FIELD_OFFSET(::TSCE::UuidReferencesArchive_TableWithUuidRef, uuid_refs_),
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSCE::UuidReferencesArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::UuidReferencesArchive, table_refs_),
  PROTOBUF_FIELD_OFFSET(::TSCE::UuidReferencesArchive, table_uuid_refs_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaOwnerDependenciesArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaOwnerDependenciesArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaOwnerDependenciesArchive, formula_owner_uid_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaOwnerDependenciesArchive, internal_formula_owner_id_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaOwnerDependenciesArchive, owner_kind_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaOwnerDependenciesArchive, cell_dependencies_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaOwnerDependenciesArchive, range_dependencies_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaOwnerDependenciesArchive, volatile_dependencies_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaOwnerDependenciesArchive, spanning_column_dependencies_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaOwnerDependenciesArchive, spanning_row_dependencies_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaOwnerDependenciesArchive, whole_owner_dependencies_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaOwnerDependenciesArchive, cell_errors_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaOwnerDependenciesArchive, formula_owner_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaOwnerDependenciesArchive, base_owner_uid_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaOwnerDependenciesArchive, tiled_cell_dependencies_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaOwnerDependenciesArchive, uuid_references_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaOwnerDependenciesArchive, tiled_range_dependencies_),
  0,
  13,
  14,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaOwnerInfoArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaOwnerInfoArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaOwnerInfoArchive, formula_owner_id_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaOwnerInfoArchive, cell_dependencies_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaOwnerInfoArchive, range_dependencies_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaOwnerInfoArchive, volatile_dependencies_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaOwnerInfoArchive, spanning_column_dependencies_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaOwnerInfoArchive, spanning_row_dependencies_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaOwnerInfoArchive, whole_owner_dependencies_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaOwnerInfoArchive, cell_errors_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaOwnerInfoArchive, formula_owner_),
  0,
  1,
  2,
  3,
  4,
  5,
  7,
  8,
  6,
  PROTOBUF_FIELD_OFFSET(::TSCE::SubFormulaOwnerIDArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::SubFormulaOwnerIDArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::SubFormulaOwnerIDArchive, base_owner_uid_),
  PROTOBUF_FIELD_OFFSET(::TSCE::SubFormulaOwnerIDArchive, owner_kind_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSCE::OwnerIDMapArchive_OwnerIDMapArchiveEntry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::OwnerIDMapArchive_OwnerIDMapArchiveEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::OwnerIDMapArchive_OwnerIDMapArchiveEntry, internal_owner_id_),
  PROTOBUF_FIELD_OFFSET(::TSCE::OwnerIDMapArchive_OwnerIDMapArchiveEntry, owner_id_),
  PROTOBUF_FIELD_OFFSET(::TSCE::OwnerIDMapArchive_OwnerIDMapArchiveEntry, sub_formula_owner_uid_),
  2,
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSCE::OwnerIDMapArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::OwnerIDMapArchive, map_entry_),
  PROTOBUF_FIELD_OFFSET(::TSCE::OwnerIDMapArchive, unregistered_internal_owner_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSCE::UidLookupListArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::UidLookupListArchive, uuids_),
  PROTOBUF_FIELD_OFFSET(::TSCE::DependencyTrackerArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::DependencyTrackerArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::DependencyTrackerArchive, formula_owner_info_),
  PROTOBUF_FIELD_OFFSET(::TSCE::DependencyTrackerArchive, dirty_leaf_),
  PROTOBUF_FIELD_OFFSET(::TSCE::DependencyTrackerArchive, owner_id_map_),
  PROTOBUF_FIELD_OFFSET(::TSCE::DependencyTrackerArchive, internal_dirty_leaf_),
  PROTOBUF_FIELD_OFFSET(::TSCE::DependencyTrackerArchive, number_of_formulas_),
  PROTOBUF_FIELD_OFFSET(::TSCE::DependencyTrackerArchive, formula_owner_dependencies_),
  ~0u,
  ~0u,
  0,
  ~0u,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSCE::RemoteDataSpecifierArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RemoteDataSpecifierArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::RemoteDataSpecifierArchive, function_index_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RemoteDataSpecifierArchive, symbol_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RemoteDataSpecifierArchive, attribute_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RemoteDataSpecifierArchive, date_),
  1,
  0,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TSCE::RemoteDataValueMapArchive_RemoteDataMapEntry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RemoteDataValueMapArchive_RemoteDataMapEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::RemoteDataValueMapArchive_RemoteDataMapEntry, specifier_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RemoteDataValueMapArchive_RemoteDataMapEntry, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSCE::RemoteDataValueMapArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::RemoteDataValueMapArchive, entry_),
  PROTOBUF_FIELD_OFFSET(::TSCE::StockArchive_AttributeEntry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::StockArchive_AttributeEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::StockArchive_AttributeEntry, attribute_),
  PROTOBUF_FIELD_OFFSET(::TSCE::StockArchive_AttributeEntry, value_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::TSCE::StockArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::StockArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::StockArchive, symbol_),
  PROTOBUF_FIELD_OFFSET(::TSCE::StockArchive, date_),
  PROTOBUF_FIELD_OFFSET(::TSCE::StockArchive, attribute_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSCE::RemoteDataStoreArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RemoteDataStoreArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::RemoteDataStoreArchive, value_map_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RemoteDataStoreArchive, stocks_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSCE::NameTrackedReferencePair, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::NameTrackedReferencePair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::NameTrackedReferencePair, name_),
  PROTOBUF_FIELD_OFFSET(::TSCE::NameTrackedReferencePair, tracked_reference_),
  PROTOBUF_FIELD_OFFSET(::TSCE::NameTrackedReferencePair, tracked_reference_id_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TSCE::NamesByTrackedReferenceArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::NamesByTrackedReferenceArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::NamesByTrackedReferenceArchive, table_id_),
  PROTOBUF_FIELD_OFFSET(::TSCE::NamesByTrackedReferenceArchive, name_tracked_reference_pair_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSCE::NamedReferenceManagerArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::NamedReferenceManagerArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::NamedReferenceManagerArchive, reference_tracker_),
  PROTOBUF_FIELD_OFFSET(::TSCE::NamedReferenceManagerArchive, names_by_tracked_reference_by_table_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSCE::UuidSetStoreArchive_UuidSet, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::UuidSetStoreArchive_UuidSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::UuidSetStoreArchive_UuidSet, uuid_),
  PROTOBUF_FIELD_OFFSET(::TSCE::UuidSetStoreArchive_UuidSet, index_of_set_),
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSCE::UuidSetStoreArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::UuidSetStoreArchive, uuidset_),
  PROTOBUF_FIELD_OFFSET(::TSCE::UuidReferenceMapArchive_CellRefsForUuid, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::UuidReferenceMapArchive_CellRefsForUuid, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::UuidReferenceMapArchive_CellRefsForUuid, uuid_),
  PROTOBUF_FIELD_OFFSET(::TSCE::UuidReferenceMapArchive_CellRefsForUuid, cell_ref_),
  PROTOBUF_FIELD_OFFSET(::TSCE::UuidReferenceMapArchive_CellRefsForUuid, cell_refs_),
  0,
  ~0u,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSCE::UuidReferenceMapArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::UuidReferenceMapArchive, cell_refs_for_uuid_),
  PROTOBUF_FIELD_OFFSET(::TSCE::GroupByNodeMapArchive_CellRefsForGroupNode, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::GroupByNodeMapArchive_CellRefsForGroupNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::GroupByNodeMapArchive_CellRefsForGroupNode, group_node_uid_),
  PROTOBUF_FIELD_OFFSET(::TSCE::GroupByNodeMapArchive_CellRefsForGroupNode, cell_refs_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSCE::GroupByNodeMapArchive_GroupNodesForGroupBy, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::GroupByNodeMapArchive_GroupNodesForGroupBy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::GroupByNodeMapArchive_GroupNodesForGroupBy, group_by_uid_),
  PROTOBUF_FIELD_OFFSET(::TSCE::GroupByNodeMapArchive_GroupNodesForGroupBy, refs_for_group_node_),
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSCE::GroupByNodeMapArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::GroupByNodeMapArchive, refs_for_group_by_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CalculationEngineArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CalculationEngineArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::CalculationEngineArchive, base_date_1904_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CalculationEngineArchive, dependency_tracker_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CalculationEngineArchive, named_reference_manager_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CalculationEngineArchive, excel_import_date_mode_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CalculationEngineArchive, saved_locale_identifier_for_4_2_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CalculationEngineArchive, document_random_seed_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CalculationEngineArchive, uuid_reference_map_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CalculationEngineArchive, document_timestamp_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CalculationEngineArchive, document_timezone_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CalculationEngineArchive, table_uid_history_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CalculationEngineArchive, remote_data_store_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CalculationEngineArchive, group_node_map_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CalculationEngineArchive, header_name_manager_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CalculationEngineArchive, refs_to_dirty_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CalculationEngineArchive, saved_locale_identifier_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CalculationEngineArchive, begin_tracking_names_legacy_nrm_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CalculationEngineArchive, end_tracking_names_legacy_nrm_),
  13,
  3,
  4,
  14,
  0,
  11,
  5,
  12,
  1,
  6,
  7,
  8,
  9,
  10,
  2,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSCE::PreserveColumnRowFlagsArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::PreserveColumnRowFlagsArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::PreserveColumnRowFlagsArchive, begin_row_is_absolute_),
  PROTOBUF_FIELD_OFFSET(::TSCE::PreserveColumnRowFlagsArchive, begin_column_is_absolute_),
  PROTOBUF_FIELD_OFFSET(::TSCE::PreserveColumnRowFlagsArchive, end_row_is_absolute_),
  PROTOBUF_FIELD_OFFSET(::TSCE::PreserveColumnRowFlagsArchive, end_column_is_absolute_),
  0,
  1,
  2,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSCE::CategoryReferenceArchive_CatRefUidList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::CategoryReferenceArchive_CatRefUidList, uid_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CategoryReferenceArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CategoryReferenceArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::CategoryReferenceArchive, group_by_uid_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CategoryReferenceArchive, column_uid_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CategoryReferenceArchive, aggregate_type_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CategoryReferenceArchive, group_level_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CategoryReferenceArchive, group_uids_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CategoryReferenceArchive, preserve_flags_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CategoryReferenceArchive, relative_column_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CategoryReferenceArchive, relative_group_uid_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CategoryReferenceArchive, absolute_group_uid_),
  0,
  1,
  6,
  7,
  2,
  3,
  8,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive, row_handle_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive, column_handle_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive, row_is_sticky_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive, column_is_sticky_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive, row_handle_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive, column_handle_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive, row_is_sticky_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive, column_is_sticky_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive, table_id_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive, ast_reference_whitespace_after_sheet_name_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive, ast_reference_whitespace_before_table_name_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive, ast_reference_whitespace_after_table_name_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive, ast_reference_whitespace_before_cell_address_),
  5,
  6,
  7,
  8,
  4,
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTColumnCoordinateArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTColumnCoordinateArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTColumnCoordinateArchive, column_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTColumnCoordinateArchive, absolute_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTRowCoordinateArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTRowCoordinateArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTRowCoordinateArchive, row_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTRowCoordinateArchive, absolute_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTUidList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTUidList, uid_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTUidTract, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTUidTract, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTUidTract, columnuids_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTUidTract, rowuids_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTUidTract, is_range_ref_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTUidTract, purpose_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTUidTract, preserve_rectangular_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTStickyBits, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTStickyBits, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTStickyBits, begin_row_is_absolute_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTStickyBits, begin_column_is_absolute_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTStickyBits, end_row_is_absolute_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTStickyBits, end_column_is_absolute_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTUidTractList, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTUidTractList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTUidTractList, tract_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTUidTractList, sticky_bits_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTUidCoordinateArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTUidCoordinateArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTUidCoordinateArchive, column_uid_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTUidCoordinateArchive, row_uid_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTUidCoordinateArchive, column_absolute_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTUidCoordinateArchive, row_absolute_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTCategoryReferenceArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTCategoryReferenceArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTCategoryReferenceArchive, category_ref_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive, range_begin_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive, range_end_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive, range_begin_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive, range_end_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTColonTractArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTColonTractArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTColonTractArchive, relative_column_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTColonTractArchive, relative_row_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTColonTractArchive, absolute_column_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTColonTractArchive, absolute_row_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTColonTractArchive, preserve_rectangular_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive, table_id_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive, ast_reference_whitespace_after_sheet_name_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive, ast_reference_whitespace_before_table_name_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive, ast_reference_whitespace_after_table_name_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive, ast_reference_whitespace_before_cell_address_),
  4,
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTLetNodeWhitespace, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTLetNodeWhitespace, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTLetNodeWhitespace, ast_let_whitespace_after_let_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTLetNodeWhitespace, ast_let_whitespace_after_identifier_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTLetNodeWhitespace, ast_let_whitespace_after_equals_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTLetNodeWhitespace, ast_let_whitespace_after_delimiter_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, ast_node_type_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, ast_function_node_index_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, ast_function_node_numargs_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, ast_number_node_number_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, ast_boolean_node_boolean_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, ast_string_node_string_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, ast_date_node_datenum_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, ast_date_node_suppress_date_format_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, ast_date_node_suppress_time_format_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, ast_date_node_date_time_format_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, ast_duration_node_unitnum_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, ast_duration_node_unit_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, ast_duration_node_style_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, ast_duration_node_duration_unit_largest_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, ast_duration_node_duration_unit_smallest_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, ast_duration_node_use_automatic_units_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, ast_token_node_boolean_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, ast_array_node_numcol_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, ast_array_node_numrow_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, ast_list_node_numargs_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, ast_thunk_node_array_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, ast_local_cell_reference_node_reference_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, ast_cross_table_cell_reference_node_reference_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, ast_unknown_function_node_string_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, ast_unknown_function_node_numargs_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, ast_whitespace_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, ast_column_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, ast_row_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, ast_cross_table_reference_extra_info_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, ast_uid_coordinate_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, ast_sticky_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, ast_frozen_sticky_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, ast_let_identifier_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, ast_let_e2_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, ast_let_whitespace_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, ast_symbol_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, ast_tract_list_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, ast_category_ref_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, ast_colon_tract_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, ast_number_node_decimal_low_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, ast_number_node_decimal_high_),
  40,
  19,
  20,
  21,
  30,
  0,
  22,
  31,
  32,
  2,
  23,
  24,
  34,
  35,
  36,
  33,
  25,
  26,
  27,
  28,
  5,
  6,
  7,
  1,
  29,
  3,
  8,
  9,
  10,
  11,
  12,
  18,
  4,
  13,
  14,
  38,
  15,
  16,
  17,
  37,
  39,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive, ast_node_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaTranslationFlagsArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaTranslationFlagsArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaTranslationFlagsArchive, excel_import_translation_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaTranslationFlagsArchive, number_to_date_coercion_removal_translation_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaTranslationFlagsArchive, contains_uid_form_references_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaTranslationFlagsArchive, contains_frozen_references_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaArchive, ast_node_array_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaArchive, host_column_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaArchive, host_row_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaArchive, host_column_is_negative_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaArchive, host_row_is_negative_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaArchive, translation_flags_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaArchive, host_table_uid_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaArchive, host_column_uid_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaArchive, host_row_uid_),
  0,
  5,
  6,
  7,
  8,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::TSCE::FunctorArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FunctorArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::FunctorArchive, formula_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FunctorArchive, num_args_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSCE::FormatStructArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormatStructArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::FormatStructArchive, format_type_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormatStructArchive, decimal_places_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormatStructArchive, currency_code_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormatStructArchive, negative_style_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormatStructArchive, show_thousands_separator_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormatStructArchive, use_accounting_style_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormatStructArchive, duration_style_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormatStructArchive, base_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormatStructArchive, base_places_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormatStructArchive, base_use_minus_sign_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormatStructArchive, fraction_accuracy_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormatStructArchive, suppress_date_format_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormatStructArchive, suppress_time_format_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormatStructArchive, date_time_format_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormatStructArchive, duration_unit_largest_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormatStructArchive, duration_unit_smallest_),
  2,
  3,
  0,
  4,
  7,
  8,
  5,
  6,
  11,
  9,
  12,
  10,
  13,
  1,
  14,
  15,
  PROTOBUF_FIELD_OFFSET(::TSCE::RangeCoordinateArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RangeCoordinateArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::RangeCoordinateArchive, top_left_column_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RangeCoordinateArchive, top_left_row_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RangeCoordinateArchive, bottom_right_column_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RangeCoordinateArchive, bottom_right_row_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TSCE::TableTransposeInfoArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::TableTransposeInfoArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::TableTransposeInfoArchive, number_of_footer_rows_),
  PROTOBUF_FIELD_OFFSET(::TSCE::TableTransposeInfoArchive, body_range_for_transposed_table_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSCE::MergeOriginMovedArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::MergeOriginMovedArchive, src_column_),
  PROTOBUF_FIELD_OFFSET(::TSCE::MergeOriginMovedArchive, src_row_),
  PROTOBUF_FIELD_OFFSET(::TSCE::MergeOriginMovedArchive, dst_column_),
  PROTOBUF_FIELD_OFFSET(::TSCE::MergeOriginMovedArchive, dst_row_),
  PROTOBUF_FIELD_OFFSET(::TSCE::OwnerUIDMapperArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::OwnerUIDMapperArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::OwnerUIDMapperArchive, table_uid_),
  PROTOBUF_FIELD_OFFSET(::TSCE::OwnerUIDMapperArchive, next_table_uid_),
  PROTOBUF_FIELD_OFFSET(::TSCE::OwnerUIDMapperArchive, hidden_state_for_rows_owner_uid_),
  PROTOBUF_FIELD_OFFSET(::TSCE::OwnerUIDMapperArchive, next_hidden_state_for_rows_owner_uid_),
  PROTOBUF_FIELD_OFFSET(::TSCE::OwnerUIDMapperArchive, hidden_state_for_columns_owner_uid_),
  PROTOBUF_FIELD_OFFSET(::TSCE::OwnerUIDMapperArchive, next_hidden_state_for_columns_owner_uid_),
  PROTOBUF_FIELD_OFFSET(::TSCE::OwnerUIDMapperArchive, conditional_style_owner_uid_),
  PROTOBUF_FIELD_OFFSET(::TSCE::OwnerUIDMapperArchive, next_conditional_style_owner_uid_),
  PROTOBUF_FIELD_OFFSET(::TSCE::OwnerUIDMapperArchive, sort_rule_reference_tracker_owner_uid_),
  PROTOBUF_FIELD_OFFSET(::TSCE::OwnerUIDMapperArchive, next_sort_rule_reference_tracker_owner_uid_),
  PROTOBUF_FIELD_OFFSET(::TSCE::OwnerUIDMapperArchive, merge_owner_uid_),
  PROTOBUF_FIELD_OFFSET(::TSCE::OwnerUIDMapperArchive, next_merge_owner_uid_),
  PROTOBUF_FIELD_OFFSET(::TSCE::OwnerUIDMapperArchive, category_owner_uid_),
  PROTOBUF_FIELD_OFFSET(::TSCE::OwnerUIDMapperArchive, next_category_owner_uid_),
  PROTOBUF_FIELD_OFFSET(::TSCE::OwnerUIDMapperArchive, category_aggregates_owner_uid_),
  PROTOBUF_FIELD_OFFSET(::TSCE::OwnerUIDMapperArchive, next_category_aggregates_owner_uid_),
  PROTOBUF_FIELD_OFFSET(::TSCE::OwnerUIDMapperArchive, group_by_uid_),
  PROTOBUF_FIELD_OFFSET(::TSCE::OwnerUIDMapperArchive, next_group_by_uid_),
  PROTOBUF_FIELD_OFFSET(::TSCE::OwnerUIDMapperArchive, pencil_annotation_owner_uid_),
  PROTOBUF_FIELD_OFFSET(::TSCE::OwnerUIDMapperArchive, next_pencil_annotation_owner_uid_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  PROTOBUF_FIELD_OFFSET(::TSCE::RewriteTableUIDInfoArchive_TableUIDMapEntryArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RewriteTableUIDInfoArchive_TableUIDMapEntryArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::RewriteTableUIDInfoArchive_TableUIDMapEntryArchive, prev_table_uid_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RewriteTableUIDInfoArchive_TableUIDMapEntryArchive, new_table_uid_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSCE::RewriteTableUIDInfoArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::RewriteTableUIDInfoArchive, table_uid_map_),
  PROTOBUF_FIELD_OFFSET(::TSCE::GroupByChangeArchive_GroupingColumnChangeArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::GroupByChangeArchive_GroupingColumnChangeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::GroupByChangeArchive_GroupingColumnChangeArchive, old_level_),
  PROTOBUF_FIELD_OFFSET(::TSCE::GroupByChangeArchive_GroupingColumnChangeArchive, new_level_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSCE::GroupByChangeArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::GroupByChangeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::GroupByChangeArchive, change_type_),
  PROTOBUF_FIELD_OFFSET(::TSCE::GroupByChangeArchive, group_by_uid_),
  PROTOBUF_FIELD_OFFSET(::TSCE::GroupByChangeArchive, previous_level_),
  PROTOBUF_FIELD_OFFSET(::TSCE::GroupByChangeArchive, updated_level_),
  PROTOBUF_FIELD_OFFSET(::TSCE::GroupByChangeArchive, previous_to_updated_map_),
  PROTOBUF_FIELD_OFFSET(::TSCE::GroupByChangeArchive, updated_to_previous_map_),
  PROTOBUF_FIELD_OFFSET(::TSCE::GroupByChangeArchive, removed_group_uids_),
  PROTOBUF_FIELD_OFFSET(::TSCE::GroupByChangeArchive, grouping_column_changes_),
  3,
  0,
  4,
  5,
  1,
  2,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSCE::RewriteGroupNodeUIDInfoArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RewriteGroupNodeUIDInfoArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::RewriteGroupNodeUIDInfoArchive, group_by_uid_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RewriteGroupNodeUIDInfoArchive, group_node_uid_map_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSCE::IndexedUidsArchive_IndexedUid, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::IndexedUidsArchive_IndexedUid, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::IndexedUidsArchive_IndexedUid, uid_for_index_),
  PROTOBUF_FIELD_OFFSET(::TSCE::IndexedUidsArchive_IndexedUid, index_for_uid_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSCE::IndexedUidsArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::IndexedUidsArchive, uids_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RewriteRangeEntryArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RewriteRangeEntryArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::RewriteRangeEntryArchive, range_location_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RewriteRangeEntryArchive, range_length_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RewriteRangeEntryArchive, range_uids_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RewriteRangeEntryArchive, offset_),
  0,
  1,
  ~0u,
  2,
  PROTOBUF_FIELD_OFFSET(::TSCE::ColumnOrRowUuidsInfoArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ColumnOrRowUuidsInfoArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::ColumnOrRowUuidsInfoArchive, is_rows_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ColumnOrRowUuidsInfoArchive, table_uid_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ColumnOrRowUuidsInfoArchive, cond_style_owner_uid_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ColumnOrRowUuidsInfoArchive, group_by_uid_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ColumnOrRowUuidsInfoArchive, uids_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ColumnOrRowUuidsInfoArchive, range_entries_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ColumnOrRowUuidsInfoArchive, table_range_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ColumnOrRowUuidsInfoArchive, insert_at_uid_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ColumnOrRowUuidsInfoArchive, insert_opposite_uid_),
  7,
  0,
  1,
  2,
  3,
  ~0u,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::TSCE::RegionInfoArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RegionInfoArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::RegionInfoArchive, table_uid_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RegionInfoArchive, column_uids_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RegionInfoArchive, row_uids_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TSCE::RegionMovedInfoArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RegionMovedInfoArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::RegionMovedInfoArchive, src_region_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RegionMovedInfoArchive, dst_region_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RegionMovedInfoArchive, span_rows_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RegionMovedInfoArchive, span_columns_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RegionMovedInfoArchive, original_src_region_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RegionMovedInfoArchive, final_dest_table_uid_),
  0,
  1,
  4,
  5,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TSCE::MergeSourceArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::MergeSourceArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::MergeSourceArchive, coord_column_),
  PROTOBUF_FIELD_OFFSET(::TSCE::MergeSourceArchive, coord_row_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaRewriteSpecArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaRewriteSpecArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaRewriteSpecArchive, rewrite_type_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaRewriteSpecArchive, table_uid_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaRewriteSpecArchive, cond_style_owner_uid_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaRewriteSpecArchive, group_by_uid_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaRewriteSpecArchive, column_or_row_uuids_info_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaRewriteSpecArchive, aux_column_or_row_uuids_info_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaRewriteSpecArchive, region_moved_info_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaRewriteSpecArchive, region_info_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaRewriteSpecArchive, rewrite_table_id_info_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaRewriteSpecArchive, transposed_table_info_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaRewriteSpecArchive, merge_origin_moved_info_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaRewriteSpecArchive, merge_source_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaRewriteSpecArchive, group_node_info_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaRewriteSpecArchive, groupby_change_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaRewriteSpecArchive, is_inverse_),
  14,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  PROTOBUF_FIELD_OFFSET(::TSCE::HauntedOwnerArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::HauntedOwnerArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::HauntedOwnerArchive, owner_uid_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSCE::CellCoordinateArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellCoordinateArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::CellCoordinateArchive, packeddata_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellCoordinateArchive, column_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellCoordinateArchive, row_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSCE::CellCoordinateVectorArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::CellCoordinateVectorArchive, cell_coord_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ExpandedCellRefObjectPairArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ExpandedCellRefObjectPairArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::ExpandedCellRefObjectPairArchive, cell_ref_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ExpandedCellRefObjectPairArchive, object_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSCE::ExpandedCellRefObjectMapArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::ExpandedCellRefObjectMapArchive, cell_ref_object_pair_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaAtCoordArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaAtCoordArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaAtCoordArchive, column_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaAtCoordArchive, row_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaAtCoordArchive, formula_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaAtCoordArchive, repeat_previous_formula_),
  1,
  2,
  0,
  3,
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaCoordPairsByOwnerArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaCoordPairsByOwnerArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaCoordPairsByOwnerArchive, owner_kind_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaCoordPairsByOwnerArchive, owner_uid_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaCoordPairsByOwnerArchive, formula_at_coords_),
  1,
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulasForUndoArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulasForUndoArchive, formulas_for_owner_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaRewriteCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaRewriteCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaRewriteCommandArchive, table_rewrite_command_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaRewriteCommandArchive, super_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSCE::ExtendTableIDHistoryCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ExtendTableIDHistoryCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::ExtendTableIDHistoryCommandArchive, super_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ExtendTableIDHistoryCommandArchive, rewrite_spec_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ExtendTableIDHistoryCommandArchive, table_uid_history_rollback_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TSCE::NumberTrackedReferencePairArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::NumberTrackedReferencePairArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::NumberTrackedReferencePairArchive, number_),
  PROTOBUF_FIELD_OFFSET(::TSCE::NumberTrackedReferencePairArchive, tracked_reference_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSCE::NumberToTrackedReferenceMapArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::NumberToTrackedReferenceMapArchive, number_tracked_reference_pair_),
  PROTOBUF_FIELD_OFFSET(::TSCE::TrackedReferencesRewriteCommandArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::TrackedReferencesRewriteCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::TrackedReferencesRewriteCommandArchive, references_in_reference_tracker_),
  PROTOBUF_FIELD_OFFSET(::TSCE::TrackedReferencesRewriteCommandArchive, original_tracked_reference_copies_),
  PROTOBUF_FIELD_OFFSET(::TSCE::TrackedReferencesRewriteCommandArchive, rewrite_spec_),
  PROTOBUF_FIELD_OFFSET(::TSCE::TrackedReferencesRewriteCommandArchive, super_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TSCE::TrackedReferenceArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::TrackedReferenceArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::TrackedReferenceArchive, ast_),
  PROTOBUF_FIELD_OFFSET(::TSCE::TrackedReferenceArchive, formula_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSCE::ExpandedTrackedReferenceArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ExpandedTrackedReferenceArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::ExpandedTrackedReferenceArchive, ast_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ExpandedTrackedReferenceArchive, formula_column_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ExpandedTrackedReferenceArchive, formula_row_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TSCE::ReferenceTrackerArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ReferenceTrackerArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::ReferenceTrackerArchive, uuid_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ReferenceTrackerArchive, tracked_reference_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ReferenceTrackerArchive, contained_tracked_reference_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ReferenceTrackerArchive, contained_expanded_tracked_reference_),
  0,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSCE::BooleanCellValueArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::BooleanCellValueArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::BooleanCellValueArchive, value_),
  PROTOBUF_FIELD_OFFSET(::TSCE::BooleanCellValueArchive, format_),
  PROTOBUF_FIELD_OFFSET(::TSCE::BooleanCellValueArchive, format_is_explicit_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::TSCE::DateCellValueArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::DateCellValueArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::DateCellValueArchive, value_),
  PROTOBUF_FIELD_OFFSET(::TSCE::DateCellValueArchive, format_),
  PROTOBUF_FIELD_OFFSET(::TSCE::DateCellValueArchive, format_is_implicit_),
  PROTOBUF_FIELD_OFFSET(::TSCE::DateCellValueArchive, format_is_explicit_),
  1,
  0,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TSCE::NumberCellValueArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::NumberCellValueArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::NumberCellValueArchive, value_),
  PROTOBUF_FIELD_OFFSET(::TSCE::NumberCellValueArchive, unit_index_),
  PROTOBUF_FIELD_OFFSET(::TSCE::NumberCellValueArchive, currency_code_),
  PROTOBUF_FIELD_OFFSET(::TSCE::NumberCellValueArchive, format_),
  PROTOBUF_FIELD_OFFSET(::TSCE::NumberCellValueArchive, format_is_implicit_),
  PROTOBUF_FIELD_OFFSET(::TSCE::NumberCellValueArchive, format_is_explicit_),
  PROTOBUF_FIELD_OFFSET(::TSCE::NumberCellValueArchive, decimal_low_),
  PROTOBUF_FIELD_OFFSET(::TSCE::NumberCellValueArchive, decimal_high_),
  2,
  3,
  0,
  1,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::TSCE::StringCellValueArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::StringCellValueArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::StringCellValueArchive, value_),
  PROTOBUF_FIELD_OFFSET(::TSCE::StringCellValueArchive, format_),
  PROTOBUF_FIELD_OFFSET(::TSCE::StringCellValueArchive, format_is_implicit_),
  PROTOBUF_FIELD_OFFSET(::TSCE::StringCellValueArchive, format_is_explicit_),
  PROTOBUF_FIELD_OFFSET(::TSCE::StringCellValueArchive, is_regex_),
  PROTOBUF_FIELD_OFFSET(::TSCE::StringCellValueArchive, is_case_sensitive_regex_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::TSCE::ErrorCellValueArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ErrorCellValueArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::ErrorCellValueArchive, error_type_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ErrorCellValueArchive, extra_info_int_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ErrorCellValueArchive, extra_info_string_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ErrorCellValueArchive, extra_info_double_),
  3,
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSCE::CellValueArchive, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellValueArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TSCE::CellValueArchive, cell_value_type_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellValueArchive, boolean_value_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellValueArchive, date_value_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellValueArchive, number_value_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellValueArchive, string_value_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellValueArchive, error_value_),
  5,
  0,
  1,
  2,
  3,
  4,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::TSCE::CellReferenceArchive)},
  { 11, 18, sizeof(::TSCE::InternalCellReferenceArchive)},
  { 20, 30, sizeof(::TSCE::RangeReferenceArchive)},
  { 35, 42, sizeof(::TSCE::InternalRangeReferenceArchive)},
  { 44, 51, sizeof(::TSCE::IndexSetArchive_IndexSetEntry)},
  { 53, -1, sizeof(::TSCE::IndexSetArchive)},
  { 59, 66, sizeof(::TSCE::CellCoordSetArchive_ColumnEntry)},
  { 68, -1, sizeof(::TSCE::CellCoordSetArchive)},
  { 74, 81, sizeof(::TSCE::InternalCellRefSetArchive_OwnerEntry)},
  { 83, -1, sizeof(::TSCE::InternalCellRefSetArchive)},
  { 89, 96, sizeof(::TSCE::ColumnRowSize)},
  { 98, 105, sizeof(::TSCE::CellRectArchive)},
  { 107, 114, sizeof(::TSCE::CellRefSetArchive_OwnerEntry)},
  { 116, -1, sizeof(::TSCE::CellRefSetArchive)},
  { 122, 129, sizeof(::TSCE::UidCoordSetArchive_ColumnEntry)},
  { 131, -1, sizeof(::TSCE::UidCoordSetArchive)},
  { 137, 144, sizeof(::TSCE::UidCellRefSetArchive_OwnerEntry)},
  { 146, -1, sizeof(::TSCE::UidCellRefSetArchive)},
  { 152, 162, sizeof(::TSCE::ReferencesToDirtyArchive)},
  { 167, 174, sizeof(::TSCE::CoordMapperArchive_BaseToViewEntry)},
  { 176, 184, sizeof(::TSCE::CoordMapperArchive)},
  { 187, 195, sizeof(::TSCE::ReferenceArchive)},
  { 198, 207, sizeof(::TSCE::EdgeArchive)},
  { 211, -1, sizeof(::TSCE::EdgesArchive)},
  { 220, -1, sizeof(::TSCE::ExpandedEdgesArchive)},
  { 230, 245, sizeof(::TSCE::CellRecordArchive)},
  { 255, 262, sizeof(::TSCE::CellDependenciesArchive)},
  { 264, 275, sizeof(::TSCE::CellRecordExpandedArchive)},
  { 281, -1, sizeof(::TSCE::CellDependenciesExpandedArchive)},
  { 287, 296, sizeof(::TSCE::CellRecordTileArchive)},
  { 300, -1, sizeof(::TSCE::CellDependenciesTiledArchive)},
  { 306, -1, sizeof(::TSCE::VolatileDependenciesArchive)},
  { 329, 340, sizeof(::TSCE::VolatileDependenciesExpandedArchive)},
  { 346, 354, sizeof(::TSCE::RTreeInternalNodeContentsArchive)},
  { 357, 365, sizeof(::TSCE::RTreeLeafNodeContentsArchive)},
  { 368, 377, sizeof(::TSCE::RTreeNodeArchive)},
  { 381, 394, sizeof(::TSCE::RTreeArchive)},
  { 402, 411, sizeof(::TSCE::RangeBackDependencyArchive)},
  { 415, -1, sizeof(::TSCE::RangeDependenciesArchive)},
  { 421, 428, sizeof(::TSCE::RangePrecedentsTileArchive_FromToRangeArchive)},
  { 430, 437, sizeof(::TSCE::RangePrecedentsTileArchive)},
  { 439, -1, sizeof(::TSCE::RangeDependenciesTiledArchive)},
  { 445, 453, sizeof(::TSCE::SpanningDependenciesArchive_ReferringColumnToLocalCells)},
  { 456, 464, sizeof(::TSCE::SpanningDependenciesArchive_ReferringColumnToRemoteCells)},
  { 467, 479, sizeof(::TSCE::SpanningDependenciesArchive)},
  { 486, 493, sizeof(::TSCE::SpanningDependenciesExpandedArchive_ExtentRange)},
  { 495, 503, sizeof(::TSCE::SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext)},
  { 506, 513, sizeof(::TSCE::SpanningDependenciesExpandedArchive_CellCoordRefersToExtents)},
  { 515, 523, sizeof(::TSCE::SpanningDependenciesExpandedArchive)},
  { 526, -1, sizeof(::TSCE::WholeOwnerDependenciesArchive)},
  { 532, 538, sizeof(::TSCE::WholeOwnerDependenciesExpandedArchive)},
  { 539, 547, sizeof(::TSCE::CellErrorsArchive_ErrorForCell)},
  { 550, -1, sizeof(::TSCE::CellErrorsArchive)},
  { 556, 563, sizeof(::TSCE::UuidReferencesArchive_TableRef)},
  { 565, 572, sizeof(::TSCE::UuidReferencesArchive_UuidRef)},
  { 574, 581, sizeof(::TSCE::UuidReferencesArchive_TableWithUuidRef)},
  { 583, -1, sizeof(::TSCE::UuidReferencesArchive)},
  { 590, 610, sizeof(::TSCE::FormulaOwnerDependenciesArchive)},
  { 625, 639, sizeof(::TSCE::FormulaOwnerInfoArchive)},
  { 648, 655, sizeof(::TSCE::SubFormulaOwnerIDArchive)},
  { 657, 665, sizeof(::TSCE::OwnerIDMapArchive_OwnerIDMapArchiveEntry)},
  { 668, -1, sizeof(::TSCE::OwnerIDMapArchive)},
  { 675, -1, sizeof(::TSCE::UidLookupListArchive)},
  { 681, 692, sizeof(::TSCE::DependencyTrackerArchive)},
  { 698, 707, sizeof(::TSCE::RemoteDataSpecifierArchive)},
  { 711, 718, sizeof(::TSCE::RemoteDataValueMapArchive_RemoteDataMapEntry)},
  { 720, -1, sizeof(::TSCE::RemoteDataValueMapArchive)},
  { 726, 733, sizeof(::TSCE::StockArchive_AttributeEntry)},
  { 735, 743, sizeof(::TSCE::StockArchive)},
  { 746, 753, sizeof(::TSCE::RemoteDataStoreArchive)},
  { 755, 763, sizeof(::TSCE::NameTrackedReferencePair)},
  { 766, 773, sizeof(::TSCE::NamesByTrackedReferenceArchive)},
  { 775, 782, sizeof(::TSCE::NamedReferenceManagerArchive)},
  { 784, 791, sizeof(::TSCE::UuidSetStoreArchive_UuidSet)},
  { 793, -1, sizeof(::TSCE::UuidSetStoreArchive)},
  { 799, 807, sizeof(::TSCE::UuidReferenceMapArchive_CellRefsForUuid)},
  { 810, -1, sizeof(::TSCE::UuidReferenceMapArchive)},
  { 816, 823, sizeof(::TSCE::GroupByNodeMapArchive_CellRefsForGroupNode)},
  { 825, 832, sizeof(::TSCE::GroupByNodeMapArchive_GroupNodesForGroupBy)},
  { 834, -1, sizeof(::TSCE::GroupByNodeMapArchive)},
  { 840, 862, sizeof(::TSCE::CalculationEngineArchive)},
  { 879, 888, sizeof(::TSCE::PreserveColumnRowFlagsArchive)},
  { 892, -1, sizeof(::TSCE::CategoryReferenceArchive_CatRefUidList)},
  { 898, 912, sizeof(::TSCE::CategoryReferenceArchive)},
  { 921, 930, sizeof(::TSCE::ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive)},
  { 934, 948, sizeof(::TSCE::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive)},
  { 957, 964, sizeof(::TSCE::ASTNodeArrayArchive_ASTColumnCoordinateArchive)},
  { 966, 973, sizeof(::TSCE::ASTNodeArrayArchive_ASTRowCoordinateArchive)},
  { 975, -1, sizeof(::TSCE::ASTNodeArrayArchive_ASTUidList)},
  { 981, 991, sizeof(::TSCE::ASTNodeArrayArchive_ASTUidTract)},
  { 996, 1005, sizeof(::TSCE::ASTNodeArrayArchive_ASTStickyBits)},
  { 1009, 1016, sizeof(::TSCE::ASTNodeArrayArchive_ASTUidTractList)},
  { 1018, 1027, sizeof(::TSCE::ASTNodeArrayArchive_ASTUidCoordinateArchive)},
  { 1031, 1037, sizeof(::TSCE::ASTNodeArrayArchive_ASTCategoryReferenceArchive)},
  { 1038, 1045, sizeof(::TSCE::ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive)},
  { 1047, 1054, sizeof(::TSCE::ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive)},
  { 1056, 1066, sizeof(::TSCE::ASTNodeArrayArchive_ASTColonTractArchive)},
  { 1071, 1081, sizeof(::TSCE::ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive)},
  { 1086, 1095, sizeof(::TSCE::ASTNodeArrayArchive_ASTLetNodeWhitespace)},
  { 1099, 1145, sizeof(::TSCE::ASTNodeArrayArchive_ASTNodeArchive)},
  { 1186, -1, sizeof(::TSCE::ASTNodeArrayArchive)},
  { 1192, 1201, sizeof(::TSCE::FormulaTranslationFlagsArchive)},
  { 1205, 1219, sizeof(::TSCE::FormulaArchive)},
  { 1228, 1235, sizeof(::TSCE::FunctorArchive)},
  { 1237, 1258, sizeof(::TSCE::FormatStructArchive)},
  { 1274, 1283, sizeof(::TSCE::RangeCoordinateArchive)},
  { 1287, 1294, sizeof(::TSCE::TableTransposeInfoArchive)},
  { 1296, -1, sizeof(::TSCE::MergeOriginMovedArchive)},
  { 1305, 1330, sizeof(::TSCE::OwnerUIDMapperArchive)},
  { 1350, 1357, sizeof(::TSCE::RewriteTableUIDInfoArchive_TableUIDMapEntryArchive)},
  { 1359, -1, sizeof(::TSCE::RewriteTableUIDInfoArchive)},
  { 1365, 1372, sizeof(::TSCE::GroupByChangeArchive_GroupingColumnChangeArchive)},
  { 1374, 1387, sizeof(::TSCE::GroupByChangeArchive)},
  { 1395, 1402, sizeof(::TSCE::RewriteGroupNodeUIDInfoArchive)},
  { 1404, 1411, sizeof(::TSCE::IndexedUidsArchive_IndexedUid)},
  { 1413, -1, sizeof(::TSCE::IndexedUidsArchive)},
  { 1419, 1428, sizeof(::TSCE::RewriteRangeEntryArchive)},
  { 1432, 1446, sizeof(::TSCE::ColumnOrRowUuidsInfoArchive)},
  { 1455, 1463, sizeof(::TSCE::RegionInfoArchive)},
  { 1466, 1477, sizeof(::TSCE::RegionMovedInfoArchive)},
  { 1483, 1490, sizeof(::TSCE::MergeSourceArchive)},
  { 1492, 1512, sizeof(::TSCE::FormulaRewriteSpecArchive)},
  { 1527, 1533, sizeof(::TSCE::HauntedOwnerArchive)},
  { 1534, 1542, sizeof(::TSCE::CellCoordinateArchive)},
  { 1545, -1, sizeof(::TSCE::CellCoordinateVectorArchive)},
  { 1551, 1558, sizeof(::TSCE::ExpandedCellRefObjectPairArchive)},
  { 1560, -1, sizeof(::TSCE::ExpandedCellRefObjectMapArchive)},
  { 1566, 1575, sizeof(::TSCE::FormulaAtCoordArchive)},
  { 1579, 1587, sizeof(::TSCE::FormulaCoordPairsByOwnerArchive)},
  { 1590, -1, sizeof(::TSCE::FormulasForUndoArchive)},
  { 1596, 1603, sizeof(::TSCE::FormulaRewriteCommandArchive)},
  { 1605, 1613, sizeof(::TSCE::ExtendTableIDHistoryCommandArchive)},
  { 1616, 1623, sizeof(::TSCE::NumberTrackedReferencePairArchive)},
  { 1625, -1, sizeof(::TSCE::NumberToTrackedReferenceMapArchive)},
  { 1631, 1640, sizeof(::TSCE::TrackedReferencesRewriteCommandArchive)},
  { 1644, 1651, sizeof(::TSCE::TrackedReferenceArchive)},
  { 1653, 1661, sizeof(::TSCE::ExpandedTrackedReferenceArchive)},
  { 1664, 1673, sizeof(::TSCE::ReferenceTrackerArchive)},
  { 1677, 1685, sizeof(::TSCE::BooleanCellValueArchive)},
  { 1688, 1697, sizeof(::TSCE::DateCellValueArchive)},
  { 1701, 1714, sizeof(::TSCE::NumberCellValueArchive)},
  { 1722, 1733, sizeof(::TSCE::StringCellValueArchive)},
  { 1739, 1748, sizeof(::TSCE::ErrorCellValueArchive)},
  { 1752, 1763, sizeof(::TSCE::CellValueArchive)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_CellReferenceArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_InternalCellReferenceArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_RangeReferenceArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_InternalRangeReferenceArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_IndexSetArchive_IndexSetEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_IndexSetArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_CellCoordSetArchive_ColumnEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_CellCoordSetArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_InternalCellRefSetArchive_OwnerEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_InternalCellRefSetArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_ColumnRowSize_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_CellRectArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_CellRefSetArchive_OwnerEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_CellRefSetArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_UidCoordSetArchive_ColumnEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_UidCoordSetArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_UidCellRefSetArchive_OwnerEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_UidCellRefSetArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_ReferencesToDirtyArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_CoordMapperArchive_BaseToViewEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_CoordMapperArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_ReferenceArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_EdgeArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_EdgesArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_ExpandedEdgesArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_CellRecordArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_CellDependenciesArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_CellRecordExpandedArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_CellDependenciesExpandedArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_CellRecordTileArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_CellDependenciesTiledArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_VolatileDependenciesArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_VolatileDependenciesExpandedArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_RTreeInternalNodeContentsArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_RTreeLeafNodeContentsArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_RTreeNodeArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_RTreeArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_RangeBackDependencyArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_RangeDependenciesArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_RangePrecedentsTileArchive_FromToRangeArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_RangePrecedentsTileArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_RangeDependenciesTiledArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_SpanningDependenciesArchive_ReferringColumnToLocalCells_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_SpanningDependenciesArchive_ReferringColumnToRemoteCells_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_SpanningDependenciesArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_SpanningDependenciesExpandedArchive_ExtentRange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_SpanningDependenciesExpandedArchive_CellCoordRefersToExtents_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_SpanningDependenciesExpandedArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_WholeOwnerDependenciesArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_WholeOwnerDependenciesExpandedArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_CellErrorsArchive_ErrorForCell_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_CellErrorsArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_UuidReferencesArchive_TableRef_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_UuidReferencesArchive_UuidRef_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_UuidReferencesArchive_TableWithUuidRef_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_UuidReferencesArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_FormulaOwnerDependenciesArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_FormulaOwnerInfoArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_SubFormulaOwnerIDArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_OwnerIDMapArchive_OwnerIDMapArchiveEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_OwnerIDMapArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_UidLookupListArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_DependencyTrackerArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_RemoteDataSpecifierArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_RemoteDataValueMapArchive_RemoteDataMapEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_RemoteDataValueMapArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_StockArchive_AttributeEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_StockArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_RemoteDataStoreArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_NameTrackedReferencePair_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_NamesByTrackedReferenceArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_NamedReferenceManagerArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_UuidSetStoreArchive_UuidSet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_UuidSetStoreArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_UuidReferenceMapArchive_CellRefsForUuid_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_UuidReferenceMapArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_GroupByNodeMapArchive_CellRefsForGroupNode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_GroupByNodeMapArchive_GroupNodesForGroupBy_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_GroupByNodeMapArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_CalculationEngineArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_PreserveColumnRowFlagsArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_CategoryReferenceArchive_CatRefUidList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_CategoryReferenceArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_ASTNodeArrayArchive_ASTColumnCoordinateArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_ASTNodeArrayArchive_ASTRowCoordinateArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_ASTNodeArrayArchive_ASTUidList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_ASTNodeArrayArchive_ASTUidTract_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_ASTNodeArrayArchive_ASTStickyBits_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_ASTNodeArrayArchive_ASTUidTractList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_ASTNodeArrayArchive_ASTUidCoordinateArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_ASTNodeArrayArchive_ASTCategoryReferenceArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_ASTNodeArrayArchive_ASTColonTractArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_ASTNodeArrayArchive_ASTLetNodeWhitespace_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_ASTNodeArrayArchive_ASTNodeArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_ASTNodeArrayArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_FormulaTranslationFlagsArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_FormulaArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_FunctorArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_FormatStructArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_RangeCoordinateArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_TableTransposeInfoArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_MergeOriginMovedArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_OwnerUIDMapperArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_RewriteTableUIDInfoArchive_TableUIDMapEntryArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_RewriteTableUIDInfoArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_GroupByChangeArchive_GroupingColumnChangeArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_GroupByChangeArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_RewriteGroupNodeUIDInfoArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_IndexedUidsArchive_IndexedUid_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_IndexedUidsArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_RewriteRangeEntryArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_ColumnOrRowUuidsInfoArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_RegionInfoArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_RegionMovedInfoArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_MergeSourceArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_FormulaRewriteSpecArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_HauntedOwnerArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_CellCoordinateArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_CellCoordinateVectorArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_ExpandedCellRefObjectPairArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_ExpandedCellRefObjectMapArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_FormulaAtCoordArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_FormulaCoordPairsByOwnerArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_FormulasForUndoArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_FormulaRewriteCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_ExtendTableIDHistoryCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_NumberTrackedReferencePairArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_NumberToTrackedReferenceMapArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_TrackedReferencesRewriteCommandArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_TrackedReferenceArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_ExpandedTrackedReferenceArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_ReferenceTrackerArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_BooleanCellValueArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_DateCellValueArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_NumberCellValueArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_StringCellValueArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_ErrorCellValueArchive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TSCE::_CellValueArchive_default_instance_),
};

const char descriptor_table_protodef_TSCEArchives_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022TSCEArchives.proto\022\004TSCE\032\021TSPMessages."
  "proto\032\021TSKArchives.proto\"Y\n\024CellReferenc"
  "eArchive\022\016\n\006column\030\001 \002(\r\022\013\n\003row\030\002 \002(\r\022$\n"
  "\010table_id\030\003 \002(\0132\022.TSP.CFUUIDArchive\"a\n\034I"
  "nternalCellReferenceArchive\022/\n\ncoordinat"
  "e\030\001 \002(\0132\033.TSCE.CellCoordinateArchive\022\020\n\010"
  "owner_id\030\002 \002(\r\"\243\001\n\025RangeReferenceArchive"
  "\022$\n\010table_id\030\001 \002(\0132\022.TSP.CFUUIDArchive\022\027"
  "\n\017top_left_column\030\002 \002(\r\022\024\n\014top_left_row\030"
  "\003 \002(\r\022\033\n\023bottom_right_column\030\004 \002(\r\022\030\n\020bo"
  "ttom_right_row\030\005 \002(\r\"^\n\035InternalRangeRef"
  "erenceArchive\022\020\n\010owner_id\030\001 \002(\r\022+\n\005range"
  "\030\002 \002(\0132\034.TSCE.RangeCoordinateArchive\"\200\001\n"
  "\017IndexSetArchive\0224\n\007entries\030\001 \003(\0132#.TSCE"
  ".IndexSetArchive.IndexSetEntry\0327\n\rIndexS"
  "etEntry\022\023\n\013range_begin\030\001 \002(\005\022\021\n\trange_en"
  "d\030\002 \001(\005\"\233\001\n\023CellCoordSetArchive\022=\n\016colum"
  "n_entries\030\001 \003(\0132%.TSCE.CellCoordSetArchi"
  "ve.ColumnEntry\032E\n\013ColumnEntry\022\016\n\006column\030"
  "\001 \002(\r\022&\n\007row_set\030\002 \002(\0132\025.TSCE.IndexSetAr"
  "chive\"\254\001\n\031InternalCellRefSetArchive\022A\n\ro"
  "wner_entries\030\001 \003(\0132*.TSCE.InternalCellRe"
  "fSetArchive.OwnerEntry\032L\n\nOwnerEntry\022\020\n\010"
  "owner_id\030\001 \002(\r\022,\n\tcoord_set\030\002 \002(\0132\031.TSCE"
  ".CellCoordSetArchive\"<\n\rColumnRowSize\022\026\n"
  "\013num_columns\030\001 \001(\r:\0011\022\023\n\010num_rows\030\002 \001(\r:"
  "\0011\"a\n\017CellRectArchive\022+\n\006origin\030\001 \002(\0132\033."
  "TSCE.CellCoordinateArchive\022!\n\004size\030\002 \002(\013"
  "2\023.TSCE.ColumnRowSize\"\250\001\n\021CellRefSetArch"
  "ive\0229\n\rowner_entries\030\001 \003(\0132\".TSCE.CellRe"
  "fSetArchive.OwnerEntry\032X\n\nOwnerEntry\022\034\n\t"
  "owner_uid\030\001 \002(\0132\t.TSP.UUID\022,\n\tcoord_set\030"
  "\002 \002(\0132\031.TSCE.CellCoordSetArchive\"\230\001\n\022Uid"
  "CoordSetArchive\022<\n\016column_entries\030\001 \003(\0132"
  "$.TSCE.UidCoordSetArchive.ColumnEntry\032D\n"
  "\013ColumnEntry\022\031\n\006column\030\001 \002(\0132\t.TSP.UUID\022"
  "\032\n\007row_set\030\002 \003(\0132\t.TSP.UUID\"\255\001\n\024UidCellR"
  "efSetArchive\022<\n\rowner_entries\030\001 \003(\0132%.TS"
  "CE.UidCellRefSetArchive.OwnerEntry\032W\n\nOw"
  "nerEntry\022\034\n\towner_uid\030\001 \002(\0132\t.TSP.UUID\022+"
  "\n\tcoord_set\030\002 \002(\0132\030.TSCE.UidCoordSetArch"
  "ive\"\315\002\n\030ReferencesToDirtyArchive\0221\n\022to_d"
  "irty_owner_ids\030\001 \001(\0132\025.TSCE.IndexSetArch"
  "ive\0227\n\016to_dirty_cells\030\002 \001(\0132\037.TSCE.Inter"
  "nalCellRefSetArchive\022B\n\031to_dirty_cells_a"
  "dditional\030\003 \001(\0132\037.TSCE.InternalCellRefSe"
  "tArchive\022@\n\023to_dirty_range_refs\030\004 \003(\0132#."
  "TSCE.InternalRangeReferenceArchive\022\?\n\026ca"
  "lc_in_progress_cells\030\006 \001(\0132\037.TSCE.Intern"
  "alCellRefSetArchive\"\350\001\n\022CoordMapperArchi"
  "ve\0229\n\032summary_and_label_rows_set\030\001 \001(\0132\025"
  ".TSCE.IndexSetArchive\022\034\n\ttable_uid\030\002 \002(\013"
  "2\t.TSP.UUID\022B\n\020base_to_view_map\030\003 \003(\0132(."
  "TSCE.CoordMapperArchive.BaseToViewEntry\032"
  "5\n\017BaseToViewEntry\022\020\n\010base_row\030\001 \002(\r\022\020\n\010"
  "view_row\030\002 \002(\r\"\211\002\n\020ReferenceArchive\022<\n\016r"
  "eference_type\030\001 \002(\0162$.TSCE.ReferenceArch"
  "ive.ReferenceType\0222\n\016cell_reference\030\002 \001("
  "\0132\032.TSCE.CellReferenceArchive\0224\n\017range_r"
  "eference\030\003 \001(\0132\033.TSCE.RangeReferenceArch"
  "ive\"M\n\rReferenceType\022\022\n\016CELL_REFERENCE\020\001"
  "\022\023\n\017RANGE_REFERENCE\020\002\022\023\n\017NAME_DEPENDENCY"
  "\020\003\"f\n\013EdgeArchive\022\016\n\006column\030\001 \002(\r\022\013\n\003row"
  "\030\002 \002(\r\022\024\n\014is_precedent\030\003 \002(\010\022$\n\010owner_id"
  "\030\004 \001(\0132\022.TSP.CFUUIDArchive\"\244\001\n\014EdgesArch"
  "ive\022!\n\031packed_edge_without_owner\030\t \003(\r\022\036"
  "\n\026packed_edge_with_owner\030\n \003(\r\022-\n\021owner_"
  "id_for_edge\030\013 \003(\0132\022.TSP.CFUUIDArchive\022\"\n"
  "\032internal_owner_id_for_edge\030\014 \003(\r\"\276\001\n\024Ex"
  "pandedEdgesArchive\022\037\n\027edge_without_owner"
  "_rows\030\001 \003(\r\022\"\n\032edge_without_owner_column"
  "s\030\002 \003(\r\022\034\n\024edge_with_owner_rows\030\003 \003(\r\022\037\n"
  "\027edge_with_owner_columns\030\004 \003(\r\022\"\n\032intern"
  "al_owner_id_for_edge\030\005 \003(\r\"\201\003\n\021CellRecor"
  "dArchive\022\016\n\006column\030\001 \002(\r\022\013\n\003row\030\002 \002(\r\022+\n"
  " dirty_self_plus_precedents_count\030\003 \001(\004:"
  "\0010\022\034\n\ris_in_a_cycle\030\004 \001(\010:\005false\022#\n\004edge"
  "\030\005 \003(\0132\021.TSCE.EdgeArchiveB\002\030\001\022 \n\022contain"
  "s_a_formula\030\006 \001(\010:\004true\022(\n\031has_calculate"
  "d_precedents\030\007 \001(\010:\005false\0226\n#calculate_p"
  "recedents_on_next_recalc\030\010 \001(\010:\005falseB\002\030"
  "\001\0228\n)translate_for_excel_import_on_next_"
  "recalc\030\n \001(\010:\005false\022!\n\005edges\030\t \001(\0132\022.TSC"
  "E.EdgesArchive\"`\n\027CellDependenciesArchiv"
  "e\022,\n\013cell_record\030\001 \003(\0132\027.TSCE.CellRecord"
  "Archive\022\027\n\017num_dirty_cells\030\002 \001(\r\"\341\001\n\031Cel"
  "lRecordExpandedArchive\022\016\n\006column\030\001 \002(\r\022\013"
  "\n\003row\030\002 \002(\r\022+\n dirty_self_plus_precedent"
  "s_count\030\003 \001(\004:\0010\022\034\n\ris_in_a_cycle\030\004 \001(\010:"
  "\005false\022(\n\031has_calculated_precedents\030\005 \001("
  "\010:\005false\0222\n\016expanded_edges\030\006 \001(\0132\032.TSCE."
  "ExpandedEdgesArchive\"W\n\037CellDependencies"
  "ExpandedArchive\0224\n\013cell_record\030\001 \003(\0132\037.T"
  "SCE.CellRecordExpandedArchive\"\234\001\n\025CellRe"
  "cordTileArchive\022\031\n\021internal_owner_id\030\001 \002"
  "(\r\022\031\n\021tile_column_begin\030\002 \002(\r\022\026\n\016tile_ro"
  "w_begin\030\003 \002(\r\0225\n\014cell_records\030\004 \003(\0132\037.TS"
  "CE.CellRecordExpandedArchive\"I\n\034CellDepe"
  "ndenciesTiledArchive\022)\n\021cell_record_tile"
  "s\030\001 \003(\0132\016.TSP.Reference\"\204\006\n\033VolatileDepe"
  "ndenciesArchive\022!\n\031volatile_time_cell_co"
  "lumn\030\001 \003(\r\022\036\n\026volatile_time_cell_row\030\002 \003"
  "(\r\022#\n\033volatile_random_cell_column\030\003 \003(\r\022"
  " \n\030volatile_random_cell_row\030\004 \003(\r\022#\n\033vol"
  "atile_locale_cell_column\030\017 \003(\r\022 \n\030volati"
  "le_locale_cell_row\030\020 \003(\r\022%\n\035volatile_loc"
  "ation_cell_column\030\005 \003(\r\022\"\n\032volatile_loca"
  "tion_cell_row\030\006 \003(\r\022$\n\034volatile_compass_"
  "cell_column\030\007 \003(\r\022!\n\031volatile_compass_ce"
  "ll_row\030\010 \003(\r\022(\n volatile_remote_data_cel"
  "l_column\030\023 \003(\r\022%\n\035volatile_remote_data_c"
  "ell_row\030\024 \003(\r\022-\n%volatile_sheet_table_na"
  "me_cell_column\030\021 \003(\r\022*\n\"volatile_sheet_t"
  "able_name_cell_row\030\022 \003(\r\022)\n!calculated_d"
  "ependency_cell_column\030\t \003(\r\022&\n\036calculate"
  "d_dependency_cell_row\030\n \003(\r\022D\n volatile_"
  "geometry_cell_reference\030\r \003(\0132\032.TSCE.Cel"
  "lReferenceArchive\022;\n\026volatile_geometry_c"
  "ell\030\013 \003(\0132\033.TSCE.CellCoordinateArchive\"\232"
  "\003\n#VolatileDependenciesExpandedArchive\0226"
  "\n\023volatile_time_cells\030\001 \001(\0132\031.TSCE.CellC"
  "oordSetArchive\0228\n\025volatile_random_cells\030"
  "\002 \001(\0132\031.TSCE.CellCoordSetArchive\0228\n\025vola"
  "tile_locale_cells\030\003 \001(\0132\031.TSCE.CellCoord"
  "SetArchive\022B\n\037volatile_sheet_table_name_"
  "cells\030\004 \001(\0132\031.TSCE.CellCoordSetArchive\022="
  "\n\032volatile_remote_data_cells\030\005 \001(\0132\031.TSC"
  "E.CellCoordSetArchive\022D\n\033volatile_geomet"
  "ry_cell_refs\030\007 \001(\0132\037.TSCE.InternalCellRe"
  "fSetArchive\"c\n RTreeInternalNodeContents"
  "Archive\022\013\n\003min\030\001 \003(\r\022\013\n\003max\030\002 \003(\r\022%\n\005chi"
  "ld\030\003 \002(\0132\026.TSCE.RTreeNodeArchive\"l\n\034RTre"
  "eLeafNodeContentsArchive\022\013\n\003min\030\001 \003(\r\022\013\n"
  "\003max\030\002 \003(\r\0222\n\016cell_reference\030\003 \002(\0132\032.TSC"
  "E.CellReferenceArchive\"\270\001\n\020RTreeNodeArch"
  "ive\022\r\n\005level\030\001 \002(\r\022\r\n\005count\030\002 \002(\r\022F\n\026int"
  "ernal_node_contents\030\003 \003(\0132&.TSCE.RTreeIn"
  "ternalNodeContentsArchive\022>\n\022leaf_node_c"
  "ontents\030\004 \003(\0132\".TSCE.RTreeLeafNodeConten"
  "tsArchive\"\331\001\n\014RTreeArchive\022\024\n\014data_file_"
  "id\030\001 \002(\r\022\021\n\tdata_size\030\002 \002(\r\022\025\n\rdata_num_"
  "dims\030\003 \002(\r\022\026\n\016data_elem_size\030\004 \002(\r\022\033\n\023da"
  "ta_elem_real_size\030\005 \002(\r\022\026\n\016data_max_node"
  "s\030\006 \002(\r\022\026\n\016data_min_nodes\030\007 \002(\r\022$\n\004root\030"
  "\010 \002(\0132\026.TSCE.RTreeNodeArchive\"\314\001\n\032RangeB"
  "ackDependencyArchive\022\026\n\016cell_coord_row\030\001"
  " \002(\r\022\031\n\021cell_coord_column\030\002 \002(\r\0224\n\017range"
  "_reference\030\003 \001(\0132\033.TSCE.RangeReferenceAr"
  "chive\022E\n\030internal_range_reference\030\004 \001(\0132"
  "#.TSCE.InternalRangeReferenceArchive\"U\n\030"
  "RangeDependenciesArchive\0229\n\017back_depende"
  "ncy\030\002 \003(\0132 .TSCE.RangeBackDependencyArch"
  "ive\"\363\001\n\032RangePrecedentsTileArchive\022\023\n\013to"
  "_owner_id\030\001 \002(\r\022J\n\rfrom_to_range\030\002 \003(\01323"
  ".TSCE.RangePrecedentsTileArchive.FromToR"
  "angeArchive\032t\n\022FromToRangeArchive\022/\n\nfro"
  "m_coord\030\001 \002(\0132\033.TSCE.CellCoordinateArchi"
  "ve\022-\n\016refers_to_rect\030\002 \002(\0132\025.TSCE.CellRe"
  "ctArchive\"N\n\035RangeDependenciesTiledArchi"
  "ve\022-\n\025range_precedents_tile\030\001 \003(\0132\016.TSP."
  "Reference\"\225\007\n\033SpanningDependenciesArchiv"
  "e\022\016\n\006column\030\001 \003(\r\022E\n\rrange_context\030\002 \003(\016"
  "2..TSCE.SpanningDependenciesArchive.Rang"
  "eContext\022(\n\004cell\030\003 \003(\0132\032.TSCE.CellRefere"
  "nceArchive\022C\n\035total_range_for_deleted_ta"
  "ble\030\004 \001(\0132\034.TSCE.RangeCoordinateArchive\022"
  "B\n\034body_range_for_deleted_table\030\005 \001(\0132\034."
  "TSCE.RangeCoordinateArchive\022f\n\037referring"
  "_column_to_local_cells\030\006 \003(\0132=.TSCE.Span"
  "ningDependenciesArchive.ReferringColumnT"
  "oLocalCells\022h\n referring_column_to_remot"
  "e_cells\030\007 \003(\0132>.TSCE.SpanningDependencie"
  "sArchive.ReferringColumnToRemoteCells\032\252\001"
  "\n\033ReferringColumnToLocalCells\022\016\n\006column\030"
  "\001 \002(\r\022E\n\rrange_context\030\002 \002(\0162..TSCE.Span"
  "ningDependenciesArchive.RangeContext\0224\n\017"
  "cell_coordinate\030\003 \003(\0132\033.TSCE.CellCoordin"
  "ateArchive\032\272\001\n\034ReferringColumnToRemoteCe"
  "lls\022\016\n\006column\030\001 \002(\r\022E\n\rrange_context\030\002 \002"
  "(\0162..TSCE.SpanningDependenciesArchive.Ra"
  "ngeContext\022C\n\027internal_cell_reference\030\003 "
  "\003(\0132\".TSCE.InternalCellReferenceArchive\""
  "0\n\014RangeContext\022\013\n\007DEFAULT\020\000\022\023\n\017INCLUDE_"
  "HEADERS\020\001\"\362\005\n#SpanningDependenciesExpand"
  "edArchive\022a\n\025coord_refers_to_spans\030\001 \003(\013"
  "2B.TSCE.SpanningDependenciesExpandedArch"
  "ive.CellCoordRefersToExtents\022;\n\025total_ra"
  "nge_for_table\030\002 \001(\0132\034.TSCE.RangeCoordina"
  "teArchive\022:\n\024body_range_for_table\030\003 \001(\0132"
  "\034.TSCE.RangeCoordinateArchive\0327\n\013ExtentR"
  "ange\022\024\n\014extent_begin\030\001 \002(\r\022\022\n\nextent_end"
  "\030\002 \001(\r\032\311\001\n\037ExtentRangeWithTableWithConte"
  "xt\022\020\n\010owner_id\030\001 \002(\r\022M\n\rrange_context\030\002 "
  "\002(\01626.TSCE.SpanningDependenciesExpandedA"
  "rchive.RangeContext\022E\n\006ranges\030\003 \003(\01325.TS"
  "CE.SpanningDependenciesExpandedArchive.E"
  "xtentRange\032\267\001\n\030CellCoordRefersToExtents\022"
  "/\n\ncoordinate\030\001 \002(\0132\033.TSCE.CellCoordinat"
  "eArchive\022j\n\027ranges_by_table_context\030\002 \003("
  "\0132I.TSCE.SpanningDependenciesExpandedArc"
  "hive.ExtentRangeWithTableWithContext\"0\n\014"
  "RangeContext\022\013\n\007DEFAULT\020\000\022\023\n\017INCLUDE_HEA"
  "DERS\020\001\"[\n\035WholeOwnerDependenciesArchive\022"
  ":\n\016dependent_cell\030\001 \003(\0132\".TSCE.InternalC"
  "ellReferenceArchive\"a\n%WholeOwnerDepende"
  "nciesExpandedArchive\0228\n\017dependent_cells\030"
  "\001 \001(\0132\037.TSCE.InternalCellRefSetArchive\"\356"
  "\002\n\021CellErrorsArchive\0224\n\006errors\030\001 \003(\0132$.T"
  "SCE.CellErrorsArchive.ErrorForCell\032\267\001\n\014E"
  "rrorForCell\022/\n\ncoordinate\030\001 \002(\0132\033.TSCE.C"
  "ellCoordinateArchive\0229\n\014error_flavor\030\002 \002"
  "(\0162#.TSCE.CellErrorsArchive.ErrorFlavor\022"
  ";\n\017err_due_to_cell\030\003 \001(\0132\".TSCE.Internal"
  "CellReferenceArchive\"i\n\013ErrorFlavor\022\010\n\004N"
  "ONE\020\000\022\t\n\005ERROR\020\001\022\r\n\tREF_ERROR\020\002\022\026\n\022CIRCU"
  "LAR_REF_ERROR\020\003\022\036\n\032UNSUPPORTED_FUNCTION_"
  "ERROR\020\004\"\256\003\n\025UuidReferencesArchive\0228\n\ntab"
  "le_refs\030\001 \003(\0132$.TSCE.UuidReferencesArchi"
  "ve.TableRef\022E\n\017table_uuid_refs\030\002 \003(\0132,.T"
  "SCE.UuidReferencesArchive.TableWithUuidR"
  "ef\032W\n\010TableRef\022\035\n\nowner_uuid\030\001 \002(\0132\t.TSP"
  ".UUID\022,\n\tcoord_set\030\002 \001(\0132\031.TSCE.CellCoor"
  "dSetArchive\032P\n\007UuidRef\022\027\n\004uuid\030\001 \002(\0132\t.T"
  "SP.UUID\022,\n\tcoord_set\030\002 \001(\0132\031.TSCE.CellCo"
  "ordSetArchive\032i\n\020TableWithUuidRef\022\035\n\nown"
  "er_uuid\030\001 \002(\0132\t.TSP.UUID\0226\n\tuuid_refs\030\002 "
  "\003(\0132#.TSCE.UuidReferencesArchive.UuidRef"
  "\"\356\006\n\037FormulaOwnerDependenciesArchive\022$\n\021"
  "formula_owner_uid\030\001 \002(\0132\t.TSP.UUID\022!\n\031in"
  "ternal_formula_owner_id\030\002 \002(\r\022\022\n\nowner_k"
  "ind\030\003 \001(\r\022@\n\021cell_dependencies\030\004 \001(\0132%.T"
  "SCE.CellDependenciesExpandedArchive\022:\n\022r"
  "ange_dependencies\030\005 \001(\0132\036.TSCE.RangeDepe"
  "ndenciesArchive\022H\n\025volatile_dependencies"
  "\030\006 \001(\0132).TSCE.VolatileDependenciesExpand"
  "edArchive\022O\n\034spanning_column_dependencie"
  "s\030\007 \001(\0132).TSCE.SpanningDependenciesExpan"
  "dedArchive\022L\n\031spanning_row_dependencies\030"
  "\010 \001(\0132).TSCE.SpanningDependenciesExpande"
  "dArchive\022M\n\030whole_owner_dependencies\030\t \001"
  "(\0132+.TSCE.WholeOwnerDependenciesExpanded"
  "Archive\022,\n\013cell_errors\030\n \001(\0132\027.TSCE.Cell"
  "ErrorsArchive\022%\n\rformula_owner\030\013 \001(\0132\016.T"
  "SP.Reference\022!\n\016base_owner_uid\030\014 \001(\0132\t.T"
  "SP.UUID\022C\n\027tiled_cell_dependencies\030\r \001(\013"
  "2\".TSCE.CellDependenciesTiledArchive\0224\n\017"
  "uuid_references\030\016 \001(\0132\033.TSCE.UuidReferen"
  "cesArchive\022E\n\030tiled_range_dependencies\030\017"
  " \001(\0132#.TSCE.RangeDependenciesTiledArchiv"
  "e\"\252\004\n\027FormulaOwnerInfoArchive\022,\n\020formula"
  "_owner_id\030\001 \002(\0132\022.TSP.CFUUIDArchive\0228\n\021c"
  "ell_dependencies\030\002 \001(\0132\035.TSCE.CellDepend"
  "enciesArchive\022:\n\022range_dependencies\030\003 \001("
  "\0132\036.TSCE.RangeDependenciesArchive\022@\n\025vol"
  "atile_dependencies\030\004 \001(\0132!.TSCE.Volatile"
  "DependenciesArchive\022G\n\034spanning_column_d"
  "ependencies\030\005 \001(\0132!.TSCE.SpanningDepende"
  "nciesArchive\022D\n\031spanning_row_dependencie"
  "s\030\006 \001(\0132!.TSCE.SpanningDependenciesArchi"
  "ve\022E\n\030whole_owner_dependencies\030\010 \001(\0132#.T"
  "SCE.WholeOwnerDependenciesArchive\022,\n\013cel"
  "l_errors\030\t \001(\0132\027.TSCE.CellErrorsArchive\022"
  "%\n\rformula_owner\030\007 \001(\0132\016.TSP.Reference\"Q"
  "\n\030SubFormulaOwnerIDArchive\022!\n\016base_owner"
  "_uid\030\001 \002(\0132\t.TSP.UUID\022\022\n\nowner_kind\030\002 \001("
  "\r\"\231\002\n\021OwnerIDMapArchive\022A\n\tmap_entry\030\001 \003"
  "(\0132..TSCE.OwnerIDMapArchive.OwnerIDMapAr"
  "chiveEntry\022&\n\036unregistered_internal_owne"
  "r_id\030\002 \003(\r\032\230\001\n\026OwnerIDMapArchiveEntry\022\031\n"
  "\021internal_owner_id\030\001 \002(\r\022$\n\010owner_id\030\002 \002"
  "(\0132\022.TSP.CFUUIDArchive\022=\n\025sub_formula_ow"
  "ner_uid\030\003 \001(\0132\036.TSCE.SubFormulaOwnerIDAr"
  "chive\"0\n\024UidLookupListArchive\022\030\n\005uuids\030\001"
  " \003(\0132\t.TSP.UUID\"\315\002\n\030DependencyTrackerArc"
  "hive\0229\n\022formula_owner_info\030\001 \003(\0132\035.TSCE."
  "FormulaOwnerInfoArchive\0222\n\ndirty_leaf\030\002 "
  "\003(\0132\032.TSCE.CellReferenceArchiveB\002\030\001\022-\n\014o"
  "wner_id_map\030\003 \001(\0132\027.TSCE.OwnerIDMapArchi"
  "ve\022C\n\023internal_dirty_leaf\030\004 \003(\0132\".TSCE.I"
  "nternalCellReferenceArchiveB\002\030\001\022\032\n\022numbe"
  "r_of_formulas\030\005 \001(\004\0222\n\032formula_owner_dep"
  "endencies\030\006 \003(\0132\016.TSP.Reference\"e\n\032Remot"
  "eDataSpecifierArchive\022\026\n\016function_index\030"
  "\001 \002(\r\022\016\n\006symbol\030\002 \002(\t\022\021\n\tattribute\030\003 \002(\r"
  "\022\014\n\004date\030\004 \001(\001\"\320\001\n\031RemoteDataValueMapArc"
  "hive\022A\n\005entry\030\001 \003(\01322.TSCE.RemoteDataVal"
  "ueMapArchive.RemoteDataMapEntry\032p\n\022Remot"
  "eDataMapEntry\0223\n\tspecifier\030\001 \002(\0132 .TSCE."
  "RemoteDataSpecifierArchive\022%\n\005value\030\002 \002("
  "\0132\026.TSCE.CellValueArchive\"\226\001\n\014StockArchi"
  "ve\022\016\n\006symbol\030\001 \002(\t\022\014\n\004date\030\002 \001(\001\0224\n\tattr"
  "ibute\030\003 \003(\0132!.TSCE.StockArchive.Attribut"
  "eEntry\0322\n\016AttributeEntry\022\021\n\tattribute\030\001 "
  "\002(\r\022\r\n\005value\030\002 \002(\t\"p\n\026RemoteDataStoreArc"
  "hive\0222\n\tvalue_map\030\001 \002(\0132\037.TSCE.RemoteDat"
  "aValueMapArchive\022\"\n\006stocks\030\002 \003(\0132\022.TSCE."
  "StockArchive\"q\n\030NameTrackedReferencePair"
  "\022\014\n\004name\030\001 \002(\t\022)\n\021tracked_reference\030\002 \001("
  "\0132\016.TSP.Reference\022\034\n\024tracked_reference_i"
  "d\030\003 \001(\r\"\213\001\n\036NamesByTrackedReferenceArchi"
  "ve\022$\n\010table_id\030\001 \002(\0132\022.TSP.CFUUIDArchive"
  "\022C\n\033name_tracked_reference_pair\030\002 \003(\0132\036."
  "TSCE.NameTrackedReferencePair\"\240\001\n\034NamedR"
  "eferenceManagerArchive\022)\n\021reference_trac"
  "ker\030\001 \002(\0132\016.TSP.Reference\022U\n#names_by_tr"
  "acked_reference_by_table\030\002 \003(\0132$.TSCE.Na"
  "mesByTrackedReferenceArchiveB\002\030\001\"\203\001\n\023Uui"
  "dSetStoreArchive\0222\n\007uuidSet\030\001 \003(\0132!.TSCE"
  ".UuidSetStoreArchive.UuidSet\0328\n\007UuidSet\022"
  "\027\n\004uuid\030\001 \003(\0132\t.TSP.UUID\022\024\n\014index_of_set"
  "\030\002 \002(\r\"\373\001\n\027UuidReferenceMapArchive\022I\n\022ce"
  "ll_refs_for_uuid\030\001 \003(\0132-.TSCE.UuidRefere"
  "nceMapArchive.CellRefsForUuid\032\224\001\n\017CellRe"
  "fsForUuid\022\027\n\004uuid\030\001 \002(\0132\t.TSP.UUID\0224\n\010ce"
  "ll_ref\030\002 \003(\0132\".TSCE.InternalCellReferenc"
  "eArchive\0222\n\tcell_refs\030\003 \001(\0132\037.TSCE.Inter"
  "nalCellRefSetArchive\"\334\002\n\025GroupByNodeMapA"
  "rchive\022K\n\021refs_for_group_by\030\001 \003(\01320.TSCE"
  ".GroupByNodeMapArchive.GroupNodesForGrou"
  "pBy\032m\n\024CellRefsForGroupNode\022!\n\016group_nod"
  "e_uid\030\001 \002(\0132\t.TSP.UUID\0222\n\tcell_refs\030\003 \001("
  "\0132\037.TSCE.InternalCellRefSetArchive\032\206\001\n\024G"
  "roupNodesForGroupBy\022\037\n\014group_by_uid\030\001 \002("
  "\0132\t.TSP.UUID\022M\n\023refs_for_group_node\030\002 \003("
  "\01320.TSCE.GroupByNodeMapArchive.CellRefsF"
  "orGroupNode\"\225\007\n\030CalculationEngineArchive"
  "\022\026\n\016base_date_1904\030\001 \001(\010\022:\n\022dependency_t"
  "racker\030\002 \002(\0132\036.TSCE.DependencyTrackerArc"
  "hive\022/\n\027named_reference_manager\030\003 \001(\0132\016."
  "TSP.Reference\022b\n\026excel_import_date_mode\030"
  "\004 \001(\01622.TSCE.CalculationEngineArchive.Ex"
  "celImportDateMode:\016DATE_MODE_1900\022\'\n\037sav"
  "ed_locale_identifier_for_4_2\030\005 \001(\t\022\034\n\024do"
  "cument_random_seed\030\006 \001(\004\0229\n\022uuid_referen"
  "ce_map\030\007 \001(\0132\035.TSCE.UuidReferenceMapArch"
  "ive\022\032\n\022document_timestamp\030\t \001(\001\022\031\n\021docum"
  "ent_timezone\030\n \001(\t\022;\n\021table_uid_history\030"
  "\013 \001(\0132 .TSCE.RewriteTableUIDInfoArchive\022"
  ")\n\021remote_data_store\030\014 \001(\0132\016.TSP.Referen"
  "ce\0223\n\016group_node_map\030\r \001(\0132\033.TSCE.GroupB"
  "yNodeMapArchive\022+\n\023header_name_manager\030\016"
  " \001(\0132\016.TSP.Reference\022%\n\rrefs_to_dirty\030\017 "
  "\001(\0132\016.TSP.Reference\022\037\n\027saved_locale_iden"
  "tifier\030\020 \001(\t\0222\n\037begin_tracking_names_leg"
  "acy_nrm\030\021 \003(\0132\t.TSP.UUID\0220\n\035end_tracking"
  "_names_legacy_nrm\030\022 \003(\0132\t.TSP.UUID\"_\n\023Ex"
  "celImportDateMode\022\022\n\016DATE_MODE_1900\020\001\022\031\n"
  "\025DATE_MODE_1900_LEGACY\020\002\022\031\n\025DATE_MODE_19"
  "04_LEGACY\020\003\"\235\001\n\035PreserveColumnRowFlagsAr"
  "chive\022\035\n\025begin_row_is_absolute\030\001 \002(\010\022 \n\030"
  "begin_column_is_absolute\030\002 \002(\010\022\033\n\023end_ro"
  "w_is_absolute\030\003 \001(\010\022\036\n\026end_column_is_abs"
  "olute\030\004 \001(\010\"\255\003\n\030CategoryReferenceArchive"
  "\022\037\n\014group_by_uid\030\001 \002(\0132\t.TSP.UUID\022\035\n\ncol"
  "umn_uid\030\002 \002(\0132\t.TSP.UUID\022-\n\016aggregate_ty"
  "pe\030\003 \002(\0162\025.TSCE.CategoryAggType\022\023\n\013group"
  "_level\030\004 \002(\021\022@\n\ngroup_uids\030\006 \001(\0132,.TSCE."
  "CategoryReferenceArchive.CatRefUidList\022;"
  "\n\016preserve_flags\030\007 \001(\0132#.TSCE.PreserveCo"
  "lumnRowFlagsArchive\022\027\n\017relative_column\030\010"
  " \001(\005\022%\n\022relative_group_uid\030\t \001(\0132\t.TSP.U"
  "UID\022%\n\022absolute_group_uid\030\n \001(\0132\t.TSP.UU"
  "ID\032\'\n\rCatRefUidList\022\026\n\003uid\030\001 \003(\0132\t.TSP.U"
  "UID\"\340.\n\023ASTNodeArrayArchive\022:\n\010AST_node\030"
  "\001 \003(\0132(.TSCE.ASTNodeArrayArchive.ASTNode"
  "Archive\032~\n ASTLocalCellReferenceNodeArch"
  "ive\022\022\n\nrow_handle\030\001 \002(\r\022\025\n\rcolumn_handle"
  "\030\002 \002(\r\022\025\n\rrow_is_sticky\030\003 \002(\r\022\030\n\020column_"
  "is_sticky\030\004 \002(\r\032\371\002\n%ASTCrossTableCellRef"
  "erenceNodeArchive\022\022\n\nrow_handle\030\001 \002(\r\022\025\n"
  "\rcolumn_handle\030\002 \002(\r\022\025\n\rrow_is_sticky\030\003 "
  "\002(\r\022\030\n\020column_is_sticky\030\004 \002(\r\022$\n\010table_i"
  "d\030\005 \002(\0132\022.TSP.CFUUIDArchive\0221\n)AST_refer"
  "ence_whitespace_after_sheet_name\030\006 \001(\t\0222"
  "\n*AST_reference_whitespace_before_table_"
  "name\030\007 \001(\t\0221\n)AST_reference_whitespace_a"
  "fter_table_name\030\010 \001(\t\0224\n,AST_reference_w"
  "hitespace_before_cell_address\030\t \001(\t\032E\n\032A"
  "STColumnCoordinateArchive\022\016\n\006column\030\001 \002("
  "\021\022\027\n\010absolute\030\002 \001(\010:\005false\032\?\n\027ASTRowCoor"
  "dinateArchive\022\013\n\003row\030\001 \002(\021\022\027\n\010absolute\030\002"
  " \001(\010:\005false\032$\n\nASTUidList\022\026\n\003uid\030\001 \003(\0132\t"
  ".TSP.UUID\032\367\001\n\013ASTUidTract\0228\n\ncolumnUids\030"
  "\001 \002(\0132$.TSCE.ASTNodeArrayArchive.ASTUidL"
  "ist\0225\n\007rowUids\030\002 \002(\0132$.TSCE.ASTNodeArray"
  "Archive.ASTUidList\022\024\n\014is_range_ref\030\003 \001(\010"
  "\022=\n\007purpose\030\004 \001(\0162,.TSCE.ASTNodeArrayArc"
  "hive.ASTUidTractPurpose\022\"\n\024preserve_rect"
  "angular\030\005 \001(\010:\004true\032\215\001\n\rASTStickyBits\022\035\n"
  "\025begin_row_is_absolute\030\001 \002(\010\022 \n\030begin_co"
  "lumn_is_absolute\030\002 \002(\010\022\033\n\023end_row_is_abs"
  "olute\030\003 \002(\010\022\036\n\026end_column_is_absolute\030\004 "
  "\002(\010\032\205\001\n\017ASTUidTractList\0224\n\005tract\030\001 \003(\0132%"
  ".TSCE.ASTNodeArrayArchive.ASTUidTract\022<\n"
  "\013sticky_bits\030\002 \002(\0132\'.TSCE.ASTNodeArrayAr"
  "chive.ASTStickyBits\032\203\001\n\027ASTUidCoordinate"
  "Archive\022\035\n\ncolumn_uid\030\001 \002(\0132\t.TSP.UUID\022\032"
  "\n\007row_uid\030\002 \002(\0132\t.TSP.UUID\022\027\n\017column_abs"
  "olute\030\003 \002(\010\022\024\n\014row_absolute\030\004 \002(\010\032S\n\033AST"
  "CategoryReferenceArchive\0224\n\014category_ref"
  "\030\001 \002(\0132\036.TSCE.CategoryReferenceArchive\032\372"
  "\004\n\024ASTColonTractArchive\022i\n\017relative_colu"
  "mn\030\001 \003(\0132P.TSCE.ASTNodeArrayArchive.ASTC"
  "olonTractArchive.ASTColonTractRelativeRa"
  "ngeArchive\022f\n\014relative_row\030\002 \003(\0132P.TSCE."
  "ASTNodeArrayArchive.ASTColonTractArchive"
  ".ASTColonTractRelativeRangeArchive\022i\n\017ab"
  "solute_column\030\003 \003(\0132P.TSCE.ASTNodeArrayA"
  "rchive.ASTColonTractArchive.ASTColonTrac"
  "tAbsoluteRangeArchive\022f\n\014absolute_row\030\004 "
  "\003(\0132P.TSCE.ASTNodeArrayArchive.ASTColonT"
  "ractArchive.ASTColonTractAbsoluteRangeAr"
  "chive\022\"\n\024preserve_rectangular\030\005 \001(\010:\004tru"
  "e\032K\n!ASTColonTractRelativeRangeArchive\022\023"
  "\n\013range_begin\030\001 \002(\005\022\021\n\trange_end\030\002 \001(\005\032K"
  "\n!ASTColonTractAbsoluteRangeArchive\022\023\n\013r"
  "ange_begin\030\001 \002(\r\022\021\n\trange_end\030\002 \001(\r\032\236\002\n&"
  "ASTCrossTableReferenceExtraInfoArchive\022$"
  "\n\010table_id\030\001 \002(\0132\022.TSP.CFUUIDArchive\0221\n)"
  "AST_reference_whitespace_after_sheet_nam"
  "e\030\002 \001(\t\0222\n*AST_reference_whitespace_befo"
  "re_table_name\030\003 \001(\t\0221\n)AST_reference_whi"
  "tespace_after_table_name\030\004 \001(\t\0224\n,AST_re"
  "ference_whitespace_before_cell_address\030\005"
  " \001(\t\032\276\001\n\024ASTLetNodeWhitespace\022$\n\034AST_let"
  "_whitespace_after_let\030\001 \001(\t\022+\n#AST_let_w"
  "hitespace_after_identifier\030\002 \001(\t\022\'\n\037AST_"
  "let_whitespace_after_equals\030\003 \001(\t\022*\n\"AST"
  "_let_whitespace_after_delimiter\030\004 \001(\t\032\274\020"
  "\n\016ASTNodeArchive\022<\n\rAST_node_type\030\001 \002(\0162"
  "%.TSCE.ASTNodeArrayArchive.ASTNodeType\022\037"
  "\n\027AST_function_node_index\030\002 \001(\r\022!\n\031AST_f"
  "unction_node_numArgs\030\003 \001(\r\022\036\n\026AST_number"
  "_node_number\030\004 \001(\001\022 \n\030AST_boolean_node_b"
  "oolean\030\005 \001(\010\022\036\n\026AST_string_node_string\030\006"
  " \001(\t\022\035\n\025AST_date_node_dateNum\030\007 \001(\001\022*\n\"A"
  "ST_date_node_suppress_date_format\030\023 \001(\010\022"
  "*\n\"AST_date_node_suppress_time_format\030\024 "
  "\001(\010\022&\n\036AST_date_node_date_time_format\030\025 "
  "\001(\t\022!\n\031AST_duration_node_unitNum\030\010 \001(\001\022\036"
  "\n\026AST_duration_node_unit\030\t \001(\005\022\037\n\027AST_du"
  "ration_node_style\030\026 \001(\r\022/\n\'AST_duration_"
  "node_duration_unit_largest\030\027 \001(\r\0220\n(AST_"
  "duration_node_duration_unit_smallest\030\030 \001"
  "(\r\022-\n%AST_duration_node_use_automatic_un"
  "its\030\035 \001(\010\022\036\n\026AST_token_node_boolean\030\n \001("
  "\010\022\035\n\025AST_array_node_numCol\030\013 \001(\r\022\035\n\025AST_"
  "array_node_numRow\030\014 \001(\r\022\035\n\025AST_list_node"
  "_numArgs\030\r \001(\r\0227\n\024AST_thunk_node_array\030\016"
  " \001(\0132\031.TSCE.ASTNodeArrayArchive\022k\n\'AST_l"
  "ocal_cell_reference_node_reference\030\017 \001(\013"
  "2:.TSCE.ASTNodeArrayArchive.ASTLocalCell"
  "ReferenceNodeArchive\022v\n-AST_cross_table_"
  "cell_reference_node_reference\030\020 \001(\0132\?.TS"
  "CE.ASTNodeArrayArchive.ASTCrossTableCell"
  "ReferenceNodeArchive\022(\n AST_unknown_func"
  "tion_node_string\030\021 \001(\t\022)\n!AST_unknown_fu"
  "nction_node_numArgs\030\022 \001(\r\022\026\n\016AST_whitesp"
  "ace\030\031 \001(\t\022H\n\nAST_column\030\032 \001(\01324.TSCE.AST"
  "NodeArrayArchive.ASTColumnCoordinateArch"
  "ive\022B\n\007AST_row\030\033 \001(\01321.TSCE.ASTNodeArray"
  "Archive.ASTRowCoordinateArchive\022n\n$AST_c"
  "ross_table_reference_extra_info\030\034 \001(\0132@."
  "TSCE.ASTNodeArrayArchive.ASTCrossTableRe"
  "ferenceExtraInfoArchive\022M\n\022AST_uid_coord"
  "inate\030\036 \001(\01321.TSCE.ASTNodeArrayArchive.A"
  "STUidCoordinateArchive\022@\n\017AST_sticky_bit"
  "s\030! \001(\0132\'.TSCE.ASTNodeArrayArchive.ASTSt"
  "ickyBits\022G\n\026AST_frozen_sticky_bits\030) \001(\013"
  "2\'.TSCE.ASTNodeArrayArchive.ASTStickyBit"
  "s\022\032\n\022AST_let_identifier\030\" \001(\t\022-\n\nAST_let"
  "_e2\030# \001(\0132\031.TSCE.ASTNodeArrayArchive\022J\n\022"
  "AST_let_whitespace\030$ \001(\0132..TSCE.ASTNodeA"
  "rrayArchive.ASTLetNodeWhitespace\022\022\n\nAST_"
  "symbol\030% \001(\r\022A\n\016AST_tract_list\030& \001(\0132).T"
  "SCE.ASTNodeArrayArchive.ASTUidTractList\022"
  "O\n\020AST_category_ref\030\' \001(\01325.TSCE.ASTNode"
  "ArrayArchive.ASTCategoryReferenceArchive"
  "\022G\n\017AST_colon_tract\030( \001(\0132..TSCE.ASTNode"
  "ArrayArchive.ASTColonTractArchive\022#\n\033AST"
  "_number_node_decimal_low\030* \001(\004\022$\n\034AST_nu"
  "mber_node_decimal_high\030+ \001(\004\"\251\010\n\013ASTNode"
  "Type\022\021\n\rADDITION_NODE\020\001\022\024\n\020SUBTRACTION_N"
  "ODE\020\002\022\027\n\023MULTIPLICATION_NODE\020\003\022\021\n\rDIVISI"
  "ON_NODE\020\004\022\016\n\nPOWER_NODE\020\005\022\026\n\022CONCATENATI"
  "ON_NODE\020\006\022\025\n\021GREATER_THAN_NODE\020\007\022!\n\035GREA"
  "TER_THAN_OR_EQUAL_TO_NODE\020\010\022\022\n\016LESS_THAN"
  "_NODE\020\t\022\036\n\032LESS_THAN_OR_EQUAL_TO_NODE\020\n\022"
  "\021\n\rEQUAL_TO_NODE\020\013\022\025\n\021NOT_EQUAL_TO_NODE\020"
  "\014\022\021\n\rNEGATION_NODE\020\r\022\022\n\016PLUS_SIGN_NODE\020\016"
  "\022\020\n\014PERCENT_NODE\020\017\022\021\n\rFUNCTION_NODE\020\020\022\017\n"
  "\013NUMBER_NODE\020\021\022\020\n\014BOOLEAN_NODE\020\022\022\017\n\013STRI"
  "NG_NODE\020\023\022\r\n\tDATE_NODE\020\024\022\021\n\rDURATION_NOD"
  "E\020\025\022\027\n\023EMPTY_ARGUMENT_NODE\020\026\022\016\n\nTOKEN_NO"
  "DE\020\027\022\016\n\nARRAY_NODE\020\030\022\r\n\tLIST_NODE\020\031\022\016\n\nT"
  "HUNK_NODE\020\032\022\035\n\031LOCAL_CELL_REFERENCE_NODE"
  "\020\033\022#\n\037CROSS_TABLE_CELL_REFERENCE_NODE\020\034\022"
  "\016\n\nCOLON_NODE\020\035\022\030\n\024REFERENCE_ERROR_NODE\020"
  "\036\022\031\n\025UNKNOWN_FUNCTION_NODE\020\037\022\032\n\026APPEND_W"
  "HITESPACE_NODE\020 \022\033\n\027PREPEND_WHITESPACE_N"
  "ODE\020!\022\035\n\031BEGIN_EMBEDDED_NODE_ARRAY\020\"\022\022\n\016"
  "END_THUNK_NODE\020#\022\027\n\023CELL_REFERENCE_NODE\020"
  "$\022\030\n\024COLON_NODE_WITH_UIDS\020-\022\035\n\031REFERENCE"
  "_ERROR_WITH_UIDS\020.\022\026\n\022UID_REFERENCE_NODE"
  "\0200\022\014\n\010LET_NODE\0204\022\020\n\014LET_VAR_NODE\0205\022\020\n\014LE"
  "T_END_NODE\0206\022\030\n\024LINKED_CELL_REF_NODE\020\?\022\032"
  "\n\026LINKED_COLUMN_REF_NODE\020@\022\027\n\023LINKED_ROW"
  "_REF_NODE\020A\022\025\n\021CATEGORY_REF_NODE\020B\022\024\n\020CO"
  "LON_TRACT_NODE\020C\"\253\001\n\022ASTUidTractPurpose\022"
  "\021\n\rUIDS_INCLUDED\020\000\022\021\n\rUIDS_PREMERGE\020\001\022\026\n"
  "\022UIDS_PREMOVEREGION\020\002\022\021\n\rUIDS_EXCLUDED\020\003"
  "\022\017\n\013UIDS_ACTIVE\020\004\022\031\n\025UIDS_PREMERGE_TOPLE"
  "FT\020\005\022\030\n\024UIDS_REMOVED_BY_MOVE\020\006\"\335\001\n\036Formu"
  "laTranslationFlagsArchive\022\'\n\030excel_impor"
  "t_translation\030\001 \001(\010:\005false\022:\n+number_to_"
  "date_coercion_removal_translation\030\002 \001(\010:"
  "\005false\022+\n\034contains_uid_form_references\030\003"
  " \001(\010:\005false\022)\n\032contains_frozen_reference"
  "s\030\004 \001(\010:\005false\"\340\002\n\016FormulaArchive\0221\n\016AST"
  "_node_array\030\001 \002(\0132\031.TSCE.ASTNodeArrayArc"
  "hive\022\023\n\013host_column\030\002 \001(\r\022\020\n\010host_row\030\003 "
  "\001(\r\022&\n\027host_column_is_negative\030\004 \001(\010:\005fa"
  "lse\022#\n\024host_row_is_negative\030\005 \001(\010:\005false"
  "\022\?\n\021translation_flags\030\006 \001(\0132$.TSCE.Formu"
  "laTranslationFlagsArchive\022!\n\016host_table_"
  "uid\030\007 \001(\0132\t.TSP.UUID\022\"\n\017host_column_uid\030"
  "\010 \001(\0132\t.TSP.UUID\022\037\n\014host_row_uid\030\t \001(\0132\t"
  ".TSP.UUID\"I\n\016FunctorArchive\022%\n\007formula\030\001"
  " \002(\0132\024.TSCE.FormulaArchive\022\020\n\010num_args\030\002"
  " \002(\r\"\271\003\n\023FormatStructArchive\022\023\n\013format_t"
  "ype\030\001 \002(\r\022\026\n\016decimal_places\030\002 \001(\r\022\025\n\rcur"
  "rency_code\030\003 \001(\t\022\026\n\016negative_style\030\004 \001(\r"
  "\022 \n\030show_thousands_separator\030\005 \001(\010\022\034\n\024us"
  "e_accounting_style\030\006 \001(\010\022\026\n\016duration_sty"
  "le\030\007 \001(\r\022\014\n\004base\030\010 \001(\r\022\023\n\013base_places\030\t "
  "\001(\r\022\033\n\023base_use_minus_sign\030\n \001(\010\022\031\n\021frac"
  "tion_accuracy\030\013 \001(\r\022\034\n\024suppress_date_for"
  "mat\030\014 \001(\010\022\034\n\024suppress_time_format\030\r \001(\010\022"
  "\030\n\020date_time_format\030\016 \001(\t\022\035\n\025duration_un"
  "it_largest\030\017 \001(\r\022\036\n\026duration_unit_smalle"
  "st\030\020 \001(\r\"~\n\026RangeCoordinateArchive\022\027\n\017to"
  "p_left_column\030\001 \002(\r\022\024\n\014top_left_row\030\002 \002("
  "\r\022\033\n\023bottom_right_column\030\003 \002(\r\022\030\n\020bottom"
  "_right_row\030\004 \002(\r\"\201\001\n\031TableTransposeInfoA"
  "rchive\022\035\n\025number_of_footer_rows\030\003 \002(\r\022E\n"
  "\037body_range_for_transposed_table\030\004 \002(\0132\034"
  ".TSCE.RangeCoordinateArchive\"c\n\027MergeOri"
  "ginMovedArchive\022\022\n\nsrc_column\030\001 \003(\r\022\017\n\007s"
  "rc_row\030\002 \003(\r\022\022\n\ndst_column\030\003 \003(\r\022\017\n\007dst_"
  "row\030\004 \003(\r\"\313\007\n\025OwnerUIDMapperArchive\022\034\n\tt"
  "able_uid\030\001 \002(\0132\t.TSP.UUID\022!\n\016next_table_"
  "uid\030\002 \002(\0132\t.TSP.UUID\0222\n\037hidden_state_for"
  "_rows_owner_uid\030\003 \002(\0132\t.TSP.UUID\0227\n$next"
  "_hidden_state_for_rows_owner_uid\030\004 \002(\0132\t"
  ".TSP.UUID\0225\n\"hidden_state_for_columns_ow"
  "ner_uid\030\005 \002(\0132\t.TSP.UUID\022:\n\'next_hidden_"
  "state_for_columns_owner_uid\030\006 \002(\0132\t.TSP."
  "UUID\022.\n\033conditional_style_owner_uid\030\007 \002("
  "\0132\t.TSP.UUID\0223\n next_conditional_style_o"
  "wner_uid\030\010 \002(\0132\t.TSP.UUID\0228\n%sort_rule_r"
  "eference_tracker_owner_uid\030\t \002(\0132\t.TSP.U"
  "UID\022=\n*next_sort_rule_reference_tracker_"
  "owner_uid\030\n \002(\0132\t.TSP.UUID\022\"\n\017merge_owne"
  "r_uid\030\013 \002(\0132\t.TSP.UUID\022\'\n\024next_merge_own"
  "er_uid\030\014 \002(\0132\t.TSP.UUID\022%\n\022category_owne"
  "r_uid\030\r \002(\0132\t.TSP.UUID\022*\n\027next_category_"
  "owner_uid\030\016 \002(\0132\t.TSP.UUID\0220\n\035category_a"
  "ggregates_owner_uid\030\017 \002(\0132\t.TSP.UUID\0225\n\""
  "next_category_aggregates_owner_uid\030\020 \002(\013"
  "2\t.TSP.UUID\022\037\n\014group_by_uid\030\021 \002(\0132\t.TSP."
  "UUID\022$\n\021next_group_by_uid\030\022 \002(\0132\t.TSP.UU"
  "ID\022.\n\033pencil_annotation_owner_uid\030\023 \002(\0132"
  "\t.TSP.UUID\0223\n next_pencil_annotation_own"
  "er_uid\030\024 \002(\0132\t.TSP.UUID\"\315\001\n\032RewriteTable"
  "UIDInfoArchive\022O\n\rtable_uid_map\030\001 \003(\01328."
  "TSCE.RewriteTableUIDInfoArchive.TableUID"
  "MapEntryArchive\032^\n\027TableUIDMapEntryArchi"
  "ve\022!\n\016prev_table_uid\030\001 \002(\0132\t.TSP.UUID\022 \n"
  "\rnew_table_uid\030\002 \002(\0132\t.TSP.UUID\"\347\004\n\024Grou"
  "pByChangeArchive\022:\n\013change_type\030\001 \002(\0162%."
  "TSCE.GroupByChangeArchive.ChangeType\022\037\n\014"
  "group_by_uid\030\002 \002(\0132\t.TSP.UUID\022\026\n\016previou"
  "s_level\030\003 \001(\r\022\025\n\rupdated_level\030\004 \001(\r\0224\n\027"
  "previous_to_updated_map\030\005 \001(\0132\023.TSP.UUID"
  "MapArchive\0224\n\027updated_to_previous_map\030\006 "
  "\001(\0132\023.TSP.UUIDMapArchive\022%\n\022removed_grou"
  "p_uids\030\007 \003(\0132\t.TSP.UUID\022W\n\027grouping_colu"
  "mn_changes\030\010 \003(\01326.TSCE.GroupByChangeArc"
  "hive.GroupingColumnChangeArchive\032C\n\033Grou"
  "pingColumnChangeArchive\022\021\n\told_level\030\001 \002"
  "(\r\022\021\n\tnew_level\030\002 \002(\r\"\221\001\n\nChangeType\022\010\n\004"
  "NONE\020\000\022\026\n\022GROUP_VALUE_CHANGE\020\001\022\033\n\027GROUP_"
  "DEFINITION_CHANGE\020\002\022\026\n\022REMOVE_GROUP_LEVE"
  "L\020\003\022\023\n\017ADD_GROUP_LEVEL\020\004\022\013\n\007PROMOTE\020\005\022\n\n"
  "\006DEMOTE\020\006\"r\n\036RewriteGroupNodeUIDInfoArch"
  "ive\022\037\n\014group_by_uid\030\001 \001(\0132\t.TSP.UUID\022/\n\022"
  "group_node_uid_map\030\002 \002(\0132\023.TSP.UUIDMapAr"
  "chive\"\216\001\n\022IndexedUidsArchive\0221\n\004uids\030\001 \003"
  "(\0132#.TSCE.IndexedUidsArchive.IndexedUid\032"
  "E\n\nIndexedUid\022 \n\ruid_for_index\030\001 \002(\0132\t.T"
  "SP.UUID\022\025\n\rindex_for_uid\030\002 \002(\r\"w\n\030Rewrit"
  "eRangeEntryArchive\022\026\n\016range_location\030\001 \002"
  "(\r\022\024\n\014range_length\030\002 \002(\r\022\035\n\nrange_uids\030\003"
  " \003(\0132\t.TSP.UUID\022\016\n\006offset\030\004 \002(\r\"\362\002\n\033Colu"
  "mnOrRowUuidsInfoArchive\022\017\n\007is_rows\030\001 \002(\010"
  "\022\034\n\ttable_uid\030\002 \002(\0132\t.TSP.UUID\022\'\n\024cond_s"
  "tyle_owner_uid\030\003 \002(\0132\t.TSP.UUID\022\037\n\014group"
  "_by_uid\030\004 \002(\0132\t.TSP.UUID\022&\n\004uids\030\005 \002(\0132\030"
  ".TSCE.IndexedUidsArchive\0225\n\rrange_entrie"
  "s\030\006 \003(\0132\036.TSCE.RewriteRangeEntryArchive\022"
  "1\n\013table_range\030\007 \002(\0132\034.TSCE.RangeCoordin"
  "ateArchive\022 \n\rinsert_at_uid\030\010 \001(\0132\t.TSP."
  "UUID\022&\n\023insert_opposite_uid\030\t \001(\0132\t.TSP."
  "UUID\"\214\001\n\021RegionInfoArchive\022\034\n\ttable_uid\030"
  "\001 \002(\0132\t.TSP.UUID\022-\n\013column_uids\030\002 \002(\0132\030."
  "TSCE.IndexedUidsArchive\022*\n\010row_uids\030\003 \002("
  "\0132\030.TSCE.IndexedUidsArchive\"\372\001\n\026RegionMo"
  "vedInfoArchive\022+\n\nsrc_region\030\001 \002(\0132\027.TSC"
  "E.RegionInfoArchive\022+\n\ndst_region\030\002 \002(\0132"
  "\027.TSCE.RegionInfoArchive\022\021\n\tspan_rows\030\003 "
  "\001(\010\022\024\n\014span_columns\030\004 \001(\010\0224\n\023original_sr"
  "c_region\030\005 \001(\0132\027.TSCE.RegionInfoArchive\022"
  "\'\n\024final_dest_table_uid\030\006 \001(\0132\t.TSP.UUID"
  "\"=\n\022MergeSourceArchive\022\024\n\014coord_column\030\001"
  " \002(\r\022\021\n\tcoord_row\030\002 \002(\r\"\333\t\n\031FormulaRewri"
  "teSpecArchive\022A\n\014rewrite_type\030\001 \002(\0162+.TS"
  "CE.FormulaRewriteSpecArchive.RewriteType"
  "\022\034\n\ttable_uid\030\002 \001(\0132\t.TSP.UUID\022\'\n\024cond_s"
  "tyle_owner_uid\030\003 \001(\0132\t.TSP.UUID\022\037\n\014group"
  "_by_uid\030\004 \001(\0132\t.TSP.UUID\022C\n\030column_or_ro"
  "w_uuids_info\030\005 \001(\0132!.TSCE.ColumnOrRowUui"
  "dsInfoArchive\022G\n\034aux_column_or_row_uuids"
  "_info\030\006 \001(\0132!.TSCE.ColumnOrRowUuidsInfoA"
  "rchive\0227\n\021region_moved_info\030\007 \001(\0132\034.TSCE"
  ".RegionMovedInfoArchive\022,\n\013region_info\030\010"
  " \001(\0132\027.TSCE.RegionInfoArchive\022\?\n\025rewrite"
  "_table_id_info\030\t \001(\0132 .TSCE.RewriteTable"
  "UIDInfoArchive\022>\n\025transposed_table_info\030"
  "\n \001(\0132\037.TSCE.TableTransposeInfoArchive\022>"
  "\n\027merge_origin_moved_info\030\013 \001(\0132\035.TSCE.M"
  "ergeOriginMovedArchive\022.\n\014merge_source\030\014"
  " \001(\0132\030.TSCE.MergeSourceArchive\022=\n\017group_"
  "node_info\030\r \001(\0132$.TSCE.RewriteGroupNodeU"
  "IDInfoArchive\0222\n\016groupby_change\030\016 \001(\0132\032."
  "TSCE.GroupByChangeArchive\022\022\n\nis_inverse\030"
  "\017 \001(\010\"\245\003\n\013RewriteType\022\020\n\014DELETE_OWNER\020\004\022"
  "\023\n\017TRANSPOSE_TABLE\020\007\022\032\n\026REMOVE_COLUMNS_O"
  "R_ROWS\020\010\022\032\n\026INSERT_COLUMNS_OR_ROWS\020\t\022\030\n\024"
  "MOVE_COLUMNS_OR_ROWS\020\n\022\017\n\013MOVE_REGION\020\013\022"
  "\r\n\tSORT_ROWS\020\014\022\017\n\013MERGE_CELLS\020\r\022\024\n\020UNDO_"
  "MERGE_CELLS\020\016\022\031\n\025TABLE_ID_REASSIGNMENT\020\017"
  "\022\020\n\014INSERT_OWNER\020\020\022\026\n\022MERGE_ORIGIN_MOVED"
  "\020\021\022\020\n\014REORDER_ROWS\020\022\022\037\n\033GROUP_NODE_UID_R"
  "EASSIGNMENT\020\023\022\032\n\026BASE_TO_CHROME_REWRITE\020"
  "\024\022\032\n\026CHROME_TO_BASE_REWRITE\020\025\022\025\n\021GROUP_N"
  "ODE_CHANGE\020\026\022\017\n\013PASTED_AREA\020\027\"3\n\023Haunted"
  "OwnerArchive\022\034\n\towner_uid\030\001 \002(\0132\t.TSP.UU"
  "ID\"H\n\025CellCoordinateArchive\022\022\n\npackedDat"
  "a\030\001 \001(\007\022\016\n\006column\030\002 \001(\r\022\013\n\003row\030\003 \001(\r\"N\n\033"
  "CellCoordinateVectorArchive\022/\n\ncell_coor"
  "d\030\001 \003(\0132\033.TSCE.CellCoordinateArchive\"p\n "
  "ExpandedCellRefObjectPairArchive\022,\n\010cell"
  "_ref\030\001 \002(\0132\032.TSCE.CellReferenceArchive\022\036"
  "\n\006object\030\002 \002(\0132\016.TSP.Reference\"g\n\037Expand"
  "edCellRefObjectMapArchive\022D\n\024cell_ref_ob"
  "ject_pair\030\001 \003(\0132&.TSCE.ExpandedCellRefOb"
  "jectPairArchive\"\203\001\n\025FormulaAtCoordArchiv"
  "e\022\016\n\006column\030\001 \002(\r\022\013\n\003row\030\002 \002(\r\022%\n\007formul"
  "a\030\003 \001(\0132\024.TSCE.FormulaArchive\022&\n\027repeat_"
  "previous_formula\030\004 \001(\010:\005false\"\213\001\n\037Formul"
  "aCoordPairsByOwnerArchive\022\022\n\nowner_kind\030"
  "\001 \002(\r\022\034\n\towner_uid\030\002 \001(\0132\t.TSP.UUID\0226\n\021f"
  "ormula_at_coords\030\003 \003(\0132\033.TSCE.FormulaAtC"
  "oordArchive\"[\n\026FormulasForUndoArchive\022A\n"
  "\022formulas_for_owner\030\001 \003(\0132%.TSCE.Formula"
  "CoordPairsByOwnerArchive\"q\n\034FormulaRewri"
  "teCommandArchive\022-\n\025table_rewrite_comman"
  "d\030\001 \001(\0132\016.TSP.Reference\022\"\n\005super\030\002 \001(\0132\023"
  ".TSK.CommandArchive\"\305\001\n\"ExtendTableIDHis"
  "toryCommandArchive\022\"\n\005super\030\001 \002(\0132\023.TSK."
  "CommandArchive\0225\n\014rewrite_spec\030\002 \002(\0132\037.T"
  "SCE.FormulaRewriteSpecArchive\022D\n\032table_u"
  "id_history_rollback\030\003 \001(\0132 .TSCE.Rewrite"
  "TableUIDInfoArchive\"^\n!NumberTrackedRefe"
  "rencePairArchive\022\016\n\006number\030\001 \002(\r\022)\n\021trac"
  "ked_reference\030\002 \001(\0132\016.TSP.Reference\"t\n\"N"
  "umberToTrackedReferenceMapArchive\022N\n\035num"
  "ber_tracked_reference_pair\030\001 \003(\0132\'.TSCE."
  "NumberTrackedReferencePairArchive\"\263\002\n&Tr"
  "ackedReferencesRewriteCommandArchive\022U\n\037"
  "references_in_reference_tracker\030\001 \001(\0132(."
  "TSCE.NumberToTrackedReferenceMapArchiveB"
  "\002\030\001\022W\n!original_tracked_reference_copies"
  "\030\002 \001(\0132(.TSCE.NumberToTrackedReferenceMa"
  "pArchiveB\002\030\001\0225\n\014rewrite_spec\030\003 \001(\0132\037.TSC"
  "E.FormulaRewriteSpecArchive\022\"\n\005super\030\004 \002"
  "(\0132\023.TSK.CommandArchive\"U\n\027TrackedRefere"
  "nceArchive\022&\n\003ast\030\001 \002(\0132\031.TSCE.ASTNodeAr"
  "rayArchive\022\022\n\nformula_id\030\002 \002(\r\"v\n\037Expand"
  "edTrackedReferenceArchive\022&\n\003ast\030\001 \002(\0132\031"
  ".TSCE.ASTNodeArrayArchive\022\026\n\016formula_col"
  "umn\030\002 \002(\r\022\023\n\013formula_row\030\003 \002(\r\"\203\002\n\027Refer"
  "enceTrackerArchive\022 \n\004uuid\030\001 \002(\0132\022.TSP.C"
  "FUUIDArchive\022-\n\021tracked_reference\030\002 \003(\0132"
  "\016.TSP.ReferenceB\002\030\001\022B\n\033contained_tracked"
  "_reference\030\003 \003(\0132\035.TSCE.TrackedReference"
  "Archive\022S\n$contained_expanded_tracked_re"
  "ference\030\004 \003(\0132%.TSCE.ExpandedTrackedRefe"
  "renceArchive\"u\n\027BooleanCellValueArchive\022"
  "\r\n\005value\030\001 \002(\010\022(\n\006format\030\002 \001(\0132\030.TSK.For"
  "matStructArchive\022!\n\022format_is_explicit\030\003"
  " \001(\010:\005false\"\222\001\n\024DateCellValueArchive\022\r\n\005"
  "value\030\001 \002(\001\022(\n\006format\030\002 \002(\0132\030.TSK.Format"
  "StructArchive\022\036\n\022format_is_implicit\030\003 \001("
  "\010B\002\030\001\022!\n\022format_is_explicit\030\004 \001(\010:\005false"
  "\"\352\001\n\026NumberCellValueArchive\022\r\n\005value\030\001 \001"
  "(\001\022\022\n\nunit_index\030\002 \001(\005\022\025\n\rcurrency_code\030"
  "\005 \001(\t\022(\n\006format\030\003 \002(\0132\030.TSK.FormatStruct"
  "Archive\022\036\n\022format_is_implicit\030\004 \001(\010B\002\030\001\022"
  "!\n\022format_is_explicit\030\006 \001(\010:\005false\022\023\n\013de"
  "cimal_low\030\007 \001(\004\022\024\n\014decimal_high\030\010 \001(\004\"\325\001"
  "\n\026StringCellValueArchive\022\r\n\005value\030\001 \002(\t\022"
  "(\n\006format\030\002 \002(\0132\030.TSK.FormatStructArchiv"
  "e\022\036\n\022format_is_implicit\030\003 \001(\010B\002\030\001\022!\n\022for"
  "mat_is_explicit\030\004 \001(\010:\005false\022\027\n\010is_regex"
  "\030\005 \001(\010:\005false\022&\n\027is_case_sensitive_regex"
  "\030\006 \001(\010:\005false\"\315\003\n\025ErrorCellValueArchive\022"
  "9\n\nerror_type\030\001 \002(\0162%.TSCE.ErrorCellValu"
  "eArchive.ErrorType\022\026\n\016extra_info_int\030\003 \001"
  "(\005\022\031\n\021extra_info_string\030\004 \001(\t\022\031\n\021extra_i"
  "nfo_double\030\005 \001(\001\"\252\002\n\tErrorType\022\020\n\014Unknow"
  "nError\020\001\022\035\n\031InvalidLiveStockAttribute\020o\022"
  " \n\034InvalidLiveCurrencyAttribute\020p\022#\n\037Inv"
  "alidHistoricalStockAttribute\020q\022&\n\"Invali"
  "dHistoricalCurrencyAttribute\020r\022\031\n\025Invali"
  "dHistoricalDate\020s\022\030\n\024NoTradingInformatio"
  "n\020t\022\024\n\020InvalidStockCode\020u\022\027\n\023InvalidCurr"
  "encyPair\020v\022\031\n\025RemoteDataServerError\020w\"\263\003"
  "\n\020CellValueArchive\022=\n\017cell_value_type\030\001 "
  "\002(\0162$.TSCE.CellValueArchive.CellValueTyp"
  "e\0224\n\rboolean_value\030\002 \001(\0132\035.TSCE.BooleanC"
  "ellValueArchive\022.\n\ndate_value\030\003 \001(\0132\032.TS"
  "CE.DateCellValueArchive\0222\n\014number_value\030"
  "\004 \001(\0132\034.TSCE.NumberCellValueArchive\0222\n\014s"
  "tring_value\030\005 \001(\0132\034.TSCE.StringCellValue"
  "Archive\0220\n\013error_value\030\006 \001(\0132\033.TSCE.Erro"
  "rCellValueArchive\"`\n\rCellValueType\022\014\n\010NI"
  "L_TYPE\020\001\022\020\n\014BOOLEAN_TYPE\020\002\022\r\n\tDATE_TYPE\020"
  "\003\022\017\n\013NUMBER_TYPE\020\004\022\017\n\013STRING_TYPE\020\005*\366\001\n\017"
  "CategoryAggType\022\r\n\tAGGR_NONE\020\000\022\016\n\nAGGR_C"
  "OUNT\020\001\022\016\n\nAGGR_TOTAL\020\002\022\014\n\010AGGR_AVG\020\003\022\014\n\010"
  "AGGR_MIN\020\004\022\014\n\010AGGR_MAX\020\005\022!\n\035AGGR_CHARTGR"
  "OUPVALUEHIERARCHY\020\007\022\034\n\030AGGR_GROUPVALUEHI"
  "ERARCHY\020\010\022\023\n\017AGGR_GROUPVALUE\020\t\022\021\n\rAGGR_B"
  "ODYROWS\020\n\022\021\n\rAGGR_INDIRECT\020\013\022\016\n\nAGGR_LAB"
  "EL\020\014"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_TSCEArchives_2eproto_deps[2] = {
  &::descriptor_table_TSKArchives_2eproto,
  &::descriptor_table_TSPMessages_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_TSCEArchives_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_TSCEArchives_2eproto = {
  false, false, 30204, descriptor_table_protodef_TSCEArchives_2eproto, "TSCEArchives.proto", 
  &descriptor_table_TSCEArchives_2eproto_once, descriptor_table_TSCEArchives_2eproto_deps, 2, 144,
  schemas, file_default_instances, TableStruct_TSCEArchives_2eproto::offsets,
  file_level_metadata_TSCEArchives_2eproto, file_level_enum_descriptors_TSCEArchives_2eproto, file_level_service_descriptors_TSCEArchives_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_TSCEArchives_2eproto_getter() {
  return &descriptor_table_TSCEArchives_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_TSCEArchives_2eproto(&descriptor_table_TSCEArchives_2eproto);
namespace TSCE {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReferenceArchive_ReferenceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSCEArchives_2eproto);
  return file_level_enum_descriptors_TSCEArchives_2eproto[0];
}
bool ReferenceArchive_ReferenceType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ReferenceArchive_ReferenceType ReferenceArchive::CELL_REFERENCE;
constexpr ReferenceArchive_ReferenceType ReferenceArchive::RANGE_REFERENCE;
constexpr ReferenceArchive_ReferenceType ReferenceArchive::NAME_DEPENDENCY;
constexpr ReferenceArchive_ReferenceType ReferenceArchive::ReferenceType_MIN;
constexpr ReferenceArchive_ReferenceType ReferenceArchive::ReferenceType_MAX;
constexpr int ReferenceArchive::ReferenceType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SpanningDependenciesArchive_RangeContext_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSCEArchives_2eproto);
  return file_level_enum_descriptors_TSCEArchives_2eproto[1];
}
bool SpanningDependenciesArchive_RangeContext_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SpanningDependenciesArchive_RangeContext SpanningDependenciesArchive::DEFAULT;
constexpr SpanningDependenciesArchive_RangeContext SpanningDependenciesArchive::INCLUDE_HEADERS;
constexpr SpanningDependenciesArchive_RangeContext SpanningDependenciesArchive::RangeContext_MIN;
constexpr SpanningDependenciesArchive_RangeContext SpanningDependenciesArchive::RangeContext_MAX;
constexpr int SpanningDependenciesArchive::RangeContext_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SpanningDependenciesExpandedArchive_RangeContext_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSCEArchives_2eproto);
  return file_level_enum_descriptors_TSCEArchives_2eproto[2];
}
bool SpanningDependenciesExpandedArchive_RangeContext_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SpanningDependenciesExpandedArchive_RangeContext SpanningDependenciesExpandedArchive::DEFAULT;
constexpr SpanningDependenciesExpandedArchive_RangeContext SpanningDependenciesExpandedArchive::INCLUDE_HEADERS;
constexpr SpanningDependenciesExpandedArchive_RangeContext SpanningDependenciesExpandedArchive::RangeContext_MIN;
constexpr SpanningDependenciesExpandedArchive_RangeContext SpanningDependenciesExpandedArchive::RangeContext_MAX;
constexpr int SpanningDependenciesExpandedArchive::RangeContext_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CellErrorsArchive_ErrorFlavor_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSCEArchives_2eproto);
  return file_level_enum_descriptors_TSCEArchives_2eproto[3];
}
bool CellErrorsArchive_ErrorFlavor_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CellErrorsArchive_ErrorFlavor CellErrorsArchive::NONE;
constexpr CellErrorsArchive_ErrorFlavor CellErrorsArchive::ERROR;
constexpr CellErrorsArchive_ErrorFlavor CellErrorsArchive::REF_ERROR;
constexpr CellErrorsArchive_ErrorFlavor CellErrorsArchive::CIRCULAR_REF_ERROR;
constexpr CellErrorsArchive_ErrorFlavor CellErrorsArchive::UNSUPPORTED_FUNCTION_ERROR;
constexpr CellErrorsArchive_ErrorFlavor CellErrorsArchive::ErrorFlavor_MIN;
constexpr CellErrorsArchive_ErrorFlavor CellErrorsArchive::ErrorFlavor_MAX;
constexpr int CellErrorsArchive::ErrorFlavor_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CalculationEngineArchive_ExcelImportDateMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSCEArchives_2eproto);
  return file_level_enum_descriptors_TSCEArchives_2eproto[4];
}
bool CalculationEngineArchive_ExcelImportDateMode_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CalculationEngineArchive_ExcelImportDateMode CalculationEngineArchive::DATE_MODE_1900;
constexpr CalculationEngineArchive_ExcelImportDateMode CalculationEngineArchive::DATE_MODE_1900_LEGACY;
constexpr CalculationEngineArchive_ExcelImportDateMode CalculationEngineArchive::DATE_MODE_1904_LEGACY;
constexpr CalculationEngineArchive_ExcelImportDateMode CalculationEngineArchive::ExcelImportDateMode_MIN;
constexpr CalculationEngineArchive_ExcelImportDateMode CalculationEngineArchive::ExcelImportDateMode_MAX;
constexpr int CalculationEngineArchive::ExcelImportDateMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ASTNodeArrayArchive_ASTNodeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSCEArchives_2eproto);
  return file_level_enum_descriptors_TSCEArchives_2eproto[5];
}
bool ASTNodeArrayArchive_ASTNodeType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 45:
    case 46:
    case 48:
    case 52:
    case 53:
    case 54:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::ADDITION_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::SUBTRACTION_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::MULTIPLICATION_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::DIVISION_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::POWER_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::CONCATENATION_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::GREATER_THAN_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::GREATER_THAN_OR_EQUAL_TO_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::LESS_THAN_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::LESS_THAN_OR_EQUAL_TO_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::EQUAL_TO_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::NOT_EQUAL_TO_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::NEGATION_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::PLUS_SIGN_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::PERCENT_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::FUNCTION_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::NUMBER_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::BOOLEAN_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::STRING_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::DATE_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::DURATION_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::EMPTY_ARGUMENT_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::TOKEN_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::ARRAY_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::LIST_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::THUNK_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::LOCAL_CELL_REFERENCE_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::CROSS_TABLE_CELL_REFERENCE_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::COLON_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::REFERENCE_ERROR_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::UNKNOWN_FUNCTION_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::APPEND_WHITESPACE_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::PREPEND_WHITESPACE_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::BEGIN_EMBEDDED_NODE_ARRAY;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::END_THUNK_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::CELL_REFERENCE_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::COLON_NODE_WITH_UIDS;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::REFERENCE_ERROR_WITH_UIDS;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::UID_REFERENCE_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::LET_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::LET_VAR_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::LET_END_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::LINKED_CELL_REF_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::LINKED_COLUMN_REF_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::LINKED_ROW_REF_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::CATEGORY_REF_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::COLON_TRACT_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::ASTNodeType_MIN;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::ASTNodeType_MAX;
constexpr int ASTNodeArrayArchive::ASTNodeType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ASTNodeArrayArchive_ASTUidTractPurpose_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSCEArchives_2eproto);
  return file_level_enum_descriptors_TSCEArchives_2eproto[6];
}
bool ASTNodeArrayArchive_ASTUidTractPurpose_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ASTNodeArrayArchive_ASTUidTractPurpose ASTNodeArrayArchive::UIDS_INCLUDED;
constexpr ASTNodeArrayArchive_ASTUidTractPurpose ASTNodeArrayArchive::UIDS_PREMERGE;
constexpr ASTNodeArrayArchive_ASTUidTractPurpose ASTNodeArrayArchive::UIDS_PREMOVEREGION;
constexpr ASTNodeArrayArchive_ASTUidTractPurpose ASTNodeArrayArchive::UIDS_EXCLUDED;
constexpr ASTNodeArrayArchive_ASTUidTractPurpose ASTNodeArrayArchive::UIDS_ACTIVE;
constexpr ASTNodeArrayArchive_ASTUidTractPurpose ASTNodeArrayArchive::UIDS_PREMERGE_TOPLEFT;
constexpr ASTNodeArrayArchive_ASTUidTractPurpose ASTNodeArrayArchive::UIDS_REMOVED_BY_MOVE;
constexpr ASTNodeArrayArchive_ASTUidTractPurpose ASTNodeArrayArchive::ASTUidTractPurpose_MIN;
constexpr ASTNodeArrayArchive_ASTUidTractPurpose ASTNodeArrayArchive::ASTUidTractPurpose_MAX;
constexpr int ASTNodeArrayArchive::ASTUidTractPurpose_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GroupByChangeArchive_ChangeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSCEArchives_2eproto);
  return file_level_enum_descriptors_TSCEArchives_2eproto[7];
}
bool GroupByChangeArchive_ChangeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr GroupByChangeArchive_ChangeType GroupByChangeArchive::NONE;
constexpr GroupByChangeArchive_ChangeType GroupByChangeArchive::GROUP_VALUE_CHANGE;
constexpr GroupByChangeArchive_ChangeType GroupByChangeArchive::GROUP_DEFINITION_CHANGE;
constexpr GroupByChangeArchive_ChangeType GroupByChangeArchive::REMOVE_GROUP_LEVEL;
constexpr GroupByChangeArchive_ChangeType GroupByChangeArchive::ADD_GROUP_LEVEL;
constexpr GroupByChangeArchive_ChangeType GroupByChangeArchive::PROMOTE;
constexpr GroupByChangeArchive_ChangeType GroupByChangeArchive::DEMOTE;
constexpr GroupByChangeArchive_ChangeType GroupByChangeArchive::ChangeType_MIN;
constexpr GroupByChangeArchive_ChangeType GroupByChangeArchive::ChangeType_MAX;
constexpr int GroupByChangeArchive::ChangeType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FormulaRewriteSpecArchive_RewriteType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSCEArchives_2eproto);
  return file_level_enum_descriptors_TSCEArchives_2eproto[8];
}
bool FormulaRewriteSpecArchive_RewriteType_IsValid(int value) {
  switch (value) {
    case 4:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr FormulaRewriteSpecArchive_RewriteType FormulaRewriteSpecArchive::DELETE_OWNER;
constexpr FormulaRewriteSpecArchive_RewriteType FormulaRewriteSpecArchive::TRANSPOSE_TABLE;
constexpr FormulaRewriteSpecArchive_RewriteType FormulaRewriteSpecArchive::REMOVE_COLUMNS_OR_ROWS;
constexpr FormulaRewriteSpecArchive_RewriteType FormulaRewriteSpecArchive::INSERT_COLUMNS_OR_ROWS;
constexpr FormulaRewriteSpecArchive_RewriteType FormulaRewriteSpecArchive::MOVE_COLUMNS_OR_ROWS;
constexpr FormulaRewriteSpecArchive_RewriteType FormulaRewriteSpecArchive::MOVE_REGION;
constexpr FormulaRewriteSpecArchive_RewriteType FormulaRewriteSpecArchive::SORT_ROWS;
constexpr FormulaRewriteSpecArchive_RewriteType FormulaRewriteSpecArchive::MERGE_CELLS;
constexpr FormulaRewriteSpecArchive_RewriteType FormulaRewriteSpecArchive::UNDO_MERGE_CELLS;
constexpr FormulaRewriteSpecArchive_RewriteType FormulaRewriteSpecArchive::TABLE_ID_REASSIGNMENT;
constexpr FormulaRewriteSpecArchive_RewriteType FormulaRewriteSpecArchive::INSERT_OWNER;
constexpr FormulaRewriteSpecArchive_RewriteType FormulaRewriteSpecArchive::MERGE_ORIGIN_MOVED;
constexpr FormulaRewriteSpecArchive_RewriteType FormulaRewriteSpecArchive::REORDER_ROWS;
constexpr FormulaRewriteSpecArchive_RewriteType FormulaRewriteSpecArchive::GROUP_NODE_UID_REASSIGNMENT;
constexpr FormulaRewriteSpecArchive_RewriteType FormulaRewriteSpecArchive::BASE_TO_CHROME_REWRITE;
constexpr FormulaRewriteSpecArchive_RewriteType FormulaRewriteSpecArchive::CHROME_TO_BASE_REWRITE;
constexpr FormulaRewriteSpecArchive_RewriteType FormulaRewriteSpecArchive::GROUP_NODE_CHANGE;
constexpr FormulaRewriteSpecArchive_RewriteType FormulaRewriteSpecArchive::PASTED_AREA;
constexpr FormulaRewriteSpecArchive_RewriteType FormulaRewriteSpecArchive::RewriteType_MIN;
constexpr FormulaRewriteSpecArchive_RewriteType FormulaRewriteSpecArchive::RewriteType_MAX;
constexpr int FormulaRewriteSpecArchive::RewriteType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ErrorCellValueArchive_ErrorType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSCEArchives_2eproto);
  return file_level_enum_descriptors_TSCEArchives_2eproto[9];
}
bool ErrorCellValueArchive_ErrorType_IsValid(int value) {
  switch (value) {
    case 1:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ErrorCellValueArchive_ErrorType ErrorCellValueArchive::UnknownError;
constexpr ErrorCellValueArchive_ErrorType ErrorCellValueArchive::InvalidLiveStockAttribute;
constexpr ErrorCellValueArchive_ErrorType ErrorCellValueArchive::InvalidLiveCurrencyAttribute;
constexpr ErrorCellValueArchive_ErrorType ErrorCellValueArchive::InvalidHistoricalStockAttribute;
constexpr ErrorCellValueArchive_ErrorType ErrorCellValueArchive::InvalidHistoricalCurrencyAttribute;
constexpr ErrorCellValueArchive_ErrorType ErrorCellValueArchive::InvalidHistoricalDate;
constexpr ErrorCellValueArchive_ErrorType ErrorCellValueArchive::NoTradingInformation;
constexpr ErrorCellValueArchive_ErrorType ErrorCellValueArchive::InvalidStockCode;
constexpr ErrorCellValueArchive_ErrorType ErrorCellValueArchive::InvalidCurrencyPair;
constexpr ErrorCellValueArchive_ErrorType ErrorCellValueArchive::RemoteDataServerError;
constexpr ErrorCellValueArchive_ErrorType ErrorCellValueArchive::ErrorType_MIN;
constexpr ErrorCellValueArchive_ErrorType ErrorCellValueArchive::ErrorType_MAX;
constexpr int ErrorCellValueArchive::ErrorType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CellValueArchive_CellValueType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSCEArchives_2eproto);
  return file_level_enum_descriptors_TSCEArchives_2eproto[10];
}
bool CellValueArchive_CellValueType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CellValueArchive_CellValueType CellValueArchive::NIL_TYPE;
constexpr CellValueArchive_CellValueType CellValueArchive::BOOLEAN_TYPE;
constexpr CellValueArchive_CellValueType CellValueArchive::DATE_TYPE;
constexpr CellValueArchive_CellValueType CellValueArchive::NUMBER_TYPE;
constexpr CellValueArchive_CellValueType CellValueArchive::STRING_TYPE;
constexpr CellValueArchive_CellValueType CellValueArchive::CellValueType_MIN;
constexpr CellValueArchive_CellValueType CellValueArchive::CellValueType_MAX;
constexpr int CellValueArchive::CellValueType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CategoryAggType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSCEArchives_2eproto);
  return file_level_enum_descriptors_TSCEArchives_2eproto[11];
}
bool CategoryAggType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CellReferenceArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CellReferenceArchive>()._has_bits_);
  static void set_has_column(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_row(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::CFUUIDArchive& table_id(const CellReferenceArchive* msg);
  static void set_has_table_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::TSP::CFUUIDArchive&
CellReferenceArchive::_Internal::table_id(const CellReferenceArchive* msg) {
  return *msg->table_id_;
}
void CellReferenceArchive::clear_table_id() {
  if (table_id_ != nullptr) table_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
CellReferenceArchive::CellReferenceArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.CellReferenceArchive)
}
CellReferenceArchive::CellReferenceArchive(const CellReferenceArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_table_id()) {
    table_id_ = new ::TSP::CFUUIDArchive(*from.table_id_);
  } else {
    table_id_ = nullptr;
  }
  ::memcpy(&column_, &from.column_,
    static_cast<size_t>(reinterpret_cast<char*>(&row_) -
    reinterpret_cast<char*>(&column_)) + sizeof(row_));
  // @@protoc_insertion_point(copy_constructor:TSCE.CellReferenceArchive)
}

void CellReferenceArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&table_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&row_) -
    reinterpret_cast<char*>(&table_id_)) + sizeof(row_));
}

CellReferenceArchive::~CellReferenceArchive() {
  // @@protoc_insertion_point(destructor:TSCE.CellReferenceArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CellReferenceArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete table_id_;
}

void CellReferenceArchive::ArenaDtor(void* object) {
  CellReferenceArchive* _this = reinterpret_cast< CellReferenceArchive* >(object);
  (void)_this;
}
void CellReferenceArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CellReferenceArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CellReferenceArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.CellReferenceArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(table_id_ != nullptr);
    table_id_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&column_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&row_) -
        reinterpret_cast<char*>(&column_)) + sizeof(row_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CellReferenceArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 column = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_column(&has_bits);
          column_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 row = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_row(&has_bits);
          row_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.CFUUIDArchive table_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CellReferenceArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.CellReferenceArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 column = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_column(), target);
  }

  // required uint32 row = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_row(), target);
  }

  // required .TSP.CFUUIDArchive table_id = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::table_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.CellReferenceArchive)
  return target;
}

size_t CellReferenceArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.CellReferenceArchive)
  size_t total_size = 0;

  if (_internal_has_table_id()) {
    // required .TSP.CFUUIDArchive table_id = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *table_id_);
  }

  if (_internal_has_column()) {
    // required uint32 column = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_column());
  }

  if (_internal_has_row()) {
    // required uint32 row = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_row());
  }

  return total_size;
}
size_t CellReferenceArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.CellReferenceArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .TSP.CFUUIDArchive table_id = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *table_id_);

    // required uint32 column = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_column());

    // required uint32 row = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_row());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CellReferenceArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.CellReferenceArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const CellReferenceArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CellReferenceArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.CellReferenceArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.CellReferenceArchive)
    MergeFrom(*source);
  }
}

void CellReferenceArchive::MergeFrom(const CellReferenceArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.CellReferenceArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_table_id()->::TSP::CFUUIDArchive::MergeFrom(from._internal_table_id());
    }
    if (cached_has_bits & 0x00000002u) {
      column_ = from.column_;
    }
    if (cached_has_bits & 0x00000004u) {
      row_ = from.row_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CellReferenceArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.CellReferenceArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CellReferenceArchive::CopyFrom(const CellReferenceArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.CellReferenceArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellReferenceArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void CellReferenceArchive::InternalSwap(CellReferenceArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CellReferenceArchive, row_)
      + sizeof(CellReferenceArchive::row_)
      - PROTOBUF_FIELD_OFFSET(CellReferenceArchive, table_id_)>(
          reinterpret_cast<char*>(&table_id_),
          reinterpret_cast<char*>(&other->table_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CellReferenceArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[0]);
}

// ===================================================================

class InternalCellReferenceArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<InternalCellReferenceArchive>()._has_bits_);
  static const ::TSCE::CellCoordinateArchive& coordinate(const InternalCellReferenceArchive* msg);
  static void set_has_coordinate(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_owner_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSCE::CellCoordinateArchive&
InternalCellReferenceArchive::_Internal::coordinate(const InternalCellReferenceArchive* msg) {
  return *msg->coordinate_;
}
InternalCellReferenceArchive::InternalCellReferenceArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.InternalCellReferenceArchive)
}
InternalCellReferenceArchive::InternalCellReferenceArchive(const InternalCellReferenceArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_coordinate()) {
    coordinate_ = new ::TSCE::CellCoordinateArchive(*from.coordinate_);
  } else {
    coordinate_ = nullptr;
  }
  owner_id_ = from.owner_id_;
  // @@protoc_insertion_point(copy_constructor:TSCE.InternalCellReferenceArchive)
}

void InternalCellReferenceArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&coordinate_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&owner_id_) -
    reinterpret_cast<char*>(&coordinate_)) + sizeof(owner_id_));
}

InternalCellReferenceArchive::~InternalCellReferenceArchive() {
  // @@protoc_insertion_point(destructor:TSCE.InternalCellReferenceArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InternalCellReferenceArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete coordinate_;
}

void InternalCellReferenceArchive::ArenaDtor(void* object) {
  InternalCellReferenceArchive* _this = reinterpret_cast< InternalCellReferenceArchive* >(object);
  (void)_this;
}
void InternalCellReferenceArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InternalCellReferenceArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InternalCellReferenceArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.InternalCellReferenceArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(coordinate_ != nullptr);
    coordinate_->Clear();
  }
  owner_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InternalCellReferenceArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCE.CellCoordinateArchive coordinate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_coordinate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 owner_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_owner_id(&has_bits);
          owner_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InternalCellReferenceArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.InternalCellReferenceArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSCE.CellCoordinateArchive coordinate = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::coordinate(this), target, stream);
  }

  // required uint32 owner_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_owner_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.InternalCellReferenceArchive)
  return target;
}

size_t InternalCellReferenceArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.InternalCellReferenceArchive)
  size_t total_size = 0;

  if (_internal_has_coordinate()) {
    // required .TSCE.CellCoordinateArchive coordinate = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *coordinate_);
  }

  if (_internal_has_owner_id()) {
    // required uint32 owner_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_owner_id());
  }

  return total_size;
}
size_t InternalCellReferenceArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.InternalCellReferenceArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSCE.CellCoordinateArchive coordinate = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *coordinate_);

    // required uint32 owner_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_owner_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InternalCellReferenceArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.InternalCellReferenceArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const InternalCellReferenceArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InternalCellReferenceArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.InternalCellReferenceArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.InternalCellReferenceArchive)
    MergeFrom(*source);
  }
}

void InternalCellReferenceArchive::MergeFrom(const InternalCellReferenceArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.InternalCellReferenceArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_coordinate()->::TSCE::CellCoordinateArchive::MergeFrom(from._internal_coordinate());
    }
    if (cached_has_bits & 0x00000002u) {
      owner_id_ = from.owner_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void InternalCellReferenceArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.InternalCellReferenceArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InternalCellReferenceArchive::CopyFrom(const InternalCellReferenceArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.InternalCellReferenceArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InternalCellReferenceArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void InternalCellReferenceArchive::InternalSwap(InternalCellReferenceArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InternalCellReferenceArchive, owner_id_)
      + sizeof(InternalCellReferenceArchive::owner_id_)
      - PROTOBUF_FIELD_OFFSET(InternalCellReferenceArchive, coordinate_)>(
          reinterpret_cast<char*>(&coordinate_),
          reinterpret_cast<char*>(&other->coordinate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InternalCellReferenceArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[1]);
}

// ===================================================================

class RangeReferenceArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<RangeReferenceArchive>()._has_bits_);
  static const ::TSP::CFUUIDArchive& table_id(const RangeReferenceArchive* msg);
  static void set_has_table_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_top_left_column(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_top_left_row(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_bottom_right_column(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_bottom_right_row(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001f) ^ 0x0000001f) != 0;
  }
};

const ::TSP::CFUUIDArchive&
RangeReferenceArchive::_Internal::table_id(const RangeReferenceArchive* msg) {
  return *msg->table_id_;
}
void RangeReferenceArchive::clear_table_id() {
  if (table_id_ != nullptr) table_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
RangeReferenceArchive::RangeReferenceArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.RangeReferenceArchive)
}
RangeReferenceArchive::RangeReferenceArchive(const RangeReferenceArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_table_id()) {
    table_id_ = new ::TSP::CFUUIDArchive(*from.table_id_);
  } else {
    table_id_ = nullptr;
  }
  ::memcpy(&top_left_column_, &from.top_left_column_,
    static_cast<size_t>(reinterpret_cast<char*>(&bottom_right_row_) -
    reinterpret_cast<char*>(&top_left_column_)) + sizeof(bottom_right_row_));
  // @@protoc_insertion_point(copy_constructor:TSCE.RangeReferenceArchive)
}

void RangeReferenceArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&table_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&bottom_right_row_) -
    reinterpret_cast<char*>(&table_id_)) + sizeof(bottom_right_row_));
}

RangeReferenceArchive::~RangeReferenceArchive() {
  // @@protoc_insertion_point(destructor:TSCE.RangeReferenceArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RangeReferenceArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete table_id_;
}

void RangeReferenceArchive::ArenaDtor(void* object) {
  RangeReferenceArchive* _this = reinterpret_cast< RangeReferenceArchive* >(object);
  (void)_this;
}
void RangeReferenceArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RangeReferenceArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RangeReferenceArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.RangeReferenceArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(table_id_ != nullptr);
    table_id_->Clear();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&top_left_column_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bottom_right_row_) -
        reinterpret_cast<char*>(&top_left_column_)) + sizeof(bottom_right_row_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RangeReferenceArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.CFUUIDArchive table_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 top_left_column = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_top_left_column(&has_bits);
          top_left_column_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 top_left_row = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_top_left_row(&has_bits);
          top_left_row_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 bottom_right_column = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_bottom_right_column(&has_bits);
          bottom_right_column_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 bottom_right_row = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_bottom_right_row(&has_bits);
          bottom_right_row_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RangeReferenceArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.RangeReferenceArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSP.CFUUIDArchive table_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::table_id(this), target, stream);
  }

  // required uint32 top_left_column = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_top_left_column(), target);
  }

  // required uint32 top_left_row = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_top_left_row(), target);
  }

  // required uint32 bottom_right_column = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_bottom_right_column(), target);
  }

  // required uint32 bottom_right_row = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_bottom_right_row(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.RangeReferenceArchive)
  return target;
}

size_t RangeReferenceArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.RangeReferenceArchive)
  size_t total_size = 0;

  if (_internal_has_table_id()) {
    // required .TSP.CFUUIDArchive table_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *table_id_);
  }

  if (_internal_has_top_left_column()) {
    // required uint32 top_left_column = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_top_left_column());
  }

  if (_internal_has_top_left_row()) {
    // required uint32 top_left_row = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_top_left_row());
  }

  if (_internal_has_bottom_right_column()) {
    // required uint32 bottom_right_column = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_bottom_right_column());
  }

  if (_internal_has_bottom_right_row()) {
    // required uint32 bottom_right_row = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_bottom_right_row());
  }

  return total_size;
}
size_t RangeReferenceArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.RangeReferenceArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required .TSP.CFUUIDArchive table_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *table_id_);

    // required uint32 top_left_column = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_top_left_column());

    // required uint32 top_left_row = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_top_left_row());

    // required uint32 bottom_right_column = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_bottom_right_column());

    // required uint32 bottom_right_row = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_bottom_right_row());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RangeReferenceArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.RangeReferenceArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const RangeReferenceArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RangeReferenceArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.RangeReferenceArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.RangeReferenceArchive)
    MergeFrom(*source);
  }
}

void RangeReferenceArchive::MergeFrom(const RangeReferenceArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.RangeReferenceArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_table_id()->::TSP::CFUUIDArchive::MergeFrom(from._internal_table_id());
    }
    if (cached_has_bits & 0x00000002u) {
      top_left_column_ = from.top_left_column_;
    }
    if (cached_has_bits & 0x00000004u) {
      top_left_row_ = from.top_left_row_;
    }
    if (cached_has_bits & 0x00000008u) {
      bottom_right_column_ = from.bottom_right_column_;
    }
    if (cached_has_bits & 0x00000010u) {
      bottom_right_row_ = from.bottom_right_row_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RangeReferenceArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.RangeReferenceArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RangeReferenceArchive::CopyFrom(const RangeReferenceArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.RangeReferenceArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RangeReferenceArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void RangeReferenceArchive::InternalSwap(RangeReferenceArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RangeReferenceArchive, bottom_right_row_)
      + sizeof(RangeReferenceArchive::bottom_right_row_)
      - PROTOBUF_FIELD_OFFSET(RangeReferenceArchive, table_id_)>(
          reinterpret_cast<char*>(&table_id_),
          reinterpret_cast<char*>(&other->table_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RangeReferenceArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[2]);
}

// ===================================================================

class InternalRangeReferenceArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<InternalRangeReferenceArchive>()._has_bits_);
  static void set_has_owner_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSCE::RangeCoordinateArchive& range(const InternalRangeReferenceArchive* msg);
  static void set_has_range(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSCE::RangeCoordinateArchive&
InternalRangeReferenceArchive::_Internal::range(const InternalRangeReferenceArchive* msg) {
  return *msg->range_;
}
InternalRangeReferenceArchive::InternalRangeReferenceArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.InternalRangeReferenceArchive)
}
InternalRangeReferenceArchive::InternalRangeReferenceArchive(const InternalRangeReferenceArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_range()) {
    range_ = new ::TSCE::RangeCoordinateArchive(*from.range_);
  } else {
    range_ = nullptr;
  }
  owner_id_ = from.owner_id_;
  // @@protoc_insertion_point(copy_constructor:TSCE.InternalRangeReferenceArchive)
}

void InternalRangeReferenceArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&range_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&owner_id_) -
    reinterpret_cast<char*>(&range_)) + sizeof(owner_id_));
}

InternalRangeReferenceArchive::~InternalRangeReferenceArchive() {
  // @@protoc_insertion_point(destructor:TSCE.InternalRangeReferenceArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InternalRangeReferenceArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete range_;
}

void InternalRangeReferenceArchive::ArenaDtor(void* object) {
  InternalRangeReferenceArchive* _this = reinterpret_cast< InternalRangeReferenceArchive* >(object);
  (void)_this;
}
void InternalRangeReferenceArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InternalRangeReferenceArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InternalRangeReferenceArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.InternalRangeReferenceArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(range_ != nullptr);
    range_->Clear();
  }
  owner_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InternalRangeReferenceArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 owner_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_owner_id(&has_bits);
          owner_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSCE.RangeCoordinateArchive range = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_range(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InternalRangeReferenceArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.InternalRangeReferenceArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 owner_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_owner_id(), target);
  }

  // required .TSCE.RangeCoordinateArchive range = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::range(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.InternalRangeReferenceArchive)
  return target;
}

size_t InternalRangeReferenceArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.InternalRangeReferenceArchive)
  size_t total_size = 0;

  if (_internal_has_range()) {
    // required .TSCE.RangeCoordinateArchive range = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *range_);
  }

  if (_internal_has_owner_id()) {
    // required uint32 owner_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_owner_id());
  }

  return total_size;
}
size_t InternalRangeReferenceArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.InternalRangeReferenceArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSCE.RangeCoordinateArchive range = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *range_);

    // required uint32 owner_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_owner_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InternalRangeReferenceArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.InternalRangeReferenceArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const InternalRangeReferenceArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InternalRangeReferenceArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.InternalRangeReferenceArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.InternalRangeReferenceArchive)
    MergeFrom(*source);
  }
}

void InternalRangeReferenceArchive::MergeFrom(const InternalRangeReferenceArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.InternalRangeReferenceArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_range()->::TSCE::RangeCoordinateArchive::MergeFrom(from._internal_range());
    }
    if (cached_has_bits & 0x00000002u) {
      owner_id_ = from.owner_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void InternalRangeReferenceArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.InternalRangeReferenceArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InternalRangeReferenceArchive::CopyFrom(const InternalRangeReferenceArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.InternalRangeReferenceArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InternalRangeReferenceArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_range()) {
    if (!range_->IsInitialized()) return false;
  }
  return true;
}

void InternalRangeReferenceArchive::InternalSwap(InternalRangeReferenceArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InternalRangeReferenceArchive, owner_id_)
      + sizeof(InternalRangeReferenceArchive::owner_id_)
      - PROTOBUF_FIELD_OFFSET(InternalRangeReferenceArchive, range_)>(
          reinterpret_cast<char*>(&range_),
          reinterpret_cast<char*>(&other->range_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InternalRangeReferenceArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[3]);
}

// ===================================================================

class IndexSetArchive_IndexSetEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<IndexSetArchive_IndexSetEntry>()._has_bits_);
  static void set_has_range_begin(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_range_end(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

IndexSetArchive_IndexSetEntry::IndexSetArchive_IndexSetEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.IndexSetArchive.IndexSetEntry)
}
IndexSetArchive_IndexSetEntry::IndexSetArchive_IndexSetEntry(const IndexSetArchive_IndexSetEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&range_begin_, &from.range_begin_,
    static_cast<size_t>(reinterpret_cast<char*>(&range_end_) -
    reinterpret_cast<char*>(&range_begin_)) + sizeof(range_end_));
  // @@protoc_insertion_point(copy_constructor:TSCE.IndexSetArchive.IndexSetEntry)
}

void IndexSetArchive_IndexSetEntry::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&range_begin_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&range_end_) -
    reinterpret_cast<char*>(&range_begin_)) + sizeof(range_end_));
}

IndexSetArchive_IndexSetEntry::~IndexSetArchive_IndexSetEntry() {
  // @@protoc_insertion_point(destructor:TSCE.IndexSetArchive.IndexSetEntry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IndexSetArchive_IndexSetEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void IndexSetArchive_IndexSetEntry::ArenaDtor(void* object) {
  IndexSetArchive_IndexSetEntry* _this = reinterpret_cast< IndexSetArchive_IndexSetEntry* >(object);
  (void)_this;
}
void IndexSetArchive_IndexSetEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IndexSetArchive_IndexSetEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IndexSetArchive_IndexSetEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.IndexSetArchive.IndexSetEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&range_begin_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&range_end_) -
        reinterpret_cast<char*>(&range_begin_)) + sizeof(range_end_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IndexSetArchive_IndexSetEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 range_begin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_range_begin(&has_bits);
          range_begin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 range_end = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_range_end(&has_bits);
          range_end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IndexSetArchive_IndexSetEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.IndexSetArchive.IndexSetEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 range_begin = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_range_begin(), target);
  }

  // optional int32 range_end = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_range_end(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.IndexSetArchive.IndexSetEntry)
  return target;
}

size_t IndexSetArchive_IndexSetEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.IndexSetArchive.IndexSetEntry)
  size_t total_size = 0;

  // required int32 range_begin = 1;
  if (_internal_has_range_begin()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_range_begin());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 range_end = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_range_end());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IndexSetArchive_IndexSetEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.IndexSetArchive.IndexSetEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const IndexSetArchive_IndexSetEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IndexSetArchive_IndexSetEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.IndexSetArchive.IndexSetEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.IndexSetArchive.IndexSetEntry)
    MergeFrom(*source);
  }
}

void IndexSetArchive_IndexSetEntry::MergeFrom(const IndexSetArchive_IndexSetEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.IndexSetArchive.IndexSetEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      range_begin_ = from.range_begin_;
    }
    if (cached_has_bits & 0x00000002u) {
      range_end_ = from.range_end_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void IndexSetArchive_IndexSetEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.IndexSetArchive.IndexSetEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndexSetArchive_IndexSetEntry::CopyFrom(const IndexSetArchive_IndexSetEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.IndexSetArchive.IndexSetEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndexSetArchive_IndexSetEntry::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void IndexSetArchive_IndexSetEntry::InternalSwap(IndexSetArchive_IndexSetEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IndexSetArchive_IndexSetEntry, range_end_)
      + sizeof(IndexSetArchive_IndexSetEntry::range_end_)
      - PROTOBUF_FIELD_OFFSET(IndexSetArchive_IndexSetEntry, range_begin_)>(
          reinterpret_cast<char*>(&range_begin_),
          reinterpret_cast<char*>(&other->range_begin_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IndexSetArchive_IndexSetEntry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[4]);
}

// ===================================================================

class IndexSetArchive::_Internal {
 public:
};

IndexSetArchive::IndexSetArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  entries_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.IndexSetArchive)
}
IndexSetArchive::IndexSetArchive(const IndexSetArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSCE.IndexSetArchive)
}

void IndexSetArchive::SharedCtor() {
}

IndexSetArchive::~IndexSetArchive() {
  // @@protoc_insertion_point(destructor:TSCE.IndexSetArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IndexSetArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void IndexSetArchive::ArenaDtor(void* object) {
  IndexSetArchive* _this = reinterpret_cast< IndexSetArchive* >(object);
  (void)_this;
}
void IndexSetArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IndexSetArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IndexSetArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.IndexSetArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IndexSetArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSCE.IndexSetArchive.IndexSetEntry entries = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IndexSetArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.IndexSetArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSCE.IndexSetArchive.IndexSetEntry entries = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_entries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_entries(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.IndexSetArchive)
  return target;
}

size_t IndexSetArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.IndexSetArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.IndexSetArchive.IndexSetEntry entries = 1;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IndexSetArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.IndexSetArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const IndexSetArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IndexSetArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.IndexSetArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.IndexSetArchive)
    MergeFrom(*source);
  }
}

void IndexSetArchive::MergeFrom(const IndexSetArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.IndexSetArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
}

void IndexSetArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.IndexSetArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndexSetArchive::CopyFrom(const IndexSetArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.IndexSetArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndexSetArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(entries_)) return false;
  return true;
}

void IndexSetArchive::InternalSwap(IndexSetArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  entries_.InternalSwap(&other->entries_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IndexSetArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[5]);
}

// ===================================================================

class CellCoordSetArchive_ColumnEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<CellCoordSetArchive_ColumnEntry>()._has_bits_);
  static void set_has_column(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSCE::IndexSetArchive& row_set(const CellCoordSetArchive_ColumnEntry* msg);
  static void set_has_row_set(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSCE::IndexSetArchive&
CellCoordSetArchive_ColumnEntry::_Internal::row_set(const CellCoordSetArchive_ColumnEntry* msg) {
  return *msg->row_set_;
}
CellCoordSetArchive_ColumnEntry::CellCoordSetArchive_ColumnEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.CellCoordSetArchive.ColumnEntry)
}
CellCoordSetArchive_ColumnEntry::CellCoordSetArchive_ColumnEntry(const CellCoordSetArchive_ColumnEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_row_set()) {
    row_set_ = new ::TSCE::IndexSetArchive(*from.row_set_);
  } else {
    row_set_ = nullptr;
  }
  column_ = from.column_;
  // @@protoc_insertion_point(copy_constructor:TSCE.CellCoordSetArchive.ColumnEntry)
}

void CellCoordSetArchive_ColumnEntry::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&row_set_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&column_) -
    reinterpret_cast<char*>(&row_set_)) + sizeof(column_));
}

CellCoordSetArchive_ColumnEntry::~CellCoordSetArchive_ColumnEntry() {
  // @@protoc_insertion_point(destructor:TSCE.CellCoordSetArchive.ColumnEntry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CellCoordSetArchive_ColumnEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete row_set_;
}

void CellCoordSetArchive_ColumnEntry::ArenaDtor(void* object) {
  CellCoordSetArchive_ColumnEntry* _this = reinterpret_cast< CellCoordSetArchive_ColumnEntry* >(object);
  (void)_this;
}
void CellCoordSetArchive_ColumnEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CellCoordSetArchive_ColumnEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CellCoordSetArchive_ColumnEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.CellCoordSetArchive.ColumnEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(row_set_ != nullptr);
    row_set_->Clear();
  }
  column_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CellCoordSetArchive_ColumnEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 column = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_column(&has_bits);
          column_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSCE.IndexSetArchive row_set = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_row_set(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CellCoordSetArchive_ColumnEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.CellCoordSetArchive.ColumnEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 column = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_column(), target);
  }

  // required .TSCE.IndexSetArchive row_set = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::row_set(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.CellCoordSetArchive.ColumnEntry)
  return target;
}

size_t CellCoordSetArchive_ColumnEntry::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.CellCoordSetArchive.ColumnEntry)
  size_t total_size = 0;

  if (_internal_has_row_set()) {
    // required .TSCE.IndexSetArchive row_set = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *row_set_);
  }

  if (_internal_has_column()) {
    // required uint32 column = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_column());
  }

  return total_size;
}
size_t CellCoordSetArchive_ColumnEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.CellCoordSetArchive.ColumnEntry)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSCE.IndexSetArchive row_set = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *row_set_);

    // required uint32 column = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_column());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CellCoordSetArchive_ColumnEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.CellCoordSetArchive.ColumnEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const CellCoordSetArchive_ColumnEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CellCoordSetArchive_ColumnEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.CellCoordSetArchive.ColumnEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.CellCoordSetArchive.ColumnEntry)
    MergeFrom(*source);
  }
}

void CellCoordSetArchive_ColumnEntry::MergeFrom(const CellCoordSetArchive_ColumnEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.CellCoordSetArchive.ColumnEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_row_set()->::TSCE::IndexSetArchive::MergeFrom(from._internal_row_set());
    }
    if (cached_has_bits & 0x00000002u) {
      column_ = from.column_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CellCoordSetArchive_ColumnEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.CellCoordSetArchive.ColumnEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CellCoordSetArchive_ColumnEntry::CopyFrom(const CellCoordSetArchive_ColumnEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.CellCoordSetArchive.ColumnEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellCoordSetArchive_ColumnEntry::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_row_set()) {
    if (!row_set_->IsInitialized()) return false;
  }
  return true;
}

void CellCoordSetArchive_ColumnEntry::InternalSwap(CellCoordSetArchive_ColumnEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CellCoordSetArchive_ColumnEntry, column_)
      + sizeof(CellCoordSetArchive_ColumnEntry::column_)
      - PROTOBUF_FIELD_OFFSET(CellCoordSetArchive_ColumnEntry, row_set_)>(
          reinterpret_cast<char*>(&row_set_),
          reinterpret_cast<char*>(&other->row_set_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CellCoordSetArchive_ColumnEntry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[6]);
}

// ===================================================================

class CellCoordSetArchive::_Internal {
 public:
};

CellCoordSetArchive::CellCoordSetArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  column_entries_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.CellCoordSetArchive)
}
CellCoordSetArchive::CellCoordSetArchive(const CellCoordSetArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      column_entries_(from.column_entries_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSCE.CellCoordSetArchive)
}

void CellCoordSetArchive::SharedCtor() {
}

CellCoordSetArchive::~CellCoordSetArchive() {
  // @@protoc_insertion_point(destructor:TSCE.CellCoordSetArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CellCoordSetArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CellCoordSetArchive::ArenaDtor(void* object) {
  CellCoordSetArchive* _this = reinterpret_cast< CellCoordSetArchive* >(object);
  (void)_this;
}
void CellCoordSetArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CellCoordSetArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CellCoordSetArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.CellCoordSetArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  column_entries_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CellCoordSetArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSCE.CellCoordSetArchive.ColumnEntry column_entries = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_column_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CellCoordSetArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.CellCoordSetArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSCE.CellCoordSetArchive.ColumnEntry column_entries = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_column_entries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_column_entries(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.CellCoordSetArchive)
  return target;
}

size_t CellCoordSetArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.CellCoordSetArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.CellCoordSetArchive.ColumnEntry column_entries = 1;
  total_size += 1UL * this->_internal_column_entries_size();
  for (const auto& msg : this->column_entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CellCoordSetArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.CellCoordSetArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const CellCoordSetArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CellCoordSetArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.CellCoordSetArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.CellCoordSetArchive)
    MergeFrom(*source);
  }
}

void CellCoordSetArchive::MergeFrom(const CellCoordSetArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.CellCoordSetArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  column_entries_.MergeFrom(from.column_entries_);
}

void CellCoordSetArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.CellCoordSetArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CellCoordSetArchive::CopyFrom(const CellCoordSetArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.CellCoordSetArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellCoordSetArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(column_entries_)) return false;
  return true;
}

void CellCoordSetArchive::InternalSwap(CellCoordSetArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  column_entries_.InternalSwap(&other->column_entries_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CellCoordSetArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[7]);
}

// ===================================================================

class InternalCellRefSetArchive_OwnerEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<InternalCellRefSetArchive_OwnerEntry>()._has_bits_);
  static void set_has_owner_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSCE::CellCoordSetArchive& coord_set(const InternalCellRefSetArchive_OwnerEntry* msg);
  static void set_has_coord_set(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSCE::CellCoordSetArchive&
InternalCellRefSetArchive_OwnerEntry::_Internal::coord_set(const InternalCellRefSetArchive_OwnerEntry* msg) {
  return *msg->coord_set_;
}
InternalCellRefSetArchive_OwnerEntry::InternalCellRefSetArchive_OwnerEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.InternalCellRefSetArchive.OwnerEntry)
}
InternalCellRefSetArchive_OwnerEntry::InternalCellRefSetArchive_OwnerEntry(const InternalCellRefSetArchive_OwnerEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_coord_set()) {
    coord_set_ = new ::TSCE::CellCoordSetArchive(*from.coord_set_);
  } else {
    coord_set_ = nullptr;
  }
  owner_id_ = from.owner_id_;
  // @@protoc_insertion_point(copy_constructor:TSCE.InternalCellRefSetArchive.OwnerEntry)
}

void InternalCellRefSetArchive_OwnerEntry::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&coord_set_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&owner_id_) -
    reinterpret_cast<char*>(&coord_set_)) + sizeof(owner_id_));
}

InternalCellRefSetArchive_OwnerEntry::~InternalCellRefSetArchive_OwnerEntry() {
  // @@protoc_insertion_point(destructor:TSCE.InternalCellRefSetArchive.OwnerEntry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InternalCellRefSetArchive_OwnerEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete coord_set_;
}

void InternalCellRefSetArchive_OwnerEntry::ArenaDtor(void* object) {
  InternalCellRefSetArchive_OwnerEntry* _this = reinterpret_cast< InternalCellRefSetArchive_OwnerEntry* >(object);
  (void)_this;
}
void InternalCellRefSetArchive_OwnerEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InternalCellRefSetArchive_OwnerEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InternalCellRefSetArchive_OwnerEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.InternalCellRefSetArchive.OwnerEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(coord_set_ != nullptr);
    coord_set_->Clear();
  }
  owner_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InternalCellRefSetArchive_OwnerEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 owner_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_owner_id(&has_bits);
          owner_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSCE.CellCoordSetArchive coord_set = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_coord_set(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InternalCellRefSetArchive_OwnerEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.InternalCellRefSetArchive.OwnerEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 owner_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_owner_id(), target);
  }

  // required .TSCE.CellCoordSetArchive coord_set = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::coord_set(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.InternalCellRefSetArchive.OwnerEntry)
  return target;
}

size_t InternalCellRefSetArchive_OwnerEntry::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.InternalCellRefSetArchive.OwnerEntry)
  size_t total_size = 0;

  if (_internal_has_coord_set()) {
    // required .TSCE.CellCoordSetArchive coord_set = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *coord_set_);
  }

  if (_internal_has_owner_id()) {
    // required uint32 owner_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_owner_id());
  }

  return total_size;
}
size_t InternalCellRefSetArchive_OwnerEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.InternalCellRefSetArchive.OwnerEntry)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSCE.CellCoordSetArchive coord_set = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *coord_set_);

    // required uint32 owner_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_owner_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InternalCellRefSetArchive_OwnerEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.InternalCellRefSetArchive.OwnerEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const InternalCellRefSetArchive_OwnerEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InternalCellRefSetArchive_OwnerEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.InternalCellRefSetArchive.OwnerEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.InternalCellRefSetArchive.OwnerEntry)
    MergeFrom(*source);
  }
}

void InternalCellRefSetArchive_OwnerEntry::MergeFrom(const InternalCellRefSetArchive_OwnerEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.InternalCellRefSetArchive.OwnerEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_coord_set()->::TSCE::CellCoordSetArchive::MergeFrom(from._internal_coord_set());
    }
    if (cached_has_bits & 0x00000002u) {
      owner_id_ = from.owner_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void InternalCellRefSetArchive_OwnerEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.InternalCellRefSetArchive.OwnerEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InternalCellRefSetArchive_OwnerEntry::CopyFrom(const InternalCellRefSetArchive_OwnerEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.InternalCellRefSetArchive.OwnerEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InternalCellRefSetArchive_OwnerEntry::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_coord_set()) {
    if (!coord_set_->IsInitialized()) return false;
  }
  return true;
}

void InternalCellRefSetArchive_OwnerEntry::InternalSwap(InternalCellRefSetArchive_OwnerEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InternalCellRefSetArchive_OwnerEntry, owner_id_)
      + sizeof(InternalCellRefSetArchive_OwnerEntry::owner_id_)
      - PROTOBUF_FIELD_OFFSET(InternalCellRefSetArchive_OwnerEntry, coord_set_)>(
          reinterpret_cast<char*>(&coord_set_),
          reinterpret_cast<char*>(&other->coord_set_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InternalCellRefSetArchive_OwnerEntry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[8]);
}

// ===================================================================

class InternalCellRefSetArchive::_Internal {
 public:
};

InternalCellRefSetArchive::InternalCellRefSetArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  owner_entries_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.InternalCellRefSetArchive)
}
InternalCellRefSetArchive::InternalCellRefSetArchive(const InternalCellRefSetArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      owner_entries_(from.owner_entries_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSCE.InternalCellRefSetArchive)
}

void InternalCellRefSetArchive::SharedCtor() {
}

InternalCellRefSetArchive::~InternalCellRefSetArchive() {
  // @@protoc_insertion_point(destructor:TSCE.InternalCellRefSetArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InternalCellRefSetArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void InternalCellRefSetArchive::ArenaDtor(void* object) {
  InternalCellRefSetArchive* _this = reinterpret_cast< InternalCellRefSetArchive* >(object);
  (void)_this;
}
void InternalCellRefSetArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InternalCellRefSetArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InternalCellRefSetArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.InternalCellRefSetArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  owner_entries_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InternalCellRefSetArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSCE.InternalCellRefSetArchive.OwnerEntry owner_entries = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_owner_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InternalCellRefSetArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.InternalCellRefSetArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSCE.InternalCellRefSetArchive.OwnerEntry owner_entries = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_owner_entries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_owner_entries(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.InternalCellRefSetArchive)
  return target;
}

size_t InternalCellRefSetArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.InternalCellRefSetArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.InternalCellRefSetArchive.OwnerEntry owner_entries = 1;
  total_size += 1UL * this->_internal_owner_entries_size();
  for (const auto& msg : this->owner_entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InternalCellRefSetArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.InternalCellRefSetArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const InternalCellRefSetArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InternalCellRefSetArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.InternalCellRefSetArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.InternalCellRefSetArchive)
    MergeFrom(*source);
  }
}

void InternalCellRefSetArchive::MergeFrom(const InternalCellRefSetArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.InternalCellRefSetArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  owner_entries_.MergeFrom(from.owner_entries_);
}

void InternalCellRefSetArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.InternalCellRefSetArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InternalCellRefSetArchive::CopyFrom(const InternalCellRefSetArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.InternalCellRefSetArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InternalCellRefSetArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(owner_entries_)) return false;
  return true;
}

void InternalCellRefSetArchive::InternalSwap(InternalCellRefSetArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  owner_entries_.InternalSwap(&other->owner_entries_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InternalCellRefSetArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[9]);
}

// ===================================================================

class ColumnRowSize::_Internal {
 public:
  using HasBits = decltype(std::declval<ColumnRowSize>()._has_bits_);
  static void set_has_num_columns(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_num_rows(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ColumnRowSize::ColumnRowSize(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.ColumnRowSize)
}
ColumnRowSize::ColumnRowSize(const ColumnRowSize& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&num_columns_, &from.num_columns_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_rows_) -
    reinterpret_cast<char*>(&num_columns_)) + sizeof(num_rows_));
  // @@protoc_insertion_point(copy_constructor:TSCE.ColumnRowSize)
}

void ColumnRowSize::SharedCtor() {
num_columns_ = 1u;
num_rows_ = 1u;
}

ColumnRowSize::~ColumnRowSize() {
  // @@protoc_insertion_point(destructor:TSCE.ColumnRowSize)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ColumnRowSize::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ColumnRowSize::ArenaDtor(void* object) {
  ColumnRowSize* _this = reinterpret_cast< ColumnRowSize* >(object);
  (void)_this;
}
void ColumnRowSize::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ColumnRowSize::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ColumnRowSize::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.ColumnRowSize)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    num_columns_ = 1u;
    num_rows_ = 1u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ColumnRowSize::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 num_columns = 1 [default = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_num_columns(&has_bits);
          num_columns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 num_rows = 2 [default = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_num_rows(&has_bits);
          num_rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ColumnRowSize::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.ColumnRowSize)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 num_columns = 1 [default = 1];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_num_columns(), target);
  }

  // optional uint32 num_rows = 2 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_num_rows(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.ColumnRowSize)
  return target;
}

size_t ColumnRowSize::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.ColumnRowSize)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 num_columns = 1 [default = 1];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_num_columns());
    }

    // optional uint32 num_rows = 2 [default = 1];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_num_rows());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ColumnRowSize::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.ColumnRowSize)
  GOOGLE_DCHECK_NE(&from, this);
  const ColumnRowSize* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ColumnRowSize>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.ColumnRowSize)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.ColumnRowSize)
    MergeFrom(*source);
  }
}

void ColumnRowSize::MergeFrom(const ColumnRowSize& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.ColumnRowSize)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      num_columns_ = from.num_columns_;
    }
    if (cached_has_bits & 0x00000002u) {
      num_rows_ = from.num_rows_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ColumnRowSize::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.ColumnRowSize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ColumnRowSize::CopyFrom(const ColumnRowSize& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.ColumnRowSize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColumnRowSize::IsInitialized() const {
  return true;
}

void ColumnRowSize::InternalSwap(ColumnRowSize* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(num_columns_, other->num_columns_);
  swap(num_rows_, other->num_rows_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ColumnRowSize::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[10]);
}

// ===================================================================

class CellRectArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CellRectArchive>()._has_bits_);
  static const ::TSCE::CellCoordinateArchive& origin(const CellRectArchive* msg);
  static void set_has_origin(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSCE::ColumnRowSize& size(const CellRectArchive* msg);
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSCE::CellCoordinateArchive&
CellRectArchive::_Internal::origin(const CellRectArchive* msg) {
  return *msg->origin_;
}
const ::TSCE::ColumnRowSize&
CellRectArchive::_Internal::size(const CellRectArchive* msg) {
  return *msg->size_;
}
CellRectArchive::CellRectArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.CellRectArchive)
}
CellRectArchive::CellRectArchive(const CellRectArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_origin()) {
    origin_ = new ::TSCE::CellCoordinateArchive(*from.origin_);
  } else {
    origin_ = nullptr;
  }
  if (from._internal_has_size()) {
    size_ = new ::TSCE::ColumnRowSize(*from.size_);
  } else {
    size_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSCE.CellRectArchive)
}

void CellRectArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&origin_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&origin_)) + sizeof(size_));
}

CellRectArchive::~CellRectArchive() {
  // @@protoc_insertion_point(destructor:TSCE.CellRectArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CellRectArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete origin_;
  if (this != internal_default_instance()) delete size_;
}

void CellRectArchive::ArenaDtor(void* object) {
  CellRectArchive* _this = reinterpret_cast< CellRectArchive* >(object);
  (void)_this;
}
void CellRectArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CellRectArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CellRectArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.CellRectArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(origin_ != nullptr);
      origin_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(size_ != nullptr);
      size_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CellRectArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCE.CellCoordinateArchive origin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_origin(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSCE.ColumnRowSize size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_size(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CellRectArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.CellRectArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSCE.CellCoordinateArchive origin = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::origin(this), target, stream);
  }

  // required .TSCE.ColumnRowSize size = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::size(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.CellRectArchive)
  return target;
}

size_t CellRectArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.CellRectArchive)
  size_t total_size = 0;

  if (_internal_has_origin()) {
    // required .TSCE.CellCoordinateArchive origin = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *origin_);
  }

  if (_internal_has_size()) {
    // required .TSCE.ColumnRowSize size = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *size_);
  }

  return total_size;
}
size_t CellRectArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.CellRectArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSCE.CellCoordinateArchive origin = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *origin_);

    // required .TSCE.ColumnRowSize size = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *size_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CellRectArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.CellRectArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const CellRectArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CellRectArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.CellRectArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.CellRectArchive)
    MergeFrom(*source);
  }
}

void CellRectArchive::MergeFrom(const CellRectArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.CellRectArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_origin()->::TSCE::CellCoordinateArchive::MergeFrom(from._internal_origin());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_size()->::TSCE::ColumnRowSize::MergeFrom(from._internal_size());
    }
  }
}

void CellRectArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.CellRectArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CellRectArchive::CopyFrom(const CellRectArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.CellRectArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellRectArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void CellRectArchive::InternalSwap(CellRectArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CellRectArchive, size_)
      + sizeof(CellRectArchive::size_)
      - PROTOBUF_FIELD_OFFSET(CellRectArchive, origin_)>(
          reinterpret_cast<char*>(&origin_),
          reinterpret_cast<char*>(&other->origin_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CellRectArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[11]);
}

// ===================================================================

class CellRefSetArchive_OwnerEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<CellRefSetArchive_OwnerEntry>()._has_bits_);
  static const ::TSP::UUID& owner_uid(const CellRefSetArchive_OwnerEntry* msg);
  static void set_has_owner_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSCE::CellCoordSetArchive& coord_set(const CellRefSetArchive_OwnerEntry* msg);
  static void set_has_coord_set(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSP::UUID&
CellRefSetArchive_OwnerEntry::_Internal::owner_uid(const CellRefSetArchive_OwnerEntry* msg) {
  return *msg->owner_uid_;
}
const ::TSCE::CellCoordSetArchive&
CellRefSetArchive_OwnerEntry::_Internal::coord_set(const CellRefSetArchive_OwnerEntry* msg) {
  return *msg->coord_set_;
}
void CellRefSetArchive_OwnerEntry::clear_owner_uid() {
  if (owner_uid_ != nullptr) owner_uid_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
CellRefSetArchive_OwnerEntry::CellRefSetArchive_OwnerEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.CellRefSetArchive.OwnerEntry)
}
CellRefSetArchive_OwnerEntry::CellRefSetArchive_OwnerEntry(const CellRefSetArchive_OwnerEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_owner_uid()) {
    owner_uid_ = new ::TSP::UUID(*from.owner_uid_);
  } else {
    owner_uid_ = nullptr;
  }
  if (from._internal_has_coord_set()) {
    coord_set_ = new ::TSCE::CellCoordSetArchive(*from.coord_set_);
  } else {
    coord_set_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSCE.CellRefSetArchive.OwnerEntry)
}

void CellRefSetArchive_OwnerEntry::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&owner_uid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&coord_set_) -
    reinterpret_cast<char*>(&owner_uid_)) + sizeof(coord_set_));
}

CellRefSetArchive_OwnerEntry::~CellRefSetArchive_OwnerEntry() {
  // @@protoc_insertion_point(destructor:TSCE.CellRefSetArchive.OwnerEntry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CellRefSetArchive_OwnerEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete owner_uid_;
  if (this != internal_default_instance()) delete coord_set_;
}

void CellRefSetArchive_OwnerEntry::ArenaDtor(void* object) {
  CellRefSetArchive_OwnerEntry* _this = reinterpret_cast< CellRefSetArchive_OwnerEntry* >(object);
  (void)_this;
}
void CellRefSetArchive_OwnerEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CellRefSetArchive_OwnerEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CellRefSetArchive_OwnerEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.CellRefSetArchive.OwnerEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(owner_uid_ != nullptr);
      owner_uid_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(coord_set_ != nullptr);
      coord_set_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CellRefSetArchive_OwnerEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.UUID owner_uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_owner_uid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSCE.CellCoordSetArchive coord_set = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_coord_set(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CellRefSetArchive_OwnerEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.CellRefSetArchive.OwnerEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSP.UUID owner_uid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::owner_uid(this), target, stream);
  }

  // required .TSCE.CellCoordSetArchive coord_set = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::coord_set(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.CellRefSetArchive.OwnerEntry)
  return target;
}

size_t CellRefSetArchive_OwnerEntry::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.CellRefSetArchive.OwnerEntry)
  size_t total_size = 0;

  if (_internal_has_owner_uid()) {
    // required .TSP.UUID owner_uid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *owner_uid_);
  }

  if (_internal_has_coord_set()) {
    // required .TSCE.CellCoordSetArchive coord_set = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *coord_set_);
  }

  return total_size;
}
size_t CellRefSetArchive_OwnerEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.CellRefSetArchive.OwnerEntry)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSP.UUID owner_uid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *owner_uid_);

    // required .TSCE.CellCoordSetArchive coord_set = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *coord_set_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CellRefSetArchive_OwnerEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.CellRefSetArchive.OwnerEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const CellRefSetArchive_OwnerEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CellRefSetArchive_OwnerEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.CellRefSetArchive.OwnerEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.CellRefSetArchive.OwnerEntry)
    MergeFrom(*source);
  }
}

void CellRefSetArchive_OwnerEntry::MergeFrom(const CellRefSetArchive_OwnerEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.CellRefSetArchive.OwnerEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_owner_uid()->::TSP::UUID::MergeFrom(from._internal_owner_uid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_coord_set()->::TSCE::CellCoordSetArchive::MergeFrom(from._internal_coord_set());
    }
  }
}

void CellRefSetArchive_OwnerEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.CellRefSetArchive.OwnerEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CellRefSetArchive_OwnerEntry::CopyFrom(const CellRefSetArchive_OwnerEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.CellRefSetArchive.OwnerEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellRefSetArchive_OwnerEntry::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_owner_uid()) {
    if (!owner_uid_->IsInitialized()) return false;
  }
  if (_internal_has_coord_set()) {
    if (!coord_set_->IsInitialized()) return false;
  }
  return true;
}

void CellRefSetArchive_OwnerEntry::InternalSwap(CellRefSetArchive_OwnerEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CellRefSetArchive_OwnerEntry, coord_set_)
      + sizeof(CellRefSetArchive_OwnerEntry::coord_set_)
      - PROTOBUF_FIELD_OFFSET(CellRefSetArchive_OwnerEntry, owner_uid_)>(
          reinterpret_cast<char*>(&owner_uid_),
          reinterpret_cast<char*>(&other->owner_uid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CellRefSetArchive_OwnerEntry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[12]);
}

// ===================================================================

class CellRefSetArchive::_Internal {
 public:
};

CellRefSetArchive::CellRefSetArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  owner_entries_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.CellRefSetArchive)
}
CellRefSetArchive::CellRefSetArchive(const CellRefSetArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      owner_entries_(from.owner_entries_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSCE.CellRefSetArchive)
}

void CellRefSetArchive::SharedCtor() {
}

CellRefSetArchive::~CellRefSetArchive() {
  // @@protoc_insertion_point(destructor:TSCE.CellRefSetArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CellRefSetArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CellRefSetArchive::ArenaDtor(void* object) {
  CellRefSetArchive* _this = reinterpret_cast< CellRefSetArchive* >(object);
  (void)_this;
}
void CellRefSetArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CellRefSetArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CellRefSetArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.CellRefSetArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  owner_entries_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CellRefSetArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSCE.CellRefSetArchive.OwnerEntry owner_entries = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_owner_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CellRefSetArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.CellRefSetArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSCE.CellRefSetArchive.OwnerEntry owner_entries = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_owner_entries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_owner_entries(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.CellRefSetArchive)
  return target;
}

size_t CellRefSetArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.CellRefSetArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.CellRefSetArchive.OwnerEntry owner_entries = 1;
  total_size += 1UL * this->_internal_owner_entries_size();
  for (const auto& msg : this->owner_entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CellRefSetArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.CellRefSetArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const CellRefSetArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CellRefSetArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.CellRefSetArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.CellRefSetArchive)
    MergeFrom(*source);
  }
}

void CellRefSetArchive::MergeFrom(const CellRefSetArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.CellRefSetArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  owner_entries_.MergeFrom(from.owner_entries_);
}

void CellRefSetArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.CellRefSetArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CellRefSetArchive::CopyFrom(const CellRefSetArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.CellRefSetArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellRefSetArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(owner_entries_)) return false;
  return true;
}

void CellRefSetArchive::InternalSwap(CellRefSetArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  owner_entries_.InternalSwap(&other->owner_entries_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CellRefSetArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[13]);
}

// ===================================================================

class UidCoordSetArchive_ColumnEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<UidCoordSetArchive_ColumnEntry>()._has_bits_);
  static const ::TSP::UUID& column(const UidCoordSetArchive_ColumnEntry* msg);
  static void set_has_column(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSP::UUID&
UidCoordSetArchive_ColumnEntry::_Internal::column(const UidCoordSetArchive_ColumnEntry* msg) {
  return *msg->column_;
}
void UidCoordSetArchive_ColumnEntry::clear_column() {
  if (column_ != nullptr) column_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void UidCoordSetArchive_ColumnEntry::clear_row_set() {
  row_set_.Clear();
}
UidCoordSetArchive_ColumnEntry::UidCoordSetArchive_ColumnEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  row_set_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.UidCoordSetArchive.ColumnEntry)
}
UidCoordSetArchive_ColumnEntry::UidCoordSetArchive_ColumnEntry(const UidCoordSetArchive_ColumnEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      row_set_(from.row_set_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_column()) {
    column_ = new ::TSP::UUID(*from.column_);
  } else {
    column_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSCE.UidCoordSetArchive.ColumnEntry)
}

void UidCoordSetArchive_ColumnEntry::SharedCtor() {
column_ = nullptr;
}

UidCoordSetArchive_ColumnEntry::~UidCoordSetArchive_ColumnEntry() {
  // @@protoc_insertion_point(destructor:TSCE.UidCoordSetArchive.ColumnEntry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UidCoordSetArchive_ColumnEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete column_;
}

void UidCoordSetArchive_ColumnEntry::ArenaDtor(void* object) {
  UidCoordSetArchive_ColumnEntry* _this = reinterpret_cast< UidCoordSetArchive_ColumnEntry* >(object);
  (void)_this;
}
void UidCoordSetArchive_ColumnEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UidCoordSetArchive_ColumnEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UidCoordSetArchive_ColumnEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.UidCoordSetArchive.ColumnEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  row_set_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(column_ != nullptr);
    column_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UidCoordSetArchive_ColumnEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.UUID column = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_column(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.UUID row_set = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_row_set(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UidCoordSetArchive_ColumnEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.UidCoordSetArchive.ColumnEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSP.UUID column = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::column(this), target, stream);
  }

  // repeated .TSP.UUID row_set = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_row_set_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_row_set(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.UidCoordSetArchive.ColumnEntry)
  return target;
}

size_t UidCoordSetArchive_ColumnEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.UidCoordSetArchive.ColumnEntry)
  size_t total_size = 0;

  // required .TSP.UUID column = 1;
  if (_internal_has_column()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *column_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.UUID row_set = 2;
  total_size += 1UL * this->_internal_row_set_size();
  for (const auto& msg : this->row_set_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UidCoordSetArchive_ColumnEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.UidCoordSetArchive.ColumnEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const UidCoordSetArchive_ColumnEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UidCoordSetArchive_ColumnEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.UidCoordSetArchive.ColumnEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.UidCoordSetArchive.ColumnEntry)
    MergeFrom(*source);
  }
}

void UidCoordSetArchive_ColumnEntry::MergeFrom(const UidCoordSetArchive_ColumnEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.UidCoordSetArchive.ColumnEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  row_set_.MergeFrom(from.row_set_);
  if (from._internal_has_column()) {
    _internal_mutable_column()->::TSP::UUID::MergeFrom(from._internal_column());
  }
}

void UidCoordSetArchive_ColumnEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.UidCoordSetArchive.ColumnEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UidCoordSetArchive_ColumnEntry::CopyFrom(const UidCoordSetArchive_ColumnEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.UidCoordSetArchive.ColumnEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UidCoordSetArchive_ColumnEntry::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(row_set_)) return false;
  if (_internal_has_column()) {
    if (!column_->IsInitialized()) return false;
  }
  return true;
}

void UidCoordSetArchive_ColumnEntry::InternalSwap(UidCoordSetArchive_ColumnEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  row_set_.InternalSwap(&other->row_set_);
  swap(column_, other->column_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UidCoordSetArchive_ColumnEntry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[14]);
}

// ===================================================================

class UidCoordSetArchive::_Internal {
 public:
};

UidCoordSetArchive::UidCoordSetArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  column_entries_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.UidCoordSetArchive)
}
UidCoordSetArchive::UidCoordSetArchive(const UidCoordSetArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      column_entries_(from.column_entries_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSCE.UidCoordSetArchive)
}

void UidCoordSetArchive::SharedCtor() {
}

UidCoordSetArchive::~UidCoordSetArchive() {
  // @@protoc_insertion_point(destructor:TSCE.UidCoordSetArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UidCoordSetArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UidCoordSetArchive::ArenaDtor(void* object) {
  UidCoordSetArchive* _this = reinterpret_cast< UidCoordSetArchive* >(object);
  (void)_this;
}
void UidCoordSetArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UidCoordSetArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UidCoordSetArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.UidCoordSetArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  column_entries_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UidCoordSetArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSCE.UidCoordSetArchive.ColumnEntry column_entries = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_column_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UidCoordSetArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.UidCoordSetArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSCE.UidCoordSetArchive.ColumnEntry column_entries = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_column_entries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_column_entries(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.UidCoordSetArchive)
  return target;
}

size_t UidCoordSetArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.UidCoordSetArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.UidCoordSetArchive.ColumnEntry column_entries = 1;
  total_size += 1UL * this->_internal_column_entries_size();
  for (const auto& msg : this->column_entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UidCoordSetArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.UidCoordSetArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const UidCoordSetArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UidCoordSetArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.UidCoordSetArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.UidCoordSetArchive)
    MergeFrom(*source);
  }
}

void UidCoordSetArchive::MergeFrom(const UidCoordSetArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.UidCoordSetArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  column_entries_.MergeFrom(from.column_entries_);
}

void UidCoordSetArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.UidCoordSetArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UidCoordSetArchive::CopyFrom(const UidCoordSetArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.UidCoordSetArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UidCoordSetArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(column_entries_)) return false;
  return true;
}

void UidCoordSetArchive::InternalSwap(UidCoordSetArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  column_entries_.InternalSwap(&other->column_entries_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UidCoordSetArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[15]);
}

// ===================================================================

class UidCellRefSetArchive_OwnerEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<UidCellRefSetArchive_OwnerEntry>()._has_bits_);
  static const ::TSP::UUID& owner_uid(const UidCellRefSetArchive_OwnerEntry* msg);
  static void set_has_owner_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSCE::UidCoordSetArchive& coord_set(const UidCellRefSetArchive_OwnerEntry* msg);
  static void set_has_coord_set(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSP::UUID&
UidCellRefSetArchive_OwnerEntry::_Internal::owner_uid(const UidCellRefSetArchive_OwnerEntry* msg) {
  return *msg->owner_uid_;
}
const ::TSCE::UidCoordSetArchive&
UidCellRefSetArchive_OwnerEntry::_Internal::coord_set(const UidCellRefSetArchive_OwnerEntry* msg) {
  return *msg->coord_set_;
}
void UidCellRefSetArchive_OwnerEntry::clear_owner_uid() {
  if (owner_uid_ != nullptr) owner_uid_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
UidCellRefSetArchive_OwnerEntry::UidCellRefSetArchive_OwnerEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.UidCellRefSetArchive.OwnerEntry)
}
UidCellRefSetArchive_OwnerEntry::UidCellRefSetArchive_OwnerEntry(const UidCellRefSetArchive_OwnerEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_owner_uid()) {
    owner_uid_ = new ::TSP::UUID(*from.owner_uid_);
  } else {
    owner_uid_ = nullptr;
  }
  if (from._internal_has_coord_set()) {
    coord_set_ = new ::TSCE::UidCoordSetArchive(*from.coord_set_);
  } else {
    coord_set_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSCE.UidCellRefSetArchive.OwnerEntry)
}

void UidCellRefSetArchive_OwnerEntry::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&owner_uid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&coord_set_) -
    reinterpret_cast<char*>(&owner_uid_)) + sizeof(coord_set_));
}

UidCellRefSetArchive_OwnerEntry::~UidCellRefSetArchive_OwnerEntry() {
  // @@protoc_insertion_point(destructor:TSCE.UidCellRefSetArchive.OwnerEntry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UidCellRefSetArchive_OwnerEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete owner_uid_;
  if (this != internal_default_instance()) delete coord_set_;
}

void UidCellRefSetArchive_OwnerEntry::ArenaDtor(void* object) {
  UidCellRefSetArchive_OwnerEntry* _this = reinterpret_cast< UidCellRefSetArchive_OwnerEntry* >(object);
  (void)_this;
}
void UidCellRefSetArchive_OwnerEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UidCellRefSetArchive_OwnerEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UidCellRefSetArchive_OwnerEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.UidCellRefSetArchive.OwnerEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(owner_uid_ != nullptr);
      owner_uid_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(coord_set_ != nullptr);
      coord_set_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UidCellRefSetArchive_OwnerEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.UUID owner_uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_owner_uid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSCE.UidCoordSetArchive coord_set = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_coord_set(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UidCellRefSetArchive_OwnerEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.UidCellRefSetArchive.OwnerEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSP.UUID owner_uid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::owner_uid(this), target, stream);
  }

  // required .TSCE.UidCoordSetArchive coord_set = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::coord_set(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.UidCellRefSetArchive.OwnerEntry)
  return target;
}

size_t UidCellRefSetArchive_OwnerEntry::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.UidCellRefSetArchive.OwnerEntry)
  size_t total_size = 0;

  if (_internal_has_owner_uid()) {
    // required .TSP.UUID owner_uid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *owner_uid_);
  }

  if (_internal_has_coord_set()) {
    // required .TSCE.UidCoordSetArchive coord_set = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *coord_set_);
  }

  return total_size;
}
size_t UidCellRefSetArchive_OwnerEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.UidCellRefSetArchive.OwnerEntry)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSP.UUID owner_uid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *owner_uid_);

    // required .TSCE.UidCoordSetArchive coord_set = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *coord_set_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UidCellRefSetArchive_OwnerEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.UidCellRefSetArchive.OwnerEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const UidCellRefSetArchive_OwnerEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UidCellRefSetArchive_OwnerEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.UidCellRefSetArchive.OwnerEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.UidCellRefSetArchive.OwnerEntry)
    MergeFrom(*source);
  }
}

void UidCellRefSetArchive_OwnerEntry::MergeFrom(const UidCellRefSetArchive_OwnerEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.UidCellRefSetArchive.OwnerEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_owner_uid()->::TSP::UUID::MergeFrom(from._internal_owner_uid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_coord_set()->::TSCE::UidCoordSetArchive::MergeFrom(from._internal_coord_set());
    }
  }
}

void UidCellRefSetArchive_OwnerEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.UidCellRefSetArchive.OwnerEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UidCellRefSetArchive_OwnerEntry::CopyFrom(const UidCellRefSetArchive_OwnerEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.UidCellRefSetArchive.OwnerEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UidCellRefSetArchive_OwnerEntry::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_owner_uid()) {
    if (!owner_uid_->IsInitialized()) return false;
  }
  if (_internal_has_coord_set()) {
    if (!coord_set_->IsInitialized()) return false;
  }
  return true;
}

void UidCellRefSetArchive_OwnerEntry::InternalSwap(UidCellRefSetArchive_OwnerEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UidCellRefSetArchive_OwnerEntry, coord_set_)
      + sizeof(UidCellRefSetArchive_OwnerEntry::coord_set_)
      - PROTOBUF_FIELD_OFFSET(UidCellRefSetArchive_OwnerEntry, owner_uid_)>(
          reinterpret_cast<char*>(&owner_uid_),
          reinterpret_cast<char*>(&other->owner_uid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UidCellRefSetArchive_OwnerEntry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[16]);
}

// ===================================================================

class UidCellRefSetArchive::_Internal {
 public:
};

UidCellRefSetArchive::UidCellRefSetArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  owner_entries_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.UidCellRefSetArchive)
}
UidCellRefSetArchive::UidCellRefSetArchive(const UidCellRefSetArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      owner_entries_(from.owner_entries_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSCE.UidCellRefSetArchive)
}

void UidCellRefSetArchive::SharedCtor() {
}

UidCellRefSetArchive::~UidCellRefSetArchive() {
  // @@protoc_insertion_point(destructor:TSCE.UidCellRefSetArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UidCellRefSetArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UidCellRefSetArchive::ArenaDtor(void* object) {
  UidCellRefSetArchive* _this = reinterpret_cast< UidCellRefSetArchive* >(object);
  (void)_this;
}
void UidCellRefSetArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UidCellRefSetArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UidCellRefSetArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.UidCellRefSetArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  owner_entries_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UidCellRefSetArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSCE.UidCellRefSetArchive.OwnerEntry owner_entries = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_owner_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UidCellRefSetArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.UidCellRefSetArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSCE.UidCellRefSetArchive.OwnerEntry owner_entries = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_owner_entries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_owner_entries(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.UidCellRefSetArchive)
  return target;
}

size_t UidCellRefSetArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.UidCellRefSetArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.UidCellRefSetArchive.OwnerEntry owner_entries = 1;
  total_size += 1UL * this->_internal_owner_entries_size();
  for (const auto& msg : this->owner_entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UidCellRefSetArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.UidCellRefSetArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const UidCellRefSetArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UidCellRefSetArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.UidCellRefSetArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.UidCellRefSetArchive)
    MergeFrom(*source);
  }
}

void UidCellRefSetArchive::MergeFrom(const UidCellRefSetArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.UidCellRefSetArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  owner_entries_.MergeFrom(from.owner_entries_);
}

void UidCellRefSetArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.UidCellRefSetArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UidCellRefSetArchive::CopyFrom(const UidCellRefSetArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.UidCellRefSetArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UidCellRefSetArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(owner_entries_)) return false;
  return true;
}

void UidCellRefSetArchive::InternalSwap(UidCellRefSetArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  owner_entries_.InternalSwap(&other->owner_entries_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UidCellRefSetArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[17]);
}

// ===================================================================

class ReferencesToDirtyArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ReferencesToDirtyArchive>()._has_bits_);
  static const ::TSCE::IndexSetArchive& to_dirty_owner_ids(const ReferencesToDirtyArchive* msg);
  static void set_has_to_dirty_owner_ids(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSCE::InternalCellRefSetArchive& to_dirty_cells(const ReferencesToDirtyArchive* msg);
  static void set_has_to_dirty_cells(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSCE::InternalCellRefSetArchive& to_dirty_cells_additional(const ReferencesToDirtyArchive* msg);
  static void set_has_to_dirty_cells_additional(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSCE::InternalCellRefSetArchive& calc_in_progress_cells(const ReferencesToDirtyArchive* msg);
  static void set_has_calc_in_progress_cells(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::TSCE::IndexSetArchive&
ReferencesToDirtyArchive::_Internal::to_dirty_owner_ids(const ReferencesToDirtyArchive* msg) {
  return *msg->to_dirty_owner_ids_;
}
const ::TSCE::InternalCellRefSetArchive&
ReferencesToDirtyArchive::_Internal::to_dirty_cells(const ReferencesToDirtyArchive* msg) {
  return *msg->to_dirty_cells_;
}
const ::TSCE::InternalCellRefSetArchive&
ReferencesToDirtyArchive::_Internal::to_dirty_cells_additional(const ReferencesToDirtyArchive* msg) {
  return *msg->to_dirty_cells_additional_;
}
const ::TSCE::InternalCellRefSetArchive&
ReferencesToDirtyArchive::_Internal::calc_in_progress_cells(const ReferencesToDirtyArchive* msg) {
  return *msg->calc_in_progress_cells_;
}
ReferencesToDirtyArchive::ReferencesToDirtyArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  to_dirty_range_refs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.ReferencesToDirtyArchive)
}
ReferencesToDirtyArchive::ReferencesToDirtyArchive(const ReferencesToDirtyArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      to_dirty_range_refs_(from.to_dirty_range_refs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_to_dirty_owner_ids()) {
    to_dirty_owner_ids_ = new ::TSCE::IndexSetArchive(*from.to_dirty_owner_ids_);
  } else {
    to_dirty_owner_ids_ = nullptr;
  }
  if (from._internal_has_to_dirty_cells()) {
    to_dirty_cells_ = new ::TSCE::InternalCellRefSetArchive(*from.to_dirty_cells_);
  } else {
    to_dirty_cells_ = nullptr;
  }
  if (from._internal_has_to_dirty_cells_additional()) {
    to_dirty_cells_additional_ = new ::TSCE::InternalCellRefSetArchive(*from.to_dirty_cells_additional_);
  } else {
    to_dirty_cells_additional_ = nullptr;
  }
  if (from._internal_has_calc_in_progress_cells()) {
    calc_in_progress_cells_ = new ::TSCE::InternalCellRefSetArchive(*from.calc_in_progress_cells_);
  } else {
    calc_in_progress_cells_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSCE.ReferencesToDirtyArchive)
}

void ReferencesToDirtyArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&to_dirty_owner_ids_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&calc_in_progress_cells_) -
    reinterpret_cast<char*>(&to_dirty_owner_ids_)) + sizeof(calc_in_progress_cells_));
}

ReferencesToDirtyArchive::~ReferencesToDirtyArchive() {
  // @@protoc_insertion_point(destructor:TSCE.ReferencesToDirtyArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReferencesToDirtyArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete to_dirty_owner_ids_;
  if (this != internal_default_instance()) delete to_dirty_cells_;
  if (this != internal_default_instance()) delete to_dirty_cells_additional_;
  if (this != internal_default_instance()) delete calc_in_progress_cells_;
}

void ReferencesToDirtyArchive::ArenaDtor(void* object) {
  ReferencesToDirtyArchive* _this = reinterpret_cast< ReferencesToDirtyArchive* >(object);
  (void)_this;
}
void ReferencesToDirtyArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReferencesToDirtyArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReferencesToDirtyArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.ReferencesToDirtyArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  to_dirty_range_refs_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(to_dirty_owner_ids_ != nullptr);
      to_dirty_owner_ids_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(to_dirty_cells_ != nullptr);
      to_dirty_cells_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(to_dirty_cells_additional_ != nullptr);
      to_dirty_cells_additional_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(calc_in_progress_cells_ != nullptr);
      calc_in_progress_cells_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReferencesToDirtyArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSCE.IndexSetArchive to_dirty_owner_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_to_dirty_owner_ids(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCE.InternalCellRefSetArchive to_dirty_cells = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_to_dirty_cells(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCE.InternalCellRefSetArchive to_dirty_cells_additional = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_to_dirty_cells_additional(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSCE.InternalRangeReferenceArchive to_dirty_range_refs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_to_dirty_range_refs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .TSCE.InternalCellRefSetArchive calc_in_progress_cells = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_calc_in_progress_cells(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReferencesToDirtyArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.ReferencesToDirtyArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSCE.IndexSetArchive to_dirty_owner_ids = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::to_dirty_owner_ids(this), target, stream);
  }

  // optional .TSCE.InternalCellRefSetArchive to_dirty_cells = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::to_dirty_cells(this), target, stream);
  }

  // optional .TSCE.InternalCellRefSetArchive to_dirty_cells_additional = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::to_dirty_cells_additional(this), target, stream);
  }

  // repeated .TSCE.InternalRangeReferenceArchive to_dirty_range_refs = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_to_dirty_range_refs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_to_dirty_range_refs(i), target, stream);
  }

  // optional .TSCE.InternalCellRefSetArchive calc_in_progress_cells = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::calc_in_progress_cells(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.ReferencesToDirtyArchive)
  return target;
}

size_t ReferencesToDirtyArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.ReferencesToDirtyArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.InternalRangeReferenceArchive to_dirty_range_refs = 4;
  total_size += 1UL * this->_internal_to_dirty_range_refs_size();
  for (const auto& msg : this->to_dirty_range_refs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .TSCE.IndexSetArchive to_dirty_owner_ids = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *to_dirty_owner_ids_);
    }

    // optional .TSCE.InternalCellRefSetArchive to_dirty_cells = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *to_dirty_cells_);
    }

    // optional .TSCE.InternalCellRefSetArchive to_dirty_cells_additional = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *to_dirty_cells_additional_);
    }

    // optional .TSCE.InternalCellRefSetArchive calc_in_progress_cells = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *calc_in_progress_cells_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReferencesToDirtyArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.ReferencesToDirtyArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ReferencesToDirtyArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReferencesToDirtyArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.ReferencesToDirtyArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.ReferencesToDirtyArchive)
    MergeFrom(*source);
  }
}

void ReferencesToDirtyArchive::MergeFrom(const ReferencesToDirtyArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.ReferencesToDirtyArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  to_dirty_range_refs_.MergeFrom(from.to_dirty_range_refs_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_to_dirty_owner_ids()->::TSCE::IndexSetArchive::MergeFrom(from._internal_to_dirty_owner_ids());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_to_dirty_cells()->::TSCE::InternalCellRefSetArchive::MergeFrom(from._internal_to_dirty_cells());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_to_dirty_cells_additional()->::TSCE::InternalCellRefSetArchive::MergeFrom(from._internal_to_dirty_cells_additional());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_calc_in_progress_cells()->::TSCE::InternalCellRefSetArchive::MergeFrom(from._internal_calc_in_progress_cells());
    }
  }
}

void ReferencesToDirtyArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.ReferencesToDirtyArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReferencesToDirtyArchive::CopyFrom(const ReferencesToDirtyArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.ReferencesToDirtyArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReferencesToDirtyArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(to_dirty_range_refs_)) return false;
  if (_internal_has_to_dirty_owner_ids()) {
    if (!to_dirty_owner_ids_->IsInitialized()) return false;
  }
  if (_internal_has_to_dirty_cells()) {
    if (!to_dirty_cells_->IsInitialized()) return false;
  }
  if (_internal_has_to_dirty_cells_additional()) {
    if (!to_dirty_cells_additional_->IsInitialized()) return false;
  }
  if (_internal_has_calc_in_progress_cells()) {
    if (!calc_in_progress_cells_->IsInitialized()) return false;
  }
  return true;
}

void ReferencesToDirtyArchive::InternalSwap(ReferencesToDirtyArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  to_dirty_range_refs_.InternalSwap(&other->to_dirty_range_refs_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReferencesToDirtyArchive, calc_in_progress_cells_)
      + sizeof(ReferencesToDirtyArchive::calc_in_progress_cells_)
      - PROTOBUF_FIELD_OFFSET(ReferencesToDirtyArchive, to_dirty_owner_ids_)>(
          reinterpret_cast<char*>(&to_dirty_owner_ids_),
          reinterpret_cast<char*>(&other->to_dirty_owner_ids_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReferencesToDirtyArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[18]);
}

// ===================================================================

class CoordMapperArchive_BaseToViewEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<CoordMapperArchive_BaseToViewEntry>()._has_bits_);
  static void set_has_base_row(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_view_row(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

CoordMapperArchive_BaseToViewEntry::CoordMapperArchive_BaseToViewEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.CoordMapperArchive.BaseToViewEntry)
}
CoordMapperArchive_BaseToViewEntry::CoordMapperArchive_BaseToViewEntry(const CoordMapperArchive_BaseToViewEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&base_row_, &from.base_row_,
    static_cast<size_t>(reinterpret_cast<char*>(&view_row_) -
    reinterpret_cast<char*>(&base_row_)) + sizeof(view_row_));
  // @@protoc_insertion_point(copy_constructor:TSCE.CoordMapperArchive.BaseToViewEntry)
}

void CoordMapperArchive_BaseToViewEntry::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&base_row_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&view_row_) -
    reinterpret_cast<char*>(&base_row_)) + sizeof(view_row_));
}

CoordMapperArchive_BaseToViewEntry::~CoordMapperArchive_BaseToViewEntry() {
  // @@protoc_insertion_point(destructor:TSCE.CoordMapperArchive.BaseToViewEntry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CoordMapperArchive_BaseToViewEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CoordMapperArchive_BaseToViewEntry::ArenaDtor(void* object) {
  CoordMapperArchive_BaseToViewEntry* _this = reinterpret_cast< CoordMapperArchive_BaseToViewEntry* >(object);
  (void)_this;
}
void CoordMapperArchive_BaseToViewEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CoordMapperArchive_BaseToViewEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CoordMapperArchive_BaseToViewEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.CoordMapperArchive.BaseToViewEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&base_row_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&view_row_) -
        reinterpret_cast<char*>(&base_row_)) + sizeof(view_row_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CoordMapperArchive_BaseToViewEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 base_row = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_base_row(&has_bits);
          base_row_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 view_row = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_view_row(&has_bits);
          view_row_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CoordMapperArchive_BaseToViewEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.CoordMapperArchive.BaseToViewEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 base_row = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_base_row(), target);
  }

  // required uint32 view_row = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_view_row(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.CoordMapperArchive.BaseToViewEntry)
  return target;
}

size_t CoordMapperArchive_BaseToViewEntry::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.CoordMapperArchive.BaseToViewEntry)
  size_t total_size = 0;

  if (_internal_has_base_row()) {
    // required uint32 base_row = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_base_row());
  }

  if (_internal_has_view_row()) {
    // required uint32 view_row = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_view_row());
  }

  return total_size;
}
size_t CoordMapperArchive_BaseToViewEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.CoordMapperArchive.BaseToViewEntry)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 base_row = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_base_row());

    // required uint32 view_row = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_view_row());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CoordMapperArchive_BaseToViewEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.CoordMapperArchive.BaseToViewEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const CoordMapperArchive_BaseToViewEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CoordMapperArchive_BaseToViewEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.CoordMapperArchive.BaseToViewEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.CoordMapperArchive.BaseToViewEntry)
    MergeFrom(*source);
  }
}

void CoordMapperArchive_BaseToViewEntry::MergeFrom(const CoordMapperArchive_BaseToViewEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.CoordMapperArchive.BaseToViewEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      base_row_ = from.base_row_;
    }
    if (cached_has_bits & 0x00000002u) {
      view_row_ = from.view_row_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CoordMapperArchive_BaseToViewEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.CoordMapperArchive.BaseToViewEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CoordMapperArchive_BaseToViewEntry::CopyFrom(const CoordMapperArchive_BaseToViewEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.CoordMapperArchive.BaseToViewEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CoordMapperArchive_BaseToViewEntry::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void CoordMapperArchive_BaseToViewEntry::InternalSwap(CoordMapperArchive_BaseToViewEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CoordMapperArchive_BaseToViewEntry, view_row_)
      + sizeof(CoordMapperArchive_BaseToViewEntry::view_row_)
      - PROTOBUF_FIELD_OFFSET(CoordMapperArchive_BaseToViewEntry, base_row_)>(
          reinterpret_cast<char*>(&base_row_),
          reinterpret_cast<char*>(&other->base_row_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CoordMapperArchive_BaseToViewEntry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[19]);
}

// ===================================================================

class CoordMapperArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CoordMapperArchive>()._has_bits_);
  static const ::TSCE::IndexSetArchive& summary_and_label_rows_set(const CoordMapperArchive* msg);
  static void set_has_summary_and_label_rows_set(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUID& table_uid(const CoordMapperArchive* msg);
  static void set_has_table_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::TSCE::IndexSetArchive&
CoordMapperArchive::_Internal::summary_and_label_rows_set(const CoordMapperArchive* msg) {
  return *msg->summary_and_label_rows_set_;
}
const ::TSP::UUID&
CoordMapperArchive::_Internal::table_uid(const CoordMapperArchive* msg) {
  return *msg->table_uid_;
}
void CoordMapperArchive::clear_table_uid() {
  if (table_uid_ != nullptr) table_uid_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
CoordMapperArchive::CoordMapperArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  base_to_view_map_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.CoordMapperArchive)
}
CoordMapperArchive::CoordMapperArchive(const CoordMapperArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      base_to_view_map_(from.base_to_view_map_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_summary_and_label_rows_set()) {
    summary_and_label_rows_set_ = new ::TSCE::IndexSetArchive(*from.summary_and_label_rows_set_);
  } else {
    summary_and_label_rows_set_ = nullptr;
  }
  if (from._internal_has_table_uid()) {
    table_uid_ = new ::TSP::UUID(*from.table_uid_);
  } else {
    table_uid_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSCE.CoordMapperArchive)
}

void CoordMapperArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&summary_and_label_rows_set_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&table_uid_) -
    reinterpret_cast<char*>(&summary_and_label_rows_set_)) + sizeof(table_uid_));
}

CoordMapperArchive::~CoordMapperArchive() {
  // @@protoc_insertion_point(destructor:TSCE.CoordMapperArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CoordMapperArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete summary_and_label_rows_set_;
  if (this != internal_default_instance()) delete table_uid_;
}

void CoordMapperArchive::ArenaDtor(void* object) {
  CoordMapperArchive* _this = reinterpret_cast< CoordMapperArchive* >(object);
  (void)_this;
}
void CoordMapperArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CoordMapperArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CoordMapperArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.CoordMapperArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  base_to_view_map_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(summary_and_label_rows_set_ != nullptr);
      summary_and_label_rows_set_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(table_uid_ != nullptr);
      table_uid_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CoordMapperArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSCE.IndexSetArchive summary_and_label_rows_set = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_summary_and_label_rows_set(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.UUID table_uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_uid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSCE.CoordMapperArchive.BaseToViewEntry base_to_view_map = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_base_to_view_map(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CoordMapperArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.CoordMapperArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSCE.IndexSetArchive summary_and_label_rows_set = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::summary_and_label_rows_set(this), target, stream);
  }

  // required .TSP.UUID table_uid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::table_uid(this), target, stream);
  }

  // repeated .TSCE.CoordMapperArchive.BaseToViewEntry base_to_view_map = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_base_to_view_map_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_base_to_view_map(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.CoordMapperArchive)
  return target;
}

size_t CoordMapperArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.CoordMapperArchive)
  size_t total_size = 0;

  // required .TSP.UUID table_uid = 2;
  if (_internal_has_table_uid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *table_uid_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.CoordMapperArchive.BaseToViewEntry base_to_view_map = 3;
  total_size += 1UL * this->_internal_base_to_view_map_size();
  for (const auto& msg : this->base_to_view_map_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .TSCE.IndexSetArchive summary_and_label_rows_set = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *summary_and_label_rows_set_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CoordMapperArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.CoordMapperArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const CoordMapperArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CoordMapperArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.CoordMapperArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.CoordMapperArchive)
    MergeFrom(*source);
  }
}

void CoordMapperArchive::MergeFrom(const CoordMapperArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.CoordMapperArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  base_to_view_map_.MergeFrom(from.base_to_view_map_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_summary_and_label_rows_set()->::TSCE::IndexSetArchive::MergeFrom(from._internal_summary_and_label_rows_set());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_table_uid()->::TSP::UUID::MergeFrom(from._internal_table_uid());
    }
  }
}

void CoordMapperArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.CoordMapperArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CoordMapperArchive::CopyFrom(const CoordMapperArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.CoordMapperArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CoordMapperArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(base_to_view_map_)) return false;
  if (_internal_has_summary_and_label_rows_set()) {
    if (!summary_and_label_rows_set_->IsInitialized()) return false;
  }
  if (_internal_has_table_uid()) {
    if (!table_uid_->IsInitialized()) return false;
  }
  return true;
}

void CoordMapperArchive::InternalSwap(CoordMapperArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  base_to_view_map_.InternalSwap(&other->base_to_view_map_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CoordMapperArchive, table_uid_)
      + sizeof(CoordMapperArchive::table_uid_)
      - PROTOBUF_FIELD_OFFSET(CoordMapperArchive, summary_and_label_rows_set_)>(
          reinterpret_cast<char*>(&summary_and_label_rows_set_),
          reinterpret_cast<char*>(&other->summary_and_label_rows_set_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CoordMapperArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[20]);
}

// ===================================================================

class ReferenceArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ReferenceArchive>()._has_bits_);
  static void set_has_reference_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSCE::CellReferenceArchive& cell_reference(const ReferenceArchive* msg);
  static void set_has_cell_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSCE::RangeReferenceArchive& range_reference(const ReferenceArchive* msg);
  static void set_has_range_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000004) ^ 0x00000004) != 0;
  }
};

const ::TSCE::CellReferenceArchive&
ReferenceArchive::_Internal::cell_reference(const ReferenceArchive* msg) {
  return *msg->cell_reference_;
}
const ::TSCE::RangeReferenceArchive&
ReferenceArchive::_Internal::range_reference(const ReferenceArchive* msg) {
  return *msg->range_reference_;
}
ReferenceArchive::ReferenceArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.ReferenceArchive)
}
ReferenceArchive::ReferenceArchive(const ReferenceArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_cell_reference()) {
    cell_reference_ = new ::TSCE::CellReferenceArchive(*from.cell_reference_);
  } else {
    cell_reference_ = nullptr;
  }
  if (from._internal_has_range_reference()) {
    range_reference_ = new ::TSCE::RangeReferenceArchive(*from.range_reference_);
  } else {
    range_reference_ = nullptr;
  }
  reference_type_ = from.reference_type_;
  // @@protoc_insertion_point(copy_constructor:TSCE.ReferenceArchive)
}

void ReferenceArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&cell_reference_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&range_reference_) -
    reinterpret_cast<char*>(&cell_reference_)) + sizeof(range_reference_));
reference_type_ = 1;
}

ReferenceArchive::~ReferenceArchive() {
  // @@protoc_insertion_point(destructor:TSCE.ReferenceArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReferenceArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete cell_reference_;
  if (this != internal_default_instance()) delete range_reference_;
}

void ReferenceArchive::ArenaDtor(void* object) {
  ReferenceArchive* _this = reinterpret_cast< ReferenceArchive* >(object);
  (void)_this;
}
void ReferenceArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReferenceArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReferenceArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.ReferenceArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(cell_reference_ != nullptr);
      cell_reference_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(range_reference_ != nullptr);
      range_reference_->Clear();
    }
    reference_type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReferenceArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCE.ReferenceArchive.ReferenceType reference_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSCE::ReferenceArchive_ReferenceType_IsValid(val))) {
            _internal_set_reference_type(static_cast<::TSCE::ReferenceArchive_ReferenceType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .TSCE.CellReferenceArchive cell_reference = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell_reference(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCE.RangeReferenceArchive range_reference = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_range_reference(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReferenceArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.ReferenceArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSCE.ReferenceArchive.ReferenceType reference_type = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_reference_type(), target);
  }

  // optional .TSCE.CellReferenceArchive cell_reference = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::cell_reference(this), target, stream);
  }

  // optional .TSCE.RangeReferenceArchive range_reference = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::range_reference(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.ReferenceArchive)
  return target;
}

size_t ReferenceArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.ReferenceArchive)
  size_t total_size = 0;

  // required .TSCE.ReferenceArchive.ReferenceType reference_type = 1;
  if (_internal_has_reference_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_reference_type());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .TSCE.CellReferenceArchive cell_reference = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cell_reference_);
    }

    // optional .TSCE.RangeReferenceArchive range_reference = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *range_reference_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReferenceArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.ReferenceArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ReferenceArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReferenceArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.ReferenceArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.ReferenceArchive)
    MergeFrom(*source);
  }
}

void ReferenceArchive::MergeFrom(const ReferenceArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.ReferenceArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_cell_reference()->::TSCE::CellReferenceArchive::MergeFrom(from._internal_cell_reference());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_range_reference()->::TSCE::RangeReferenceArchive::MergeFrom(from._internal_range_reference());
    }
    if (cached_has_bits & 0x00000004u) {
      reference_type_ = from.reference_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ReferenceArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.ReferenceArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReferenceArchive::CopyFrom(const ReferenceArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.ReferenceArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReferenceArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_cell_reference()) {
    if (!cell_reference_->IsInitialized()) return false;
  }
  if (_internal_has_range_reference()) {
    if (!range_reference_->IsInitialized()) return false;
  }
  return true;
}

void ReferenceArchive::InternalSwap(ReferenceArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReferenceArchive, range_reference_)
      + sizeof(ReferenceArchive::range_reference_)
      - PROTOBUF_FIELD_OFFSET(ReferenceArchive, cell_reference_)>(
          reinterpret_cast<char*>(&cell_reference_),
          reinterpret_cast<char*>(&other->cell_reference_));
  swap(reference_type_, other->reference_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReferenceArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[21]);
}

// ===================================================================

class EdgeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<EdgeArchive>()._has_bits_);
  static void set_has_column(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_row(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_precedent(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::CFUUIDArchive& owner_id(const EdgeArchive* msg);
  static void set_has_owner_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000e) ^ 0x0000000e) != 0;
  }
};

const ::TSP::CFUUIDArchive&
EdgeArchive::_Internal::owner_id(const EdgeArchive* msg) {
  return *msg->owner_id_;
}
void EdgeArchive::clear_owner_id() {
  if (owner_id_ != nullptr) owner_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
EdgeArchive::EdgeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.EdgeArchive)
}
EdgeArchive::EdgeArchive(const EdgeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_owner_id()) {
    owner_id_ = new ::TSP::CFUUIDArchive(*from.owner_id_);
  } else {
    owner_id_ = nullptr;
  }
  ::memcpy(&column_, &from.column_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_precedent_) -
    reinterpret_cast<char*>(&column_)) + sizeof(is_precedent_));
  // @@protoc_insertion_point(copy_constructor:TSCE.EdgeArchive)
}

void EdgeArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&owner_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_precedent_) -
    reinterpret_cast<char*>(&owner_id_)) + sizeof(is_precedent_));
}

EdgeArchive::~EdgeArchive() {
  // @@protoc_insertion_point(destructor:TSCE.EdgeArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EdgeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete owner_id_;
}

void EdgeArchive::ArenaDtor(void* object) {
  EdgeArchive* _this = reinterpret_cast< EdgeArchive* >(object);
  (void)_this;
}
void EdgeArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EdgeArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EdgeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.EdgeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(owner_id_ != nullptr);
    owner_id_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&column_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_precedent_) -
        reinterpret_cast<char*>(&column_)) + sizeof(is_precedent_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EdgeArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 column = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_column(&has_bits);
          column_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 row = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_row(&has_bits);
          row_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool is_precedent = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_is_precedent(&has_bits);
          is_precedent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.CFUUIDArchive owner_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_owner_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EdgeArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.EdgeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 column = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_column(), target);
  }

  // required uint32 row = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_row(), target);
  }

  // required bool is_precedent = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_precedent(), target);
  }

  // optional .TSP.CFUUIDArchive owner_id = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::owner_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.EdgeArchive)
  return target;
}

size_t EdgeArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.EdgeArchive)
  size_t total_size = 0;

  if (_internal_has_column()) {
    // required uint32 column = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_column());
  }

  if (_internal_has_row()) {
    // required uint32 row = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_row());
  }

  if (_internal_has_is_precedent()) {
    // required bool is_precedent = 3;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t EdgeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.EdgeArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000e) ^ 0x0000000e) == 0) {  // All required fields are present.
    // required uint32 column = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_column());

    // required uint32 row = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_row());

    // required bool is_precedent = 3;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.CFUUIDArchive owner_id = 4;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *owner_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EdgeArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.EdgeArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const EdgeArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EdgeArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.EdgeArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.EdgeArchive)
    MergeFrom(*source);
  }
}

void EdgeArchive::MergeFrom(const EdgeArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.EdgeArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_owner_id()->::TSP::CFUUIDArchive::MergeFrom(from._internal_owner_id());
    }
    if (cached_has_bits & 0x00000002u) {
      column_ = from.column_;
    }
    if (cached_has_bits & 0x00000004u) {
      row_ = from.row_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_precedent_ = from.is_precedent_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EdgeArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.EdgeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EdgeArchive::CopyFrom(const EdgeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.EdgeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EdgeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void EdgeArchive::InternalSwap(EdgeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EdgeArchive, is_precedent_)
      + sizeof(EdgeArchive::is_precedent_)
      - PROTOBUF_FIELD_OFFSET(EdgeArchive, owner_id_)>(
          reinterpret_cast<char*>(&owner_id_),
          reinterpret_cast<char*>(&other->owner_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EdgeArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[22]);
}

// ===================================================================

class EdgesArchive::_Internal {
 public:
};

void EdgesArchive::clear_owner_id_for_edge() {
  owner_id_for_edge_.Clear();
}
EdgesArchive::EdgesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  packed_edge_without_owner_(arena),
  packed_edge_with_owner_(arena),
  owner_id_for_edge_(arena),
  internal_owner_id_for_edge_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.EdgesArchive)
}
EdgesArchive::EdgesArchive(const EdgesArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      packed_edge_without_owner_(from.packed_edge_without_owner_),
      packed_edge_with_owner_(from.packed_edge_with_owner_),
      owner_id_for_edge_(from.owner_id_for_edge_),
      internal_owner_id_for_edge_(from.internal_owner_id_for_edge_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSCE.EdgesArchive)
}

void EdgesArchive::SharedCtor() {
}

EdgesArchive::~EdgesArchive() {
  // @@protoc_insertion_point(destructor:TSCE.EdgesArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EdgesArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EdgesArchive::ArenaDtor(void* object) {
  EdgesArchive* _this = reinterpret_cast< EdgesArchive* >(object);
  (void)_this;
}
void EdgesArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EdgesArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EdgesArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.EdgesArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  packed_edge_without_owner_.Clear();
  packed_edge_with_owner_.Clear();
  owner_id_for_edge_.Clear();
  internal_owner_id_for_edge_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EdgesArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 packed_edge_without_owner = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_packed_edge_without_owner(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<72>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_packed_edge_without_owner(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 packed_edge_with_owner = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_packed_edge_with_owner(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<80>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_packed_edge_with_owner(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.CFUUIDArchive owner_id_for_edge = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_owner_id_for_edge(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated uint32 internal_owner_id_for_edge = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_internal_owner_id_for_edge(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<96>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_internal_owner_id_for_edge(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EdgesArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.EdgesArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 packed_edge_without_owner = 9;
  for (int i = 0, n = this->_internal_packed_edge_without_owner_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_packed_edge_without_owner(i), target);
  }

  // repeated uint32 packed_edge_with_owner = 10;
  for (int i = 0, n = this->_internal_packed_edge_with_owner_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_packed_edge_with_owner(i), target);
  }

  // repeated .TSP.CFUUIDArchive owner_id_for_edge = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_owner_id_for_edge_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_owner_id_for_edge(i), target, stream);
  }

  // repeated uint32 internal_owner_id_for_edge = 12;
  for (int i = 0, n = this->_internal_internal_owner_id_for_edge_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_internal_owner_id_for_edge(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.EdgesArchive)
  return target;
}

size_t EdgesArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.EdgesArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 packed_edge_without_owner = 9;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->packed_edge_without_owner_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_packed_edge_without_owner_size());
    total_size += data_size;
  }

  // repeated uint32 packed_edge_with_owner = 10;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->packed_edge_with_owner_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_packed_edge_with_owner_size());
    total_size += data_size;
  }

  // repeated .TSP.CFUUIDArchive owner_id_for_edge = 11;
  total_size += 1UL * this->_internal_owner_id_for_edge_size();
  for (const auto& msg : this->owner_id_for_edge_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 internal_owner_id_for_edge = 12;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->internal_owner_id_for_edge_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_internal_owner_id_for_edge_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EdgesArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.EdgesArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const EdgesArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EdgesArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.EdgesArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.EdgesArchive)
    MergeFrom(*source);
  }
}

void EdgesArchive::MergeFrom(const EdgesArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.EdgesArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  packed_edge_without_owner_.MergeFrom(from.packed_edge_without_owner_);
  packed_edge_with_owner_.MergeFrom(from.packed_edge_with_owner_);
  owner_id_for_edge_.MergeFrom(from.owner_id_for_edge_);
  internal_owner_id_for_edge_.MergeFrom(from.internal_owner_id_for_edge_);
}

void EdgesArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.EdgesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EdgesArchive::CopyFrom(const EdgesArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.EdgesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EdgesArchive::IsInitialized() const {
  return true;
}

void EdgesArchive::InternalSwap(EdgesArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  packed_edge_without_owner_.InternalSwap(&other->packed_edge_without_owner_);
  packed_edge_with_owner_.InternalSwap(&other->packed_edge_with_owner_);
  owner_id_for_edge_.InternalSwap(&other->owner_id_for_edge_);
  internal_owner_id_for_edge_.InternalSwap(&other->internal_owner_id_for_edge_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EdgesArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[23]);
}

// ===================================================================

class ExpandedEdgesArchive::_Internal {
 public:
};

ExpandedEdgesArchive::ExpandedEdgesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  edge_without_owner_rows_(arena),
  edge_without_owner_columns_(arena),
  edge_with_owner_rows_(arena),
  edge_with_owner_columns_(arena),
  internal_owner_id_for_edge_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.ExpandedEdgesArchive)
}
ExpandedEdgesArchive::ExpandedEdgesArchive(const ExpandedEdgesArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      edge_without_owner_rows_(from.edge_without_owner_rows_),
      edge_without_owner_columns_(from.edge_without_owner_columns_),
      edge_with_owner_rows_(from.edge_with_owner_rows_),
      edge_with_owner_columns_(from.edge_with_owner_columns_),
      internal_owner_id_for_edge_(from.internal_owner_id_for_edge_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSCE.ExpandedEdgesArchive)
}

void ExpandedEdgesArchive::SharedCtor() {
}

ExpandedEdgesArchive::~ExpandedEdgesArchive() {
  // @@protoc_insertion_point(destructor:TSCE.ExpandedEdgesArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ExpandedEdgesArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ExpandedEdgesArchive::ArenaDtor(void* object) {
  ExpandedEdgesArchive* _this = reinterpret_cast< ExpandedEdgesArchive* >(object);
  (void)_this;
}
void ExpandedEdgesArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExpandedEdgesArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ExpandedEdgesArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.ExpandedEdgesArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  edge_without_owner_rows_.Clear();
  edge_without_owner_columns_.Clear();
  edge_with_owner_rows_.Clear();
  edge_with_owner_columns_.Clear();
  internal_owner_id_for_edge_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExpandedEdgesArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 edge_without_owner_rows = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_edge_without_owner_rows(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_edge_without_owner_rows(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 edge_without_owner_columns = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_edge_without_owner_columns(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_edge_without_owner_columns(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 edge_with_owner_rows = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_edge_with_owner_rows(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_edge_with_owner_rows(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 edge_with_owner_columns = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_edge_with_owner_columns(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_edge_with_owner_columns(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 internal_owner_id_for_edge = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_internal_owner_id_for_edge(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_internal_owner_id_for_edge(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExpandedEdgesArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.ExpandedEdgesArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 edge_without_owner_rows = 1;
  for (int i = 0, n = this->_internal_edge_without_owner_rows_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_edge_without_owner_rows(i), target);
  }

  // repeated uint32 edge_without_owner_columns = 2;
  for (int i = 0, n = this->_internal_edge_without_owner_columns_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_edge_without_owner_columns(i), target);
  }

  // repeated uint32 edge_with_owner_rows = 3;
  for (int i = 0, n = this->_internal_edge_with_owner_rows_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_edge_with_owner_rows(i), target);
  }

  // repeated uint32 edge_with_owner_columns = 4;
  for (int i = 0, n = this->_internal_edge_with_owner_columns_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_edge_with_owner_columns(i), target);
  }

  // repeated uint32 internal_owner_id_for_edge = 5;
  for (int i = 0, n = this->_internal_internal_owner_id_for_edge_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_internal_owner_id_for_edge(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.ExpandedEdgesArchive)
  return target;
}

size_t ExpandedEdgesArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.ExpandedEdgesArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 edge_without_owner_rows = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->edge_without_owner_rows_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_edge_without_owner_rows_size());
    total_size += data_size;
  }

  // repeated uint32 edge_without_owner_columns = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->edge_without_owner_columns_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_edge_without_owner_columns_size());
    total_size += data_size;
  }

  // repeated uint32 edge_with_owner_rows = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->edge_with_owner_rows_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_edge_with_owner_rows_size());
    total_size += data_size;
  }

  // repeated uint32 edge_with_owner_columns = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->edge_with_owner_columns_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_edge_with_owner_columns_size());
    total_size += data_size;
  }

  // repeated uint32 internal_owner_id_for_edge = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->internal_owner_id_for_edge_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_internal_owner_id_for_edge_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExpandedEdgesArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.ExpandedEdgesArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ExpandedEdgesArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ExpandedEdgesArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.ExpandedEdgesArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.ExpandedEdgesArchive)
    MergeFrom(*source);
  }
}

void ExpandedEdgesArchive::MergeFrom(const ExpandedEdgesArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.ExpandedEdgesArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  edge_without_owner_rows_.MergeFrom(from.edge_without_owner_rows_);
  edge_without_owner_columns_.MergeFrom(from.edge_without_owner_columns_);
  edge_with_owner_rows_.MergeFrom(from.edge_with_owner_rows_);
  edge_with_owner_columns_.MergeFrom(from.edge_with_owner_columns_);
  internal_owner_id_for_edge_.MergeFrom(from.internal_owner_id_for_edge_);
}

void ExpandedEdgesArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.ExpandedEdgesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExpandedEdgesArchive::CopyFrom(const ExpandedEdgesArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.ExpandedEdgesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExpandedEdgesArchive::IsInitialized() const {
  return true;
}

void ExpandedEdgesArchive::InternalSwap(ExpandedEdgesArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  edge_without_owner_rows_.InternalSwap(&other->edge_without_owner_rows_);
  edge_without_owner_columns_.InternalSwap(&other->edge_without_owner_columns_);
  edge_with_owner_rows_.InternalSwap(&other->edge_with_owner_rows_);
  edge_with_owner_columns_.InternalSwap(&other->edge_with_owner_columns_);
  internal_owner_id_for_edge_.InternalSwap(&other->internal_owner_id_for_edge_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExpandedEdgesArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[24]);
}

// ===================================================================

class CellRecordArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CellRecordArchive>()._has_bits_);
  static void set_has_column(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_row(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_dirty_self_plus_precedents_count(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_in_a_cycle(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_contains_a_formula(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_has_calculated_precedents(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_calculate_precedents_on_next_recalc(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_translate_for_excel_import_on_next_recalc(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::TSCE::EdgesArchive& edges(const CellRecordArchive* msg);
  static void set_has_edges(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000006) ^ 0x00000006) != 0;
  }
};

const ::TSCE::EdgesArchive&
CellRecordArchive::_Internal::edges(const CellRecordArchive* msg) {
  return *msg->edges_;
}
CellRecordArchive::CellRecordArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  edge_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.CellRecordArchive)
}
CellRecordArchive::CellRecordArchive(const CellRecordArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      edge_(from.edge_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_edges()) {
    edges_ = new ::TSCE::EdgesArchive(*from.edges_);
  } else {
    edges_ = nullptr;
  }
  ::memcpy(&column_, &from.column_,
    static_cast<size_t>(reinterpret_cast<char*>(&contains_a_formula_) -
    reinterpret_cast<char*>(&column_)) + sizeof(contains_a_formula_));
  // @@protoc_insertion_point(copy_constructor:TSCE.CellRecordArchive)
}

void CellRecordArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&edges_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&translate_for_excel_import_on_next_recalc_) -
    reinterpret_cast<char*>(&edges_)) + sizeof(translate_for_excel_import_on_next_recalc_));
contains_a_formula_ = true;
}

CellRecordArchive::~CellRecordArchive() {
  // @@protoc_insertion_point(destructor:TSCE.CellRecordArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CellRecordArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete edges_;
}

void CellRecordArchive::ArenaDtor(void* object) {
  CellRecordArchive* _this = reinterpret_cast< CellRecordArchive* >(object);
  (void)_this;
}
void CellRecordArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CellRecordArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CellRecordArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.CellRecordArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  edge_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(edges_ != nullptr);
    edges_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&column_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&translate_for_excel_import_on_next_recalc_) -
        reinterpret_cast<char*>(&column_)) + sizeof(translate_for_excel_import_on_next_recalc_));
  }
  contains_a_formula_ = true;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CellRecordArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 column = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_column(&has_bits);
          column_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 row = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_row(&has_bits);
          row_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 dirty_self_plus_precedents_count = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_dirty_self_plus_precedents_count(&has_bits);
          dirty_self_plus_precedents_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_in_a_cycle = 4 [default = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_is_in_a_cycle(&has_bits);
          is_in_a_cycle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSCE.EdgeArchive edge = 5 [deprecated = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_edge(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool contains_a_formula = 6 [default = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_contains_a_formula(&has_bits);
          contains_a_formula_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool has_calculated_precedents = 7 [default = false];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_has_calculated_precedents(&has_bits);
          has_calculated_precedents_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool calculate_precedents_on_next_recalc = 8 [default = false, deprecated = true];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_calculate_precedents_on_next_recalc(&has_bits);
          calculate_precedents_on_next_recalc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCE.EdgesArchive edges = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_edges(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool translate_for_excel_import_on_next_recalc = 10 [default = false];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_translate_for_excel_import_on_next_recalc(&has_bits);
          translate_for_excel_import_on_next_recalc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CellRecordArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.CellRecordArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 column = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_column(), target);
  }

  // required uint32 row = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_row(), target);
  }

  // optional uint64 dirty_self_plus_precedents_count = 3 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_dirty_self_plus_precedents_count(), target);
  }

  // optional bool is_in_a_cycle = 4 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_is_in_a_cycle(), target);
  }

  // repeated .TSCE.EdgeArchive edge = 5 [deprecated = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_edge_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_edge(i), target, stream);
  }

  // optional bool contains_a_formula = 6 [default = true];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_contains_a_formula(), target);
  }

  // optional bool has_calculated_precedents = 7 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_has_calculated_precedents(), target);
  }

  // optional bool calculate_precedents_on_next_recalc = 8 [default = false, deprecated = true];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_calculate_precedents_on_next_recalc(), target);
  }

  // optional .TSCE.EdgesArchive edges = 9;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::edges(this), target, stream);
  }

  // optional bool translate_for_excel_import_on_next_recalc = 10 [default = false];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_translate_for_excel_import_on_next_recalc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.CellRecordArchive)
  return target;
}

size_t CellRecordArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.CellRecordArchive)
  size_t total_size = 0;

  if (_internal_has_column()) {
    // required uint32 column = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_column());
  }

  if (_internal_has_row()) {
    // required uint32 row = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_row());
  }

  return total_size;
}
size_t CellRecordArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.CellRecordArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required uint32 column = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_column());

    // required uint32 row = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_row());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.EdgeArchive edge = 5 [deprecated = true];
  total_size += 1UL * this->_internal_edge_size();
  for (const auto& msg : this->edge_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .TSCE.EdgesArchive edges = 9;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *edges_);
  }

  if (cached_has_bits & 0x000000f8u) {
    // optional uint64 dirty_self_plus_precedents_count = 3 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_dirty_self_plus_precedents_count());
    }

    // optional bool is_in_a_cycle = 4 [default = false];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool has_calculated_precedents = 7 [default = false];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool calculate_precedents_on_next_recalc = 8 [default = false, deprecated = true];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool translate_for_excel_import_on_next_recalc = 10 [default = false];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  // optional bool contains_a_formula = 6 [default = true];
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CellRecordArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.CellRecordArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const CellRecordArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CellRecordArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.CellRecordArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.CellRecordArchive)
    MergeFrom(*source);
  }
}

void CellRecordArchive::MergeFrom(const CellRecordArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.CellRecordArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  edge_.MergeFrom(from.edge_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_edges()->::TSCE::EdgesArchive::MergeFrom(from._internal_edges());
    }
    if (cached_has_bits & 0x00000002u) {
      column_ = from.column_;
    }
    if (cached_has_bits & 0x00000004u) {
      row_ = from.row_;
    }
    if (cached_has_bits & 0x00000008u) {
      dirty_self_plus_precedents_count_ = from.dirty_self_plus_precedents_count_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_in_a_cycle_ = from.is_in_a_cycle_;
    }
    if (cached_has_bits & 0x00000020u) {
      has_calculated_precedents_ = from.has_calculated_precedents_;
    }
    if (cached_has_bits & 0x00000040u) {
      calculate_precedents_on_next_recalc_ = from.calculate_precedents_on_next_recalc_;
    }
    if (cached_has_bits & 0x00000080u) {
      translate_for_excel_import_on_next_recalc_ = from.translate_for_excel_import_on_next_recalc_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_contains_a_formula(from._internal_contains_a_formula());
  }
}

void CellRecordArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.CellRecordArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CellRecordArchive::CopyFrom(const CellRecordArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.CellRecordArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellRecordArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(edge_)) return false;
  return true;
}

void CellRecordArchive::InternalSwap(CellRecordArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  edge_.InternalSwap(&other->edge_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CellRecordArchive, translate_for_excel_import_on_next_recalc_)
      + sizeof(CellRecordArchive::translate_for_excel_import_on_next_recalc_)
      - PROTOBUF_FIELD_OFFSET(CellRecordArchive, edges_)>(
          reinterpret_cast<char*>(&edges_),
          reinterpret_cast<char*>(&other->edges_));
  swap(contains_a_formula_, other->contains_a_formula_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CellRecordArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[25]);
}

// ===================================================================

class CellDependenciesArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CellDependenciesArchive>()._has_bits_);
  static void set_has_num_dirty_cells(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CellDependenciesArchive::CellDependenciesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  cell_record_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.CellDependenciesArchive)
}
CellDependenciesArchive::CellDependenciesArchive(const CellDependenciesArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      cell_record_(from.cell_record_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  num_dirty_cells_ = from.num_dirty_cells_;
  // @@protoc_insertion_point(copy_constructor:TSCE.CellDependenciesArchive)
}

void CellDependenciesArchive::SharedCtor() {
num_dirty_cells_ = 0u;
}

CellDependenciesArchive::~CellDependenciesArchive() {
  // @@protoc_insertion_point(destructor:TSCE.CellDependenciesArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CellDependenciesArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CellDependenciesArchive::ArenaDtor(void* object) {
  CellDependenciesArchive* _this = reinterpret_cast< CellDependenciesArchive* >(object);
  (void)_this;
}
void CellDependenciesArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CellDependenciesArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CellDependenciesArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.CellDependenciesArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cell_record_.Clear();
  num_dirty_cells_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CellDependenciesArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSCE.CellRecordArchive cell_record = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cell_record(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 num_dirty_cells = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_num_dirty_cells(&has_bits);
          num_dirty_cells_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CellDependenciesArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.CellDependenciesArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSCE.CellRecordArchive cell_record = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_cell_record_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_cell_record(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 num_dirty_cells = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_num_dirty_cells(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.CellDependenciesArchive)
  return target;
}

size_t CellDependenciesArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.CellDependenciesArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.CellRecordArchive cell_record = 1;
  total_size += 1UL * this->_internal_cell_record_size();
  for (const auto& msg : this->cell_record_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 num_dirty_cells = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num_dirty_cells());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CellDependenciesArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.CellDependenciesArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const CellDependenciesArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CellDependenciesArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.CellDependenciesArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.CellDependenciesArchive)
    MergeFrom(*source);
  }
}

void CellDependenciesArchive::MergeFrom(const CellDependenciesArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.CellDependenciesArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cell_record_.MergeFrom(from.cell_record_);
  if (from._internal_has_num_dirty_cells()) {
    _internal_set_num_dirty_cells(from._internal_num_dirty_cells());
  }
}

void CellDependenciesArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.CellDependenciesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CellDependenciesArchive::CopyFrom(const CellDependenciesArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.CellDependenciesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellDependenciesArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(cell_record_)) return false;
  return true;
}

void CellDependenciesArchive::InternalSwap(CellDependenciesArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  cell_record_.InternalSwap(&other->cell_record_);
  swap(num_dirty_cells_, other->num_dirty_cells_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CellDependenciesArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[26]);
}

// ===================================================================

class CellRecordExpandedArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CellRecordExpandedArchive>()._has_bits_);
  static void set_has_column(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_row(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_dirty_self_plus_precedents_count(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_in_a_cycle(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_has_calculated_precedents(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSCE::ExpandedEdgesArchive& expanded_edges(const CellRecordExpandedArchive* msg);
  static void set_has_expanded_edges(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000006) ^ 0x00000006) != 0;
  }
};

const ::TSCE::ExpandedEdgesArchive&
CellRecordExpandedArchive::_Internal::expanded_edges(const CellRecordExpandedArchive* msg) {
  return *msg->expanded_edges_;
}
CellRecordExpandedArchive::CellRecordExpandedArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.CellRecordExpandedArchive)
}
CellRecordExpandedArchive::CellRecordExpandedArchive(const CellRecordExpandedArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_expanded_edges()) {
    expanded_edges_ = new ::TSCE::ExpandedEdgesArchive(*from.expanded_edges_);
  } else {
    expanded_edges_ = nullptr;
  }
  ::memcpy(&column_, &from.column_,
    static_cast<size_t>(reinterpret_cast<char*>(&has_calculated_precedents_) -
    reinterpret_cast<char*>(&column_)) + sizeof(has_calculated_precedents_));
  // @@protoc_insertion_point(copy_constructor:TSCE.CellRecordExpandedArchive)
}

void CellRecordExpandedArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&expanded_edges_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&has_calculated_precedents_) -
    reinterpret_cast<char*>(&expanded_edges_)) + sizeof(has_calculated_precedents_));
}

CellRecordExpandedArchive::~CellRecordExpandedArchive() {
  // @@protoc_insertion_point(destructor:TSCE.CellRecordExpandedArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CellRecordExpandedArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete expanded_edges_;
}

void CellRecordExpandedArchive::ArenaDtor(void* object) {
  CellRecordExpandedArchive* _this = reinterpret_cast< CellRecordExpandedArchive* >(object);
  (void)_this;
}
void CellRecordExpandedArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CellRecordExpandedArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CellRecordExpandedArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.CellRecordExpandedArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(expanded_edges_ != nullptr);
    expanded_edges_->Clear();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&column_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&has_calculated_precedents_) -
        reinterpret_cast<char*>(&column_)) + sizeof(has_calculated_precedents_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CellRecordExpandedArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 column = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_column(&has_bits);
          column_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 row = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_row(&has_bits);
          row_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 dirty_self_plus_precedents_count = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_dirty_self_plus_precedents_count(&has_bits);
          dirty_self_plus_precedents_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_in_a_cycle = 4 [default = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_is_in_a_cycle(&has_bits);
          is_in_a_cycle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool has_calculated_precedents = 5 [default = false];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_has_calculated_precedents(&has_bits);
          has_calculated_precedents_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCE.ExpandedEdgesArchive expanded_edges = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_expanded_edges(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CellRecordExpandedArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.CellRecordExpandedArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 column = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_column(), target);
  }

  // required uint32 row = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_row(), target);
  }

  // optional uint64 dirty_self_plus_precedents_count = 3 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_dirty_self_plus_precedents_count(), target);
  }

  // optional bool is_in_a_cycle = 4 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_is_in_a_cycle(), target);
  }

  // optional bool has_calculated_precedents = 5 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_has_calculated_precedents(), target);
  }

  // optional .TSCE.ExpandedEdgesArchive expanded_edges = 6;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::expanded_edges(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.CellRecordExpandedArchive)
  return target;
}

size_t CellRecordExpandedArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.CellRecordExpandedArchive)
  size_t total_size = 0;

  if (_internal_has_column()) {
    // required uint32 column = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_column());
  }

  if (_internal_has_row()) {
    // required uint32 row = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_row());
  }

  return total_size;
}
size_t CellRecordExpandedArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.CellRecordExpandedArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required uint32 column = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_column());

    // required uint32 row = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_row());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSCE.ExpandedEdgesArchive expanded_edges = 6;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *expanded_edges_);
  }

  if (cached_has_bits & 0x00000038u) {
    // optional uint64 dirty_self_plus_precedents_count = 3 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_dirty_self_plus_precedents_count());
    }

    // optional bool is_in_a_cycle = 4 [default = false];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool has_calculated_precedents = 5 [default = false];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CellRecordExpandedArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.CellRecordExpandedArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const CellRecordExpandedArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CellRecordExpandedArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.CellRecordExpandedArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.CellRecordExpandedArchive)
    MergeFrom(*source);
  }
}

void CellRecordExpandedArchive::MergeFrom(const CellRecordExpandedArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.CellRecordExpandedArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_expanded_edges()->::TSCE::ExpandedEdgesArchive::MergeFrom(from._internal_expanded_edges());
    }
    if (cached_has_bits & 0x00000002u) {
      column_ = from.column_;
    }
    if (cached_has_bits & 0x00000004u) {
      row_ = from.row_;
    }
    if (cached_has_bits & 0x00000008u) {
      dirty_self_plus_precedents_count_ = from.dirty_self_plus_precedents_count_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_in_a_cycle_ = from.is_in_a_cycle_;
    }
    if (cached_has_bits & 0x00000020u) {
      has_calculated_precedents_ = from.has_calculated_precedents_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CellRecordExpandedArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.CellRecordExpandedArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CellRecordExpandedArchive::CopyFrom(const CellRecordExpandedArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.CellRecordExpandedArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellRecordExpandedArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void CellRecordExpandedArchive::InternalSwap(CellRecordExpandedArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CellRecordExpandedArchive, has_calculated_precedents_)
      + sizeof(CellRecordExpandedArchive::has_calculated_precedents_)
      - PROTOBUF_FIELD_OFFSET(CellRecordExpandedArchive, expanded_edges_)>(
          reinterpret_cast<char*>(&expanded_edges_),
          reinterpret_cast<char*>(&other->expanded_edges_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CellRecordExpandedArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[27]);
}

// ===================================================================

class CellDependenciesExpandedArchive::_Internal {
 public:
};

CellDependenciesExpandedArchive::CellDependenciesExpandedArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  cell_record_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.CellDependenciesExpandedArchive)
}
CellDependenciesExpandedArchive::CellDependenciesExpandedArchive(const CellDependenciesExpandedArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      cell_record_(from.cell_record_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSCE.CellDependenciesExpandedArchive)
}

void CellDependenciesExpandedArchive::SharedCtor() {
}

CellDependenciesExpandedArchive::~CellDependenciesExpandedArchive() {
  // @@protoc_insertion_point(destructor:TSCE.CellDependenciesExpandedArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CellDependenciesExpandedArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CellDependenciesExpandedArchive::ArenaDtor(void* object) {
  CellDependenciesExpandedArchive* _this = reinterpret_cast< CellDependenciesExpandedArchive* >(object);
  (void)_this;
}
void CellDependenciesExpandedArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CellDependenciesExpandedArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CellDependenciesExpandedArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.CellDependenciesExpandedArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cell_record_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CellDependenciesExpandedArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSCE.CellRecordExpandedArchive cell_record = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cell_record(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CellDependenciesExpandedArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.CellDependenciesExpandedArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSCE.CellRecordExpandedArchive cell_record = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_cell_record_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_cell_record(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.CellDependenciesExpandedArchive)
  return target;
}

size_t CellDependenciesExpandedArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.CellDependenciesExpandedArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.CellRecordExpandedArchive cell_record = 1;
  total_size += 1UL * this->_internal_cell_record_size();
  for (const auto& msg : this->cell_record_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CellDependenciesExpandedArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.CellDependenciesExpandedArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const CellDependenciesExpandedArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CellDependenciesExpandedArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.CellDependenciesExpandedArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.CellDependenciesExpandedArchive)
    MergeFrom(*source);
  }
}

void CellDependenciesExpandedArchive::MergeFrom(const CellDependenciesExpandedArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.CellDependenciesExpandedArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cell_record_.MergeFrom(from.cell_record_);
}

void CellDependenciesExpandedArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.CellDependenciesExpandedArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CellDependenciesExpandedArchive::CopyFrom(const CellDependenciesExpandedArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.CellDependenciesExpandedArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellDependenciesExpandedArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(cell_record_)) return false;
  return true;
}

void CellDependenciesExpandedArchive::InternalSwap(CellDependenciesExpandedArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  cell_record_.InternalSwap(&other->cell_record_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CellDependenciesExpandedArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[28]);
}

// ===================================================================

class CellRecordTileArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CellRecordTileArchive>()._has_bits_);
  static void set_has_internal_owner_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tile_column_begin(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_tile_row_begin(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

CellRecordTileArchive::CellRecordTileArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  cell_records_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.CellRecordTileArchive)
}
CellRecordTileArchive::CellRecordTileArchive(const CellRecordTileArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      cell_records_(from.cell_records_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&internal_owner_id_, &from.internal_owner_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&tile_row_begin_) -
    reinterpret_cast<char*>(&internal_owner_id_)) + sizeof(tile_row_begin_));
  // @@protoc_insertion_point(copy_constructor:TSCE.CellRecordTileArchive)
}

void CellRecordTileArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&internal_owner_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&tile_row_begin_) -
    reinterpret_cast<char*>(&internal_owner_id_)) + sizeof(tile_row_begin_));
}

CellRecordTileArchive::~CellRecordTileArchive() {
  // @@protoc_insertion_point(destructor:TSCE.CellRecordTileArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CellRecordTileArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CellRecordTileArchive::ArenaDtor(void* object) {
  CellRecordTileArchive* _this = reinterpret_cast< CellRecordTileArchive* >(object);
  (void)_this;
}
void CellRecordTileArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CellRecordTileArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CellRecordTileArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.CellRecordTileArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cell_records_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&internal_owner_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tile_row_begin_) -
        reinterpret_cast<char*>(&internal_owner_id_)) + sizeof(tile_row_begin_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CellRecordTileArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 internal_owner_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_internal_owner_id(&has_bits);
          internal_owner_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 tile_column_begin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_tile_column_begin(&has_bits);
          tile_column_begin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 tile_row_begin = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_tile_row_begin(&has_bits);
          tile_row_begin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSCE.CellRecordExpandedArchive cell_records = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cell_records(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CellRecordTileArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.CellRecordTileArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 internal_owner_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_internal_owner_id(), target);
  }

  // required uint32 tile_column_begin = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_tile_column_begin(), target);
  }

  // required uint32 tile_row_begin = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_tile_row_begin(), target);
  }

  // repeated .TSCE.CellRecordExpandedArchive cell_records = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_cell_records_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_cell_records(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.CellRecordTileArchive)
  return target;
}

size_t CellRecordTileArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.CellRecordTileArchive)
  size_t total_size = 0;

  if (_internal_has_internal_owner_id()) {
    // required uint32 internal_owner_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_internal_owner_id());
  }

  if (_internal_has_tile_column_begin()) {
    // required uint32 tile_column_begin = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tile_column_begin());
  }

  if (_internal_has_tile_row_begin()) {
    // required uint32 tile_row_begin = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tile_row_begin());
  }

  return total_size;
}
size_t CellRecordTileArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.CellRecordTileArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 internal_owner_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_internal_owner_id());

    // required uint32 tile_column_begin = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tile_column_begin());

    // required uint32 tile_row_begin = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tile_row_begin());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.CellRecordExpandedArchive cell_records = 4;
  total_size += 1UL * this->_internal_cell_records_size();
  for (const auto& msg : this->cell_records_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CellRecordTileArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.CellRecordTileArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const CellRecordTileArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CellRecordTileArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.CellRecordTileArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.CellRecordTileArchive)
    MergeFrom(*source);
  }
}

void CellRecordTileArchive::MergeFrom(const CellRecordTileArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.CellRecordTileArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cell_records_.MergeFrom(from.cell_records_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      internal_owner_id_ = from.internal_owner_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      tile_column_begin_ = from.tile_column_begin_;
    }
    if (cached_has_bits & 0x00000004u) {
      tile_row_begin_ = from.tile_row_begin_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CellRecordTileArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.CellRecordTileArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CellRecordTileArchive::CopyFrom(const CellRecordTileArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.CellRecordTileArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellRecordTileArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(cell_records_)) return false;
  return true;
}

void CellRecordTileArchive::InternalSwap(CellRecordTileArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  cell_records_.InternalSwap(&other->cell_records_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CellRecordTileArchive, tile_row_begin_)
      + sizeof(CellRecordTileArchive::tile_row_begin_)
      - PROTOBUF_FIELD_OFFSET(CellRecordTileArchive, internal_owner_id_)>(
          reinterpret_cast<char*>(&internal_owner_id_),
          reinterpret_cast<char*>(&other->internal_owner_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CellRecordTileArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[29]);
}

// ===================================================================

class CellDependenciesTiledArchive::_Internal {
 public:
};

void CellDependenciesTiledArchive::clear_cell_record_tiles() {
  cell_record_tiles_.Clear();
}
CellDependenciesTiledArchive::CellDependenciesTiledArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  cell_record_tiles_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.CellDependenciesTiledArchive)
}
CellDependenciesTiledArchive::CellDependenciesTiledArchive(const CellDependenciesTiledArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      cell_record_tiles_(from.cell_record_tiles_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSCE.CellDependenciesTiledArchive)
}

void CellDependenciesTiledArchive::SharedCtor() {
}

CellDependenciesTiledArchive::~CellDependenciesTiledArchive() {
  // @@protoc_insertion_point(destructor:TSCE.CellDependenciesTiledArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CellDependenciesTiledArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CellDependenciesTiledArchive::ArenaDtor(void* object) {
  CellDependenciesTiledArchive* _this = reinterpret_cast< CellDependenciesTiledArchive* >(object);
  (void)_this;
}
void CellDependenciesTiledArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CellDependenciesTiledArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CellDependenciesTiledArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.CellDependenciesTiledArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cell_record_tiles_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CellDependenciesTiledArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSP.Reference cell_record_tiles = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cell_record_tiles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CellDependenciesTiledArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.CellDependenciesTiledArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSP.Reference cell_record_tiles = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_cell_record_tiles_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_cell_record_tiles(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.CellDependenciesTiledArchive)
  return target;
}

size_t CellDependenciesTiledArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.CellDependenciesTiledArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference cell_record_tiles = 1;
  total_size += 1UL * this->_internal_cell_record_tiles_size();
  for (const auto& msg : this->cell_record_tiles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CellDependenciesTiledArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.CellDependenciesTiledArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const CellDependenciesTiledArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CellDependenciesTiledArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.CellDependenciesTiledArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.CellDependenciesTiledArchive)
    MergeFrom(*source);
  }
}

void CellDependenciesTiledArchive::MergeFrom(const CellDependenciesTiledArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.CellDependenciesTiledArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cell_record_tiles_.MergeFrom(from.cell_record_tiles_);
}

void CellDependenciesTiledArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.CellDependenciesTiledArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CellDependenciesTiledArchive::CopyFrom(const CellDependenciesTiledArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.CellDependenciesTiledArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellDependenciesTiledArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(cell_record_tiles_)) return false;
  return true;
}

void CellDependenciesTiledArchive::InternalSwap(CellDependenciesTiledArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  cell_record_tiles_.InternalSwap(&other->cell_record_tiles_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CellDependenciesTiledArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[30]);
}

// ===================================================================

class VolatileDependenciesArchive::_Internal {
 public:
};

VolatileDependenciesArchive::VolatileDependenciesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  volatile_time_cell_column_(arena),
  volatile_time_cell_row_(arena),
  volatile_random_cell_column_(arena),
  volatile_random_cell_row_(arena),
  volatile_location_cell_column_(arena),
  volatile_location_cell_row_(arena),
  volatile_compass_cell_column_(arena),
  volatile_compass_cell_row_(arena),
  calculated_dependency_cell_column_(arena),
  calculated_dependency_cell_row_(arena),
  volatile_geometry_cell_(arena),
  volatile_geometry_cell_reference_(arena),
  volatile_locale_cell_column_(arena),
  volatile_locale_cell_row_(arena),
  volatile_sheet_table_name_cell_column_(arena),
  volatile_sheet_table_name_cell_row_(arena),
  volatile_remote_data_cell_column_(arena),
  volatile_remote_data_cell_row_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.VolatileDependenciesArchive)
}
VolatileDependenciesArchive::VolatileDependenciesArchive(const VolatileDependenciesArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      volatile_time_cell_column_(from.volatile_time_cell_column_),
      volatile_time_cell_row_(from.volatile_time_cell_row_),
      volatile_random_cell_column_(from.volatile_random_cell_column_),
      volatile_random_cell_row_(from.volatile_random_cell_row_),
      volatile_location_cell_column_(from.volatile_location_cell_column_),
      volatile_location_cell_row_(from.volatile_location_cell_row_),
      volatile_compass_cell_column_(from.volatile_compass_cell_column_),
      volatile_compass_cell_row_(from.volatile_compass_cell_row_),
      calculated_dependency_cell_column_(from.calculated_dependency_cell_column_),
      calculated_dependency_cell_row_(from.calculated_dependency_cell_row_),
      volatile_geometry_cell_(from.volatile_geometry_cell_),
      volatile_geometry_cell_reference_(from.volatile_geometry_cell_reference_),
      volatile_locale_cell_column_(from.volatile_locale_cell_column_),
      volatile_locale_cell_row_(from.volatile_locale_cell_row_),
      volatile_sheet_table_name_cell_column_(from.volatile_sheet_table_name_cell_column_),
      volatile_sheet_table_name_cell_row_(from.volatile_sheet_table_name_cell_row_),
      volatile_remote_data_cell_column_(from.volatile_remote_data_cell_column_),
      volatile_remote_data_cell_row_(from.volatile_remote_data_cell_row_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSCE.VolatileDependenciesArchive)
}

void VolatileDependenciesArchive::SharedCtor() {
}

VolatileDependenciesArchive::~VolatileDependenciesArchive() {
  // @@protoc_insertion_point(destructor:TSCE.VolatileDependenciesArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VolatileDependenciesArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void VolatileDependenciesArchive::ArenaDtor(void* object) {
  VolatileDependenciesArchive* _this = reinterpret_cast< VolatileDependenciesArchive* >(object);
  (void)_this;
}
void VolatileDependenciesArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VolatileDependenciesArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VolatileDependenciesArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.VolatileDependenciesArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  volatile_time_cell_column_.Clear();
  volatile_time_cell_row_.Clear();
  volatile_random_cell_column_.Clear();
  volatile_random_cell_row_.Clear();
  volatile_location_cell_column_.Clear();
  volatile_location_cell_row_.Clear();
  volatile_compass_cell_column_.Clear();
  volatile_compass_cell_row_.Clear();
  calculated_dependency_cell_column_.Clear();
  calculated_dependency_cell_row_.Clear();
  volatile_geometry_cell_.Clear();
  volatile_geometry_cell_reference_.Clear();
  volatile_locale_cell_column_.Clear();
  volatile_locale_cell_row_.Clear();
  volatile_sheet_table_name_cell_column_.Clear();
  volatile_sheet_table_name_cell_row_.Clear();
  volatile_remote_data_cell_column_.Clear();
  volatile_remote_data_cell_row_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VolatileDependenciesArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 volatile_time_cell_column = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_volatile_time_cell_column(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_volatile_time_cell_column(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 volatile_time_cell_row = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_volatile_time_cell_row(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_volatile_time_cell_row(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 volatile_random_cell_column = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_volatile_random_cell_column(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_volatile_random_cell_column(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 volatile_random_cell_row = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_volatile_random_cell_row(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_volatile_random_cell_row(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 volatile_location_cell_column = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_volatile_location_cell_column(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_volatile_location_cell_column(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 volatile_location_cell_row = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_volatile_location_cell_row(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<48>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_volatile_location_cell_row(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 volatile_compass_cell_column = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_volatile_compass_cell_column(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<56>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_volatile_compass_cell_column(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 volatile_compass_cell_row = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_volatile_compass_cell_row(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<64>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_volatile_compass_cell_row(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 calculated_dependency_cell_column = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_calculated_dependency_cell_column(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<72>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_calculated_dependency_cell_column(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 calculated_dependency_cell_row = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_calculated_dependency_cell_row(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<80>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_calculated_dependency_cell_row(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSCE.CellCoordinateArchive volatile_geometry_cell = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_volatile_geometry_cell(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSCE.CellReferenceArchive volatile_geometry_cell_reference = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_volatile_geometry_cell_reference(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated uint32 volatile_locale_cell_column = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_volatile_locale_cell_column(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<120>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_volatile_locale_cell_column(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 volatile_locale_cell_row = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_volatile_locale_cell_row(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<128>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_volatile_locale_cell_row(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 volatile_sheet_table_name_cell_column = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_volatile_sheet_table_name_cell_column(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<136>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_volatile_sheet_table_name_cell_column(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 volatile_sheet_table_name_cell_row = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_volatile_sheet_table_name_cell_row(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<144>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_volatile_sheet_table_name_cell_row(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 volatile_remote_data_cell_column = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_volatile_remote_data_cell_column(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<152>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_volatile_remote_data_cell_column(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 volatile_remote_data_cell_row = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_volatile_remote_data_cell_row(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<160>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_volatile_remote_data_cell_row(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VolatileDependenciesArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.VolatileDependenciesArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 volatile_time_cell_column = 1;
  for (int i = 0, n = this->_internal_volatile_time_cell_column_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_volatile_time_cell_column(i), target);
  }

  // repeated uint32 volatile_time_cell_row = 2;
  for (int i = 0, n = this->_internal_volatile_time_cell_row_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_volatile_time_cell_row(i), target);
  }

  // repeated uint32 volatile_random_cell_column = 3;
  for (int i = 0, n = this->_internal_volatile_random_cell_column_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_volatile_random_cell_column(i), target);
  }

  // repeated uint32 volatile_random_cell_row = 4;
  for (int i = 0, n = this->_internal_volatile_random_cell_row_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_volatile_random_cell_row(i), target);
  }

  // repeated uint32 volatile_location_cell_column = 5;
  for (int i = 0, n = this->_internal_volatile_location_cell_column_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_volatile_location_cell_column(i), target);
  }

  // repeated uint32 volatile_location_cell_row = 6;
  for (int i = 0, n = this->_internal_volatile_location_cell_row_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_volatile_location_cell_row(i), target);
  }

  // repeated uint32 volatile_compass_cell_column = 7;
  for (int i = 0, n = this->_internal_volatile_compass_cell_column_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_volatile_compass_cell_column(i), target);
  }

  // repeated uint32 volatile_compass_cell_row = 8;
  for (int i = 0, n = this->_internal_volatile_compass_cell_row_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_volatile_compass_cell_row(i), target);
  }

  // repeated uint32 calculated_dependency_cell_column = 9;
  for (int i = 0, n = this->_internal_calculated_dependency_cell_column_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_calculated_dependency_cell_column(i), target);
  }

  // repeated uint32 calculated_dependency_cell_row = 10;
  for (int i = 0, n = this->_internal_calculated_dependency_cell_row_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_calculated_dependency_cell_row(i), target);
  }

  // repeated .TSCE.CellCoordinateArchive volatile_geometry_cell = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_volatile_geometry_cell_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_volatile_geometry_cell(i), target, stream);
  }

  // repeated .TSCE.CellReferenceArchive volatile_geometry_cell_reference = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_volatile_geometry_cell_reference_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, this->_internal_volatile_geometry_cell_reference(i), target, stream);
  }

  // repeated uint32 volatile_locale_cell_column = 15;
  for (int i = 0, n = this->_internal_volatile_locale_cell_column_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_volatile_locale_cell_column(i), target);
  }

  // repeated uint32 volatile_locale_cell_row = 16;
  for (int i = 0, n = this->_internal_volatile_locale_cell_row_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_volatile_locale_cell_row(i), target);
  }

  // repeated uint32 volatile_sheet_table_name_cell_column = 17;
  for (int i = 0, n = this->_internal_volatile_sheet_table_name_cell_column_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_volatile_sheet_table_name_cell_column(i), target);
  }

  // repeated uint32 volatile_sheet_table_name_cell_row = 18;
  for (int i = 0, n = this->_internal_volatile_sheet_table_name_cell_row_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_volatile_sheet_table_name_cell_row(i), target);
  }

  // repeated uint32 volatile_remote_data_cell_column = 19;
  for (int i = 0, n = this->_internal_volatile_remote_data_cell_column_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(19, this->_internal_volatile_remote_data_cell_column(i), target);
  }

  // repeated uint32 volatile_remote_data_cell_row = 20;
  for (int i = 0, n = this->_internal_volatile_remote_data_cell_row_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_volatile_remote_data_cell_row(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.VolatileDependenciesArchive)
  return target;
}

size_t VolatileDependenciesArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.VolatileDependenciesArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 volatile_time_cell_column = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->volatile_time_cell_column_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_volatile_time_cell_column_size());
    total_size += data_size;
  }

  // repeated uint32 volatile_time_cell_row = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->volatile_time_cell_row_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_volatile_time_cell_row_size());
    total_size += data_size;
  }

  // repeated uint32 volatile_random_cell_column = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->volatile_random_cell_column_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_volatile_random_cell_column_size());
    total_size += data_size;
  }

  // repeated uint32 volatile_random_cell_row = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->volatile_random_cell_row_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_volatile_random_cell_row_size());
    total_size += data_size;
  }

  // repeated uint32 volatile_location_cell_column = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->volatile_location_cell_column_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_volatile_location_cell_column_size());
    total_size += data_size;
  }

  // repeated uint32 volatile_location_cell_row = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->volatile_location_cell_row_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_volatile_location_cell_row_size());
    total_size += data_size;
  }

  // repeated uint32 volatile_compass_cell_column = 7;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->volatile_compass_cell_column_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_volatile_compass_cell_column_size());
    total_size += data_size;
  }

  // repeated uint32 volatile_compass_cell_row = 8;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->volatile_compass_cell_row_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_volatile_compass_cell_row_size());
    total_size += data_size;
  }

  // repeated uint32 calculated_dependency_cell_column = 9;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->calculated_dependency_cell_column_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_calculated_dependency_cell_column_size());
    total_size += data_size;
  }

  // repeated uint32 calculated_dependency_cell_row = 10;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->calculated_dependency_cell_row_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_calculated_dependency_cell_row_size());
    total_size += data_size;
  }

  // repeated .TSCE.CellCoordinateArchive volatile_geometry_cell = 11;
  total_size += 1UL * this->_internal_volatile_geometry_cell_size();
  for (const auto& msg : this->volatile_geometry_cell_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSCE.CellReferenceArchive volatile_geometry_cell_reference = 13;
  total_size += 1UL * this->_internal_volatile_geometry_cell_reference_size();
  for (const auto& msg : this->volatile_geometry_cell_reference_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 volatile_locale_cell_column = 15;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->volatile_locale_cell_column_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_volatile_locale_cell_column_size());
    total_size += data_size;
  }

  // repeated uint32 volatile_locale_cell_row = 16;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->volatile_locale_cell_row_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_volatile_locale_cell_row_size());
    total_size += data_size;
  }

  // repeated uint32 volatile_sheet_table_name_cell_column = 17;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->volatile_sheet_table_name_cell_column_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_volatile_sheet_table_name_cell_column_size());
    total_size += data_size;
  }

  // repeated uint32 volatile_sheet_table_name_cell_row = 18;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->volatile_sheet_table_name_cell_row_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_volatile_sheet_table_name_cell_row_size());
    total_size += data_size;
  }

  // repeated uint32 volatile_remote_data_cell_column = 19;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->volatile_remote_data_cell_column_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_volatile_remote_data_cell_column_size());
    total_size += data_size;
  }

  // repeated uint32 volatile_remote_data_cell_row = 20;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->volatile_remote_data_cell_row_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_volatile_remote_data_cell_row_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VolatileDependenciesArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.VolatileDependenciesArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const VolatileDependenciesArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VolatileDependenciesArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.VolatileDependenciesArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.VolatileDependenciesArchive)
    MergeFrom(*source);
  }
}

void VolatileDependenciesArchive::MergeFrom(const VolatileDependenciesArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.VolatileDependenciesArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  volatile_time_cell_column_.MergeFrom(from.volatile_time_cell_column_);
  volatile_time_cell_row_.MergeFrom(from.volatile_time_cell_row_);
  volatile_random_cell_column_.MergeFrom(from.volatile_random_cell_column_);
  volatile_random_cell_row_.MergeFrom(from.volatile_random_cell_row_);
  volatile_location_cell_column_.MergeFrom(from.volatile_location_cell_column_);
  volatile_location_cell_row_.MergeFrom(from.volatile_location_cell_row_);
  volatile_compass_cell_column_.MergeFrom(from.volatile_compass_cell_column_);
  volatile_compass_cell_row_.MergeFrom(from.volatile_compass_cell_row_);
  calculated_dependency_cell_column_.MergeFrom(from.calculated_dependency_cell_column_);
  calculated_dependency_cell_row_.MergeFrom(from.calculated_dependency_cell_row_);
  volatile_geometry_cell_.MergeFrom(from.volatile_geometry_cell_);
  volatile_geometry_cell_reference_.MergeFrom(from.volatile_geometry_cell_reference_);
  volatile_locale_cell_column_.MergeFrom(from.volatile_locale_cell_column_);
  volatile_locale_cell_row_.MergeFrom(from.volatile_locale_cell_row_);
  volatile_sheet_table_name_cell_column_.MergeFrom(from.volatile_sheet_table_name_cell_column_);
  volatile_sheet_table_name_cell_row_.MergeFrom(from.volatile_sheet_table_name_cell_row_);
  volatile_remote_data_cell_column_.MergeFrom(from.volatile_remote_data_cell_column_);
  volatile_remote_data_cell_row_.MergeFrom(from.volatile_remote_data_cell_row_);
}

void VolatileDependenciesArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.VolatileDependenciesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VolatileDependenciesArchive::CopyFrom(const VolatileDependenciesArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.VolatileDependenciesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VolatileDependenciesArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(volatile_geometry_cell_reference_)) return false;
  return true;
}

void VolatileDependenciesArchive::InternalSwap(VolatileDependenciesArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  volatile_time_cell_column_.InternalSwap(&other->volatile_time_cell_column_);
  volatile_time_cell_row_.InternalSwap(&other->volatile_time_cell_row_);
  volatile_random_cell_column_.InternalSwap(&other->volatile_random_cell_column_);
  volatile_random_cell_row_.InternalSwap(&other->volatile_random_cell_row_);
  volatile_location_cell_column_.InternalSwap(&other->volatile_location_cell_column_);
  volatile_location_cell_row_.InternalSwap(&other->volatile_location_cell_row_);
  volatile_compass_cell_column_.InternalSwap(&other->volatile_compass_cell_column_);
  volatile_compass_cell_row_.InternalSwap(&other->volatile_compass_cell_row_);
  calculated_dependency_cell_column_.InternalSwap(&other->calculated_dependency_cell_column_);
  calculated_dependency_cell_row_.InternalSwap(&other->calculated_dependency_cell_row_);
  volatile_geometry_cell_.InternalSwap(&other->volatile_geometry_cell_);
  volatile_geometry_cell_reference_.InternalSwap(&other->volatile_geometry_cell_reference_);
  volatile_locale_cell_column_.InternalSwap(&other->volatile_locale_cell_column_);
  volatile_locale_cell_row_.InternalSwap(&other->volatile_locale_cell_row_);
  volatile_sheet_table_name_cell_column_.InternalSwap(&other->volatile_sheet_table_name_cell_column_);
  volatile_sheet_table_name_cell_row_.InternalSwap(&other->volatile_sheet_table_name_cell_row_);
  volatile_remote_data_cell_column_.InternalSwap(&other->volatile_remote_data_cell_column_);
  volatile_remote_data_cell_row_.InternalSwap(&other->volatile_remote_data_cell_row_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VolatileDependenciesArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[31]);
}

// ===================================================================

class VolatileDependenciesExpandedArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<VolatileDependenciesExpandedArchive>()._has_bits_);
  static const ::TSCE::CellCoordSetArchive& volatile_time_cells(const VolatileDependenciesExpandedArchive* msg);
  static void set_has_volatile_time_cells(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSCE::CellCoordSetArchive& volatile_random_cells(const VolatileDependenciesExpandedArchive* msg);
  static void set_has_volatile_random_cells(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSCE::CellCoordSetArchive& volatile_locale_cells(const VolatileDependenciesExpandedArchive* msg);
  static void set_has_volatile_locale_cells(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSCE::CellCoordSetArchive& volatile_sheet_table_name_cells(const VolatileDependenciesExpandedArchive* msg);
  static void set_has_volatile_sheet_table_name_cells(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSCE::CellCoordSetArchive& volatile_remote_data_cells(const VolatileDependenciesExpandedArchive* msg);
  static void set_has_volatile_remote_data_cells(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSCE::InternalCellRefSetArchive& volatile_geometry_cell_refs(const VolatileDependenciesExpandedArchive* msg);
  static void set_has_volatile_geometry_cell_refs(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::TSCE::CellCoordSetArchive&
VolatileDependenciesExpandedArchive::_Internal::volatile_time_cells(const VolatileDependenciesExpandedArchive* msg) {
  return *msg->volatile_time_cells_;
}
const ::TSCE::CellCoordSetArchive&
VolatileDependenciesExpandedArchive::_Internal::volatile_random_cells(const VolatileDependenciesExpandedArchive* msg) {
  return *msg->volatile_random_cells_;
}
const ::TSCE::CellCoordSetArchive&
VolatileDependenciesExpandedArchive::_Internal::volatile_locale_cells(const VolatileDependenciesExpandedArchive* msg) {
  return *msg->volatile_locale_cells_;
}
const ::TSCE::CellCoordSetArchive&
VolatileDependenciesExpandedArchive::_Internal::volatile_sheet_table_name_cells(const VolatileDependenciesExpandedArchive* msg) {
  return *msg->volatile_sheet_table_name_cells_;
}
const ::TSCE::CellCoordSetArchive&
VolatileDependenciesExpandedArchive::_Internal::volatile_remote_data_cells(const VolatileDependenciesExpandedArchive* msg) {
  return *msg->volatile_remote_data_cells_;
}
const ::TSCE::InternalCellRefSetArchive&
VolatileDependenciesExpandedArchive::_Internal::volatile_geometry_cell_refs(const VolatileDependenciesExpandedArchive* msg) {
  return *msg->volatile_geometry_cell_refs_;
}
VolatileDependenciesExpandedArchive::VolatileDependenciesExpandedArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.VolatileDependenciesExpandedArchive)
}
VolatileDependenciesExpandedArchive::VolatileDependenciesExpandedArchive(const VolatileDependenciesExpandedArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_volatile_time_cells()) {
    volatile_time_cells_ = new ::TSCE::CellCoordSetArchive(*from.volatile_time_cells_);
  } else {
    volatile_time_cells_ = nullptr;
  }
  if (from._internal_has_volatile_random_cells()) {
    volatile_random_cells_ = new ::TSCE::CellCoordSetArchive(*from.volatile_random_cells_);
  } else {
    volatile_random_cells_ = nullptr;
  }
  if (from._internal_has_volatile_locale_cells()) {
    volatile_locale_cells_ = new ::TSCE::CellCoordSetArchive(*from.volatile_locale_cells_);
  } else {
    volatile_locale_cells_ = nullptr;
  }
  if (from._internal_has_volatile_sheet_table_name_cells()) {
    volatile_sheet_table_name_cells_ = new ::TSCE::CellCoordSetArchive(*from.volatile_sheet_table_name_cells_);
  } else {
    volatile_sheet_table_name_cells_ = nullptr;
  }
  if (from._internal_has_volatile_remote_data_cells()) {
    volatile_remote_data_cells_ = new ::TSCE::CellCoordSetArchive(*from.volatile_remote_data_cells_);
  } else {
    volatile_remote_data_cells_ = nullptr;
  }
  if (from._internal_has_volatile_geometry_cell_refs()) {
    volatile_geometry_cell_refs_ = new ::TSCE::InternalCellRefSetArchive(*from.volatile_geometry_cell_refs_);
  } else {
    volatile_geometry_cell_refs_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSCE.VolatileDependenciesExpandedArchive)
}

void VolatileDependenciesExpandedArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&volatile_time_cells_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&volatile_geometry_cell_refs_) -
    reinterpret_cast<char*>(&volatile_time_cells_)) + sizeof(volatile_geometry_cell_refs_));
}

VolatileDependenciesExpandedArchive::~VolatileDependenciesExpandedArchive() {
  // @@protoc_insertion_point(destructor:TSCE.VolatileDependenciesExpandedArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VolatileDependenciesExpandedArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete volatile_time_cells_;
  if (this != internal_default_instance()) delete volatile_random_cells_;
  if (this != internal_default_instance()) delete volatile_locale_cells_;
  if (this != internal_default_instance()) delete volatile_sheet_table_name_cells_;
  if (this != internal_default_instance()) delete volatile_remote_data_cells_;
  if (this != internal_default_instance()) delete volatile_geometry_cell_refs_;
}

void VolatileDependenciesExpandedArchive::ArenaDtor(void* object) {
  VolatileDependenciesExpandedArchive* _this = reinterpret_cast< VolatileDependenciesExpandedArchive* >(object);
  (void)_this;
}
void VolatileDependenciesExpandedArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VolatileDependenciesExpandedArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VolatileDependenciesExpandedArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.VolatileDependenciesExpandedArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(volatile_time_cells_ != nullptr);
      volatile_time_cells_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(volatile_random_cells_ != nullptr);
      volatile_random_cells_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(volatile_locale_cells_ != nullptr);
      volatile_locale_cells_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(volatile_sheet_table_name_cells_ != nullptr);
      volatile_sheet_table_name_cells_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(volatile_remote_data_cells_ != nullptr);
      volatile_remote_data_cells_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(volatile_geometry_cell_refs_ != nullptr);
      volatile_geometry_cell_refs_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VolatileDependenciesExpandedArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSCE.CellCoordSetArchive volatile_time_cells = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_volatile_time_cells(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCE.CellCoordSetArchive volatile_random_cells = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_volatile_random_cells(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCE.CellCoordSetArchive volatile_locale_cells = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_volatile_locale_cells(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCE.CellCoordSetArchive volatile_sheet_table_name_cells = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_volatile_sheet_table_name_cells(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCE.CellCoordSetArchive volatile_remote_data_cells = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_volatile_remote_data_cells(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCE.InternalCellRefSetArchive volatile_geometry_cell_refs = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_volatile_geometry_cell_refs(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VolatileDependenciesExpandedArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.VolatileDependenciesExpandedArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSCE.CellCoordSetArchive volatile_time_cells = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::volatile_time_cells(this), target, stream);
  }

  // optional .TSCE.CellCoordSetArchive volatile_random_cells = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::volatile_random_cells(this), target, stream);
  }

  // optional .TSCE.CellCoordSetArchive volatile_locale_cells = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::volatile_locale_cells(this), target, stream);
  }

  // optional .TSCE.CellCoordSetArchive volatile_sheet_table_name_cells = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::volatile_sheet_table_name_cells(this), target, stream);
  }

  // optional .TSCE.CellCoordSetArchive volatile_remote_data_cells = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::volatile_remote_data_cells(this), target, stream);
  }

  // optional .TSCE.InternalCellRefSetArchive volatile_geometry_cell_refs = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::volatile_geometry_cell_refs(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.VolatileDependenciesExpandedArchive)
  return target;
}

size_t VolatileDependenciesExpandedArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.VolatileDependenciesExpandedArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .TSCE.CellCoordSetArchive volatile_time_cells = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *volatile_time_cells_);
    }

    // optional .TSCE.CellCoordSetArchive volatile_random_cells = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *volatile_random_cells_);
    }

    // optional .TSCE.CellCoordSetArchive volatile_locale_cells = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *volatile_locale_cells_);
    }

    // optional .TSCE.CellCoordSetArchive volatile_sheet_table_name_cells = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *volatile_sheet_table_name_cells_);
    }

    // optional .TSCE.CellCoordSetArchive volatile_remote_data_cells = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *volatile_remote_data_cells_);
    }

    // optional .TSCE.InternalCellRefSetArchive volatile_geometry_cell_refs = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *volatile_geometry_cell_refs_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VolatileDependenciesExpandedArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.VolatileDependenciesExpandedArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const VolatileDependenciesExpandedArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VolatileDependenciesExpandedArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.VolatileDependenciesExpandedArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.VolatileDependenciesExpandedArchive)
    MergeFrom(*source);
  }
}

void VolatileDependenciesExpandedArchive::MergeFrom(const VolatileDependenciesExpandedArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.VolatileDependenciesExpandedArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_volatile_time_cells()->::TSCE::CellCoordSetArchive::MergeFrom(from._internal_volatile_time_cells());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_volatile_random_cells()->::TSCE::CellCoordSetArchive::MergeFrom(from._internal_volatile_random_cells());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_volatile_locale_cells()->::TSCE::CellCoordSetArchive::MergeFrom(from._internal_volatile_locale_cells());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_volatile_sheet_table_name_cells()->::TSCE::CellCoordSetArchive::MergeFrom(from._internal_volatile_sheet_table_name_cells());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_volatile_remote_data_cells()->::TSCE::CellCoordSetArchive::MergeFrom(from._internal_volatile_remote_data_cells());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_volatile_geometry_cell_refs()->::TSCE::InternalCellRefSetArchive::MergeFrom(from._internal_volatile_geometry_cell_refs());
    }
  }
}

void VolatileDependenciesExpandedArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.VolatileDependenciesExpandedArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VolatileDependenciesExpandedArchive::CopyFrom(const VolatileDependenciesExpandedArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.VolatileDependenciesExpandedArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VolatileDependenciesExpandedArchive::IsInitialized() const {
  if (_internal_has_volatile_time_cells()) {
    if (!volatile_time_cells_->IsInitialized()) return false;
  }
  if (_internal_has_volatile_random_cells()) {
    if (!volatile_random_cells_->IsInitialized()) return false;
  }
  if (_internal_has_volatile_locale_cells()) {
    if (!volatile_locale_cells_->IsInitialized()) return false;
  }
  if (_internal_has_volatile_sheet_table_name_cells()) {
    if (!volatile_sheet_table_name_cells_->IsInitialized()) return false;
  }
  if (_internal_has_volatile_remote_data_cells()) {
    if (!volatile_remote_data_cells_->IsInitialized()) return false;
  }
  if (_internal_has_volatile_geometry_cell_refs()) {
    if (!volatile_geometry_cell_refs_->IsInitialized()) return false;
  }
  return true;
}

void VolatileDependenciesExpandedArchive::InternalSwap(VolatileDependenciesExpandedArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VolatileDependenciesExpandedArchive, volatile_geometry_cell_refs_)
      + sizeof(VolatileDependenciesExpandedArchive::volatile_geometry_cell_refs_)
      - PROTOBUF_FIELD_OFFSET(VolatileDependenciesExpandedArchive, volatile_time_cells_)>(
          reinterpret_cast<char*>(&volatile_time_cells_),
          reinterpret_cast<char*>(&other->volatile_time_cells_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VolatileDependenciesExpandedArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[32]);
}

// ===================================================================

class RTreeInternalNodeContentsArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<RTreeInternalNodeContentsArchive>()._has_bits_);
  static const ::TSCE::RTreeNodeArchive& child(const RTreeInternalNodeContentsArchive* msg);
  static void set_has_child(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSCE::RTreeNodeArchive&
RTreeInternalNodeContentsArchive::_Internal::child(const RTreeInternalNodeContentsArchive* msg) {
  return *msg->child_;
}
RTreeInternalNodeContentsArchive::RTreeInternalNodeContentsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  min_(arena),
  max_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.RTreeInternalNodeContentsArchive)
}
RTreeInternalNodeContentsArchive::RTreeInternalNodeContentsArchive(const RTreeInternalNodeContentsArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      min_(from.min_),
      max_(from.max_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_child()) {
    child_ = new ::TSCE::RTreeNodeArchive(*from.child_);
  } else {
    child_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSCE.RTreeInternalNodeContentsArchive)
}

void RTreeInternalNodeContentsArchive::SharedCtor() {
child_ = nullptr;
}

RTreeInternalNodeContentsArchive::~RTreeInternalNodeContentsArchive() {
  // @@protoc_insertion_point(destructor:TSCE.RTreeInternalNodeContentsArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RTreeInternalNodeContentsArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete child_;
}

void RTreeInternalNodeContentsArchive::ArenaDtor(void* object) {
  RTreeInternalNodeContentsArchive* _this = reinterpret_cast< RTreeInternalNodeContentsArchive* >(object);
  (void)_this;
}
void RTreeInternalNodeContentsArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RTreeInternalNodeContentsArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RTreeInternalNodeContentsArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.RTreeInternalNodeContentsArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  min_.Clear();
  max_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(child_ != nullptr);
    child_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RTreeInternalNodeContentsArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 min = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_min(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_min(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 max = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_max(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_max(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSCE.RTreeNodeArchive child = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_child(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RTreeInternalNodeContentsArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.RTreeInternalNodeContentsArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 min = 1;
  for (int i = 0, n = this->_internal_min_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_min(i), target);
  }

  // repeated uint32 max = 2;
  for (int i = 0, n = this->_internal_max_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_max(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // required .TSCE.RTreeNodeArchive child = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::child(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.RTreeInternalNodeContentsArchive)
  return target;
}

size_t RTreeInternalNodeContentsArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.RTreeInternalNodeContentsArchive)
  size_t total_size = 0;

  // required .TSCE.RTreeNodeArchive child = 3;
  if (_internal_has_child()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *child_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 min = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->min_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_min_size());
    total_size += data_size;
  }

  // repeated uint32 max = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->max_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_max_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RTreeInternalNodeContentsArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.RTreeInternalNodeContentsArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const RTreeInternalNodeContentsArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RTreeInternalNodeContentsArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.RTreeInternalNodeContentsArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.RTreeInternalNodeContentsArchive)
    MergeFrom(*source);
  }
}

void RTreeInternalNodeContentsArchive::MergeFrom(const RTreeInternalNodeContentsArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.RTreeInternalNodeContentsArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  min_.MergeFrom(from.min_);
  max_.MergeFrom(from.max_);
  if (from._internal_has_child()) {
    _internal_mutable_child()->::TSCE::RTreeNodeArchive::MergeFrom(from._internal_child());
  }
}

void RTreeInternalNodeContentsArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.RTreeInternalNodeContentsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RTreeInternalNodeContentsArchive::CopyFrom(const RTreeInternalNodeContentsArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.RTreeInternalNodeContentsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RTreeInternalNodeContentsArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_child()) {
    if (!child_->IsInitialized()) return false;
  }
  return true;
}

void RTreeInternalNodeContentsArchive::InternalSwap(RTreeInternalNodeContentsArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  min_.InternalSwap(&other->min_);
  max_.InternalSwap(&other->max_);
  swap(child_, other->child_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RTreeInternalNodeContentsArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[33]);
}

// ===================================================================

class RTreeLeafNodeContentsArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<RTreeLeafNodeContentsArchive>()._has_bits_);
  static const ::TSCE::CellReferenceArchive& cell_reference(const RTreeLeafNodeContentsArchive* msg);
  static void set_has_cell_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSCE::CellReferenceArchive&
RTreeLeafNodeContentsArchive::_Internal::cell_reference(const RTreeLeafNodeContentsArchive* msg) {
  return *msg->cell_reference_;
}
RTreeLeafNodeContentsArchive::RTreeLeafNodeContentsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  min_(arena),
  max_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.RTreeLeafNodeContentsArchive)
}
RTreeLeafNodeContentsArchive::RTreeLeafNodeContentsArchive(const RTreeLeafNodeContentsArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      min_(from.min_),
      max_(from.max_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_cell_reference()) {
    cell_reference_ = new ::TSCE::CellReferenceArchive(*from.cell_reference_);
  } else {
    cell_reference_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSCE.RTreeLeafNodeContentsArchive)
}

void RTreeLeafNodeContentsArchive::SharedCtor() {
cell_reference_ = nullptr;
}

RTreeLeafNodeContentsArchive::~RTreeLeafNodeContentsArchive() {
  // @@protoc_insertion_point(destructor:TSCE.RTreeLeafNodeContentsArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RTreeLeafNodeContentsArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete cell_reference_;
}

void RTreeLeafNodeContentsArchive::ArenaDtor(void* object) {
  RTreeLeafNodeContentsArchive* _this = reinterpret_cast< RTreeLeafNodeContentsArchive* >(object);
  (void)_this;
}
void RTreeLeafNodeContentsArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RTreeLeafNodeContentsArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RTreeLeafNodeContentsArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.RTreeLeafNodeContentsArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  min_.Clear();
  max_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(cell_reference_ != nullptr);
    cell_reference_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RTreeLeafNodeContentsArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 min = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_min(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_min(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 max = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_max(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_max(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSCE.CellReferenceArchive cell_reference = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell_reference(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RTreeLeafNodeContentsArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.RTreeLeafNodeContentsArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 min = 1;
  for (int i = 0, n = this->_internal_min_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_min(i), target);
  }

  // repeated uint32 max = 2;
  for (int i = 0, n = this->_internal_max_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_max(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // required .TSCE.CellReferenceArchive cell_reference = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::cell_reference(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.RTreeLeafNodeContentsArchive)
  return target;
}

size_t RTreeLeafNodeContentsArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.RTreeLeafNodeContentsArchive)
  size_t total_size = 0;

  // required .TSCE.CellReferenceArchive cell_reference = 3;
  if (_internal_has_cell_reference()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cell_reference_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 min = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->min_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_min_size());
    total_size += data_size;
  }

  // repeated uint32 max = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->max_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_max_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RTreeLeafNodeContentsArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.RTreeLeafNodeContentsArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const RTreeLeafNodeContentsArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RTreeLeafNodeContentsArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.RTreeLeafNodeContentsArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.RTreeLeafNodeContentsArchive)
    MergeFrom(*source);
  }
}

void RTreeLeafNodeContentsArchive::MergeFrom(const RTreeLeafNodeContentsArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.RTreeLeafNodeContentsArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  min_.MergeFrom(from.min_);
  max_.MergeFrom(from.max_);
  if (from._internal_has_cell_reference()) {
    _internal_mutable_cell_reference()->::TSCE::CellReferenceArchive::MergeFrom(from._internal_cell_reference());
  }
}

void RTreeLeafNodeContentsArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.RTreeLeafNodeContentsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RTreeLeafNodeContentsArchive::CopyFrom(const RTreeLeafNodeContentsArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.RTreeLeafNodeContentsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RTreeLeafNodeContentsArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_cell_reference()) {
    if (!cell_reference_->IsInitialized()) return false;
  }
  return true;
}

void RTreeLeafNodeContentsArchive::InternalSwap(RTreeLeafNodeContentsArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  min_.InternalSwap(&other->min_);
  max_.InternalSwap(&other->max_);
  swap(cell_reference_, other->cell_reference_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RTreeLeafNodeContentsArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[34]);
}

// ===================================================================

class RTreeNodeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<RTreeNodeArchive>()._has_bits_);
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

RTreeNodeArchive::RTreeNodeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  internal_node_contents_(arena),
  leaf_node_contents_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.RTreeNodeArchive)
}
RTreeNodeArchive::RTreeNodeArchive(const RTreeNodeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      internal_node_contents_(from.internal_node_contents_),
      leaf_node_contents_(from.leaf_node_contents_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&level_, &from.level_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&level_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:TSCE.RTreeNodeArchive)
}

void RTreeNodeArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&level_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&level_)) + sizeof(count_));
}

RTreeNodeArchive::~RTreeNodeArchive() {
  // @@protoc_insertion_point(destructor:TSCE.RTreeNodeArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RTreeNodeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RTreeNodeArchive::ArenaDtor(void* object) {
  RTreeNodeArchive* _this = reinterpret_cast< RTreeNodeArchive* >(object);
  (void)_this;
}
void RTreeNodeArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RTreeNodeArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RTreeNodeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.RTreeNodeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  internal_node_contents_.Clear();
  leaf_node_contents_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&level_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&count_) -
        reinterpret_cast<char*>(&level_)) + sizeof(count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RTreeNodeArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_level(&has_bits);
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_count(&has_bits);
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSCE.RTreeInternalNodeContentsArchive internal_node_contents = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_internal_node_contents(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSCE.RTreeLeafNodeContentsArchive leaf_node_contents = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_leaf_node_contents(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RTreeNodeArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.RTreeNodeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 level = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_level(), target);
  }

  // required uint32 count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_count(), target);
  }

  // repeated .TSCE.RTreeInternalNodeContentsArchive internal_node_contents = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_internal_node_contents_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_internal_node_contents(i), target, stream);
  }

  // repeated .TSCE.RTreeLeafNodeContentsArchive leaf_node_contents = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_leaf_node_contents_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_leaf_node_contents(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.RTreeNodeArchive)
  return target;
}

size_t RTreeNodeArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.RTreeNodeArchive)
  size_t total_size = 0;

  if (_internal_has_level()) {
    // required uint32 level = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_level());
  }

  if (_internal_has_count()) {
    // required uint32 count = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_count());
  }

  return total_size;
}
size_t RTreeNodeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.RTreeNodeArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 level = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_level());

    // required uint32 count = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_count());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.RTreeInternalNodeContentsArchive internal_node_contents = 3;
  total_size += 1UL * this->_internal_internal_node_contents_size();
  for (const auto& msg : this->internal_node_contents_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSCE.RTreeLeafNodeContentsArchive leaf_node_contents = 4;
  total_size += 1UL * this->_internal_leaf_node_contents_size();
  for (const auto& msg : this->leaf_node_contents_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RTreeNodeArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.RTreeNodeArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const RTreeNodeArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RTreeNodeArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.RTreeNodeArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.RTreeNodeArchive)
    MergeFrom(*source);
  }
}

void RTreeNodeArchive::MergeFrom(const RTreeNodeArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.RTreeNodeArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  internal_node_contents_.MergeFrom(from.internal_node_contents_);
  leaf_node_contents_.MergeFrom(from.leaf_node_contents_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00000002u) {
      count_ = from.count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RTreeNodeArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.RTreeNodeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RTreeNodeArchive::CopyFrom(const RTreeNodeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.RTreeNodeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RTreeNodeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(internal_node_contents_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(leaf_node_contents_)) return false;
  return true;
}

void RTreeNodeArchive::InternalSwap(RTreeNodeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  internal_node_contents_.InternalSwap(&other->internal_node_contents_);
  leaf_node_contents_.InternalSwap(&other->leaf_node_contents_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RTreeNodeArchive, count_)
      + sizeof(RTreeNodeArchive::count_)
      - PROTOBUF_FIELD_OFFSET(RTreeNodeArchive, level_)>(
          reinterpret_cast<char*>(&level_),
          reinterpret_cast<char*>(&other->level_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RTreeNodeArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[35]);
}

// ===================================================================

class RTreeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<RTreeArchive>()._has_bits_);
  static void set_has_data_file_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_data_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_data_num_dims(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_data_elem_size(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_data_elem_real_size(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_data_max_nodes(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_data_min_nodes(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::TSCE::RTreeNodeArchive& root(const RTreeArchive* msg);
  static void set_has_root(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000000ff) ^ 0x000000ff) != 0;
  }
};

const ::TSCE::RTreeNodeArchive&
RTreeArchive::_Internal::root(const RTreeArchive* msg) {
  return *msg->root_;
}
RTreeArchive::RTreeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.RTreeArchive)
}
RTreeArchive::RTreeArchive(const RTreeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_root()) {
    root_ = new ::TSCE::RTreeNodeArchive(*from.root_);
  } else {
    root_ = nullptr;
  }
  ::memcpy(&data_file_id_, &from.data_file_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&data_min_nodes_) -
    reinterpret_cast<char*>(&data_file_id_)) + sizeof(data_min_nodes_));
  // @@protoc_insertion_point(copy_constructor:TSCE.RTreeArchive)
}

void RTreeArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&root_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&data_min_nodes_) -
    reinterpret_cast<char*>(&root_)) + sizeof(data_min_nodes_));
}

RTreeArchive::~RTreeArchive() {
  // @@protoc_insertion_point(destructor:TSCE.RTreeArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RTreeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete root_;
}

void RTreeArchive::ArenaDtor(void* object) {
  RTreeArchive* _this = reinterpret_cast< RTreeArchive* >(object);
  (void)_this;
}
void RTreeArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RTreeArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RTreeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.RTreeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(root_ != nullptr);
    root_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&data_file_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&data_min_nodes_) -
        reinterpret_cast<char*>(&data_file_id_)) + sizeof(data_min_nodes_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RTreeArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 data_file_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_data_file_id(&has_bits);
          data_file_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 data_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_data_size(&has_bits);
          data_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 data_num_dims = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_data_num_dims(&has_bits);
          data_num_dims_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 data_elem_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_data_elem_size(&has_bits);
          data_elem_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 data_elem_real_size = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_data_elem_real_size(&has_bits);
          data_elem_real_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 data_max_nodes = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_data_max_nodes(&has_bits);
          data_max_nodes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 data_min_nodes = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_data_min_nodes(&has_bits);
          data_min_nodes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSCE.RTreeNodeArchive root = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_root(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RTreeArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.RTreeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 data_file_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_data_file_id(), target);
  }

  // required uint32 data_size = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_data_size(), target);
  }

  // required uint32 data_num_dims = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_data_num_dims(), target);
  }

  // required uint32 data_elem_size = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_data_elem_size(), target);
  }

  // required uint32 data_elem_real_size = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_data_elem_real_size(), target);
  }

  // required uint32 data_max_nodes = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_data_max_nodes(), target);
  }

  // required uint32 data_min_nodes = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_data_min_nodes(), target);
  }

  // required .TSCE.RTreeNodeArchive root = 8;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::root(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.RTreeArchive)
  return target;
}

size_t RTreeArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.RTreeArchive)
  size_t total_size = 0;

  if (_internal_has_root()) {
    // required .TSCE.RTreeNodeArchive root = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *root_);
  }

  if (_internal_has_data_file_id()) {
    // required uint32 data_file_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_data_file_id());
  }

  if (_internal_has_data_size()) {
    // required uint32 data_size = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_data_size());
  }

  if (_internal_has_data_num_dims()) {
    // required uint32 data_num_dims = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_data_num_dims());
  }

  if (_internal_has_data_elem_size()) {
    // required uint32 data_elem_size = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_data_elem_size());
  }

  if (_internal_has_data_elem_real_size()) {
    // required uint32 data_elem_real_size = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_data_elem_real_size());
  }

  if (_internal_has_data_max_nodes()) {
    // required uint32 data_max_nodes = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_data_max_nodes());
  }

  if (_internal_has_data_min_nodes()) {
    // required uint32 data_min_nodes = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_data_min_nodes());
  }

  return total_size;
}
size_t RTreeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.RTreeArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x000000ff) ^ 0x000000ff) == 0) {  // All required fields are present.
    // required .TSCE.RTreeNodeArchive root = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *root_);

    // required uint32 data_file_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_data_file_id());

    // required uint32 data_size = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_data_size());

    // required uint32 data_num_dims = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_data_num_dims());

    // required uint32 data_elem_size = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_data_elem_size());

    // required uint32 data_elem_real_size = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_data_elem_real_size());

    // required uint32 data_max_nodes = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_data_max_nodes());

    // required uint32 data_min_nodes = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_data_min_nodes());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RTreeArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.RTreeArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const RTreeArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RTreeArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.RTreeArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.RTreeArchive)
    MergeFrom(*source);
  }
}

void RTreeArchive::MergeFrom(const RTreeArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.RTreeArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_root()->::TSCE::RTreeNodeArchive::MergeFrom(from._internal_root());
    }
    if (cached_has_bits & 0x00000002u) {
      data_file_id_ = from.data_file_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      data_size_ = from.data_size_;
    }
    if (cached_has_bits & 0x00000008u) {
      data_num_dims_ = from.data_num_dims_;
    }
    if (cached_has_bits & 0x00000010u) {
      data_elem_size_ = from.data_elem_size_;
    }
    if (cached_has_bits & 0x00000020u) {
      data_elem_real_size_ = from.data_elem_real_size_;
    }
    if (cached_has_bits & 0x00000040u) {
      data_max_nodes_ = from.data_max_nodes_;
    }
    if (cached_has_bits & 0x00000080u) {
      data_min_nodes_ = from.data_min_nodes_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RTreeArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.RTreeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RTreeArchive::CopyFrom(const RTreeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.RTreeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RTreeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_root()) {
    if (!root_->IsInitialized()) return false;
  }
  return true;
}

void RTreeArchive::InternalSwap(RTreeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RTreeArchive, data_min_nodes_)
      + sizeof(RTreeArchive::data_min_nodes_)
      - PROTOBUF_FIELD_OFFSET(RTreeArchive, root_)>(
          reinterpret_cast<char*>(&root_),
          reinterpret_cast<char*>(&other->root_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RTreeArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[36]);
}

// ===================================================================

class RangeBackDependencyArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<RangeBackDependencyArchive>()._has_bits_);
  static void set_has_cell_coord_row(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_cell_coord_column(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSCE::RangeReferenceArchive& range_reference(const RangeBackDependencyArchive* msg);
  static void set_has_range_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSCE::InternalRangeReferenceArchive& internal_range_reference(const RangeBackDependencyArchive* msg);
  static void set_has_internal_range_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000c) ^ 0x0000000c) != 0;
  }
};

const ::TSCE::RangeReferenceArchive&
RangeBackDependencyArchive::_Internal::range_reference(const RangeBackDependencyArchive* msg) {
  return *msg->range_reference_;
}
const ::TSCE::InternalRangeReferenceArchive&
RangeBackDependencyArchive::_Internal::internal_range_reference(const RangeBackDependencyArchive* msg) {
  return *msg->internal_range_reference_;
}
RangeBackDependencyArchive::RangeBackDependencyArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.RangeBackDependencyArchive)
}
RangeBackDependencyArchive::RangeBackDependencyArchive(const RangeBackDependencyArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_range_reference()) {
    range_reference_ = new ::TSCE::RangeReferenceArchive(*from.range_reference_);
  } else {
    range_reference_ = nullptr;
  }
  if (from._internal_has_internal_range_reference()) {
    internal_range_reference_ = new ::TSCE::InternalRangeReferenceArchive(*from.internal_range_reference_);
  } else {
    internal_range_reference_ = nullptr;
  }
  ::memcpy(&cell_coord_row_, &from.cell_coord_row_,
    static_cast<size_t>(reinterpret_cast<char*>(&cell_coord_column_) -
    reinterpret_cast<char*>(&cell_coord_row_)) + sizeof(cell_coord_column_));
  // @@protoc_insertion_point(copy_constructor:TSCE.RangeBackDependencyArchive)
}

void RangeBackDependencyArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&range_reference_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cell_coord_column_) -
    reinterpret_cast<char*>(&range_reference_)) + sizeof(cell_coord_column_));
}

RangeBackDependencyArchive::~RangeBackDependencyArchive() {
  // @@protoc_insertion_point(destructor:TSCE.RangeBackDependencyArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RangeBackDependencyArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete range_reference_;
  if (this != internal_default_instance()) delete internal_range_reference_;
}

void RangeBackDependencyArchive::ArenaDtor(void* object) {
  RangeBackDependencyArchive* _this = reinterpret_cast< RangeBackDependencyArchive* >(object);
  (void)_this;
}
void RangeBackDependencyArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RangeBackDependencyArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RangeBackDependencyArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.RangeBackDependencyArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(range_reference_ != nullptr);
      range_reference_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(internal_range_reference_ != nullptr);
      internal_range_reference_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&cell_coord_row_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cell_coord_column_) -
        reinterpret_cast<char*>(&cell_coord_row_)) + sizeof(cell_coord_column_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RangeBackDependencyArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 cell_coord_row = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_cell_coord_row(&has_bits);
          cell_coord_row_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 cell_coord_column = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_cell_coord_column(&has_bits);
          cell_coord_column_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCE.RangeReferenceArchive range_reference = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_range_reference(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCE.InternalRangeReferenceArchive internal_range_reference = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_internal_range_reference(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RangeBackDependencyArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.RangeBackDependencyArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 cell_coord_row = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_cell_coord_row(), target);
  }

  // required uint32 cell_coord_column = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_cell_coord_column(), target);
  }

  // optional .TSCE.RangeReferenceArchive range_reference = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::range_reference(this), target, stream);
  }

  // optional .TSCE.InternalRangeReferenceArchive internal_range_reference = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::internal_range_reference(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.RangeBackDependencyArchive)
  return target;
}

size_t RangeBackDependencyArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.RangeBackDependencyArchive)
  size_t total_size = 0;

  if (_internal_has_cell_coord_row()) {
    // required uint32 cell_coord_row = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cell_coord_row());
  }

  if (_internal_has_cell_coord_column()) {
    // required uint32 cell_coord_column = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cell_coord_column());
  }

  return total_size;
}
size_t RangeBackDependencyArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.RangeBackDependencyArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000c) ^ 0x0000000c) == 0) {  // All required fields are present.
    // required uint32 cell_coord_row = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cell_coord_row());

    // required uint32 cell_coord_column = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cell_coord_column());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .TSCE.RangeReferenceArchive range_reference = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *range_reference_);
    }

    // optional .TSCE.InternalRangeReferenceArchive internal_range_reference = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *internal_range_reference_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RangeBackDependencyArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.RangeBackDependencyArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const RangeBackDependencyArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RangeBackDependencyArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.RangeBackDependencyArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.RangeBackDependencyArchive)
    MergeFrom(*source);
  }
}

void RangeBackDependencyArchive::MergeFrom(const RangeBackDependencyArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.RangeBackDependencyArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_range_reference()->::TSCE::RangeReferenceArchive::MergeFrom(from._internal_range_reference());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_internal_range_reference()->::TSCE::InternalRangeReferenceArchive::MergeFrom(from._internal_internal_range_reference());
    }
    if (cached_has_bits & 0x00000004u) {
      cell_coord_row_ = from.cell_coord_row_;
    }
    if (cached_has_bits & 0x00000008u) {
      cell_coord_column_ = from.cell_coord_column_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RangeBackDependencyArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.RangeBackDependencyArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RangeBackDependencyArchive::CopyFrom(const RangeBackDependencyArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.RangeBackDependencyArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RangeBackDependencyArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_range_reference()) {
    if (!range_reference_->IsInitialized()) return false;
  }
  if (_internal_has_internal_range_reference()) {
    if (!internal_range_reference_->IsInitialized()) return false;
  }
  return true;
}

void RangeBackDependencyArchive::InternalSwap(RangeBackDependencyArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RangeBackDependencyArchive, cell_coord_column_)
      + sizeof(RangeBackDependencyArchive::cell_coord_column_)
      - PROTOBUF_FIELD_OFFSET(RangeBackDependencyArchive, range_reference_)>(
          reinterpret_cast<char*>(&range_reference_),
          reinterpret_cast<char*>(&other->range_reference_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RangeBackDependencyArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[37]);
}

// ===================================================================

class RangeDependenciesArchive::_Internal {
 public:
};

RangeDependenciesArchive::RangeDependenciesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  back_dependency_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.RangeDependenciesArchive)
}
RangeDependenciesArchive::RangeDependenciesArchive(const RangeDependenciesArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      back_dependency_(from.back_dependency_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSCE.RangeDependenciesArchive)
}

void RangeDependenciesArchive::SharedCtor() {
}

RangeDependenciesArchive::~RangeDependenciesArchive() {
  // @@protoc_insertion_point(destructor:TSCE.RangeDependenciesArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RangeDependenciesArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RangeDependenciesArchive::ArenaDtor(void* object) {
  RangeDependenciesArchive* _this = reinterpret_cast< RangeDependenciesArchive* >(object);
  (void)_this;
}
void RangeDependenciesArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RangeDependenciesArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RangeDependenciesArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.RangeDependenciesArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  back_dependency_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RangeDependenciesArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSCE.RangeBackDependencyArchive back_dependency = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_back_dependency(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RangeDependenciesArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.RangeDependenciesArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSCE.RangeBackDependencyArchive back_dependency = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_back_dependency_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_back_dependency(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.RangeDependenciesArchive)
  return target;
}

size_t RangeDependenciesArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.RangeDependenciesArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.RangeBackDependencyArchive back_dependency = 2;
  total_size += 1UL * this->_internal_back_dependency_size();
  for (const auto& msg : this->back_dependency_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RangeDependenciesArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.RangeDependenciesArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const RangeDependenciesArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RangeDependenciesArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.RangeDependenciesArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.RangeDependenciesArchive)
    MergeFrom(*source);
  }
}

void RangeDependenciesArchive::MergeFrom(const RangeDependenciesArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.RangeDependenciesArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  back_dependency_.MergeFrom(from.back_dependency_);
}

void RangeDependenciesArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.RangeDependenciesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RangeDependenciesArchive::CopyFrom(const RangeDependenciesArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.RangeDependenciesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RangeDependenciesArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(back_dependency_)) return false;
  return true;
}

void RangeDependenciesArchive::InternalSwap(RangeDependenciesArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  back_dependency_.InternalSwap(&other->back_dependency_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RangeDependenciesArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[38]);
}

// ===================================================================

class RangePrecedentsTileArchive_FromToRangeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<RangePrecedentsTileArchive_FromToRangeArchive>()._has_bits_);
  static const ::TSCE::CellCoordinateArchive& from_coord(const RangePrecedentsTileArchive_FromToRangeArchive* msg);
  static void set_has_from_coord(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSCE::CellRectArchive& refers_to_rect(const RangePrecedentsTileArchive_FromToRangeArchive* msg);
  static void set_has_refers_to_rect(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSCE::CellCoordinateArchive&
RangePrecedentsTileArchive_FromToRangeArchive::_Internal::from_coord(const RangePrecedentsTileArchive_FromToRangeArchive* msg) {
  return *msg->from_coord_;
}
const ::TSCE::CellRectArchive&
RangePrecedentsTileArchive_FromToRangeArchive::_Internal::refers_to_rect(const RangePrecedentsTileArchive_FromToRangeArchive* msg) {
  return *msg->refers_to_rect_;
}
RangePrecedentsTileArchive_FromToRangeArchive::RangePrecedentsTileArchive_FromToRangeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.RangePrecedentsTileArchive.FromToRangeArchive)
}
RangePrecedentsTileArchive_FromToRangeArchive::RangePrecedentsTileArchive_FromToRangeArchive(const RangePrecedentsTileArchive_FromToRangeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_from_coord()) {
    from_coord_ = new ::TSCE::CellCoordinateArchive(*from.from_coord_);
  } else {
    from_coord_ = nullptr;
  }
  if (from._internal_has_refers_to_rect()) {
    refers_to_rect_ = new ::TSCE::CellRectArchive(*from.refers_to_rect_);
  } else {
    refers_to_rect_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSCE.RangePrecedentsTileArchive.FromToRangeArchive)
}

void RangePrecedentsTileArchive_FromToRangeArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&from_coord_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&refers_to_rect_) -
    reinterpret_cast<char*>(&from_coord_)) + sizeof(refers_to_rect_));
}

RangePrecedentsTileArchive_FromToRangeArchive::~RangePrecedentsTileArchive_FromToRangeArchive() {
  // @@protoc_insertion_point(destructor:TSCE.RangePrecedentsTileArchive.FromToRangeArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RangePrecedentsTileArchive_FromToRangeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete from_coord_;
  if (this != internal_default_instance()) delete refers_to_rect_;
}

void RangePrecedentsTileArchive_FromToRangeArchive::ArenaDtor(void* object) {
  RangePrecedentsTileArchive_FromToRangeArchive* _this = reinterpret_cast< RangePrecedentsTileArchive_FromToRangeArchive* >(object);
  (void)_this;
}
void RangePrecedentsTileArchive_FromToRangeArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RangePrecedentsTileArchive_FromToRangeArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RangePrecedentsTileArchive_FromToRangeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.RangePrecedentsTileArchive.FromToRangeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(from_coord_ != nullptr);
      from_coord_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(refers_to_rect_ != nullptr);
      refers_to_rect_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RangePrecedentsTileArchive_FromToRangeArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCE.CellCoordinateArchive from_coord = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_from_coord(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSCE.CellRectArchive refers_to_rect = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_refers_to_rect(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RangePrecedentsTileArchive_FromToRangeArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.RangePrecedentsTileArchive.FromToRangeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSCE.CellCoordinateArchive from_coord = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::from_coord(this), target, stream);
  }

  // required .TSCE.CellRectArchive refers_to_rect = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::refers_to_rect(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.RangePrecedentsTileArchive.FromToRangeArchive)
  return target;
}

size_t RangePrecedentsTileArchive_FromToRangeArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.RangePrecedentsTileArchive.FromToRangeArchive)
  size_t total_size = 0;

  if (_internal_has_from_coord()) {
    // required .TSCE.CellCoordinateArchive from_coord = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *from_coord_);
  }

  if (_internal_has_refers_to_rect()) {
    // required .TSCE.CellRectArchive refers_to_rect = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *refers_to_rect_);
  }

  return total_size;
}
size_t RangePrecedentsTileArchive_FromToRangeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.RangePrecedentsTileArchive.FromToRangeArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSCE.CellCoordinateArchive from_coord = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *from_coord_);

    // required .TSCE.CellRectArchive refers_to_rect = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *refers_to_rect_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RangePrecedentsTileArchive_FromToRangeArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.RangePrecedentsTileArchive.FromToRangeArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const RangePrecedentsTileArchive_FromToRangeArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RangePrecedentsTileArchive_FromToRangeArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.RangePrecedentsTileArchive.FromToRangeArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.RangePrecedentsTileArchive.FromToRangeArchive)
    MergeFrom(*source);
  }
}

void RangePrecedentsTileArchive_FromToRangeArchive::MergeFrom(const RangePrecedentsTileArchive_FromToRangeArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.RangePrecedentsTileArchive.FromToRangeArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_from_coord()->::TSCE::CellCoordinateArchive::MergeFrom(from._internal_from_coord());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_refers_to_rect()->::TSCE::CellRectArchive::MergeFrom(from._internal_refers_to_rect());
    }
  }
}

void RangePrecedentsTileArchive_FromToRangeArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.RangePrecedentsTileArchive.FromToRangeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RangePrecedentsTileArchive_FromToRangeArchive::CopyFrom(const RangePrecedentsTileArchive_FromToRangeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.RangePrecedentsTileArchive.FromToRangeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RangePrecedentsTileArchive_FromToRangeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_refers_to_rect()) {
    if (!refers_to_rect_->IsInitialized()) return false;
  }
  return true;
}

void RangePrecedentsTileArchive_FromToRangeArchive::InternalSwap(RangePrecedentsTileArchive_FromToRangeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RangePrecedentsTileArchive_FromToRangeArchive, refers_to_rect_)
      + sizeof(RangePrecedentsTileArchive_FromToRangeArchive::refers_to_rect_)
      - PROTOBUF_FIELD_OFFSET(RangePrecedentsTileArchive_FromToRangeArchive, from_coord_)>(
          reinterpret_cast<char*>(&from_coord_),
          reinterpret_cast<char*>(&other->from_coord_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RangePrecedentsTileArchive_FromToRangeArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[39]);
}

// ===================================================================

class RangePrecedentsTileArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<RangePrecedentsTileArchive>()._has_bits_);
  static void set_has_to_owner_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

RangePrecedentsTileArchive::RangePrecedentsTileArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  from_to_range_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.RangePrecedentsTileArchive)
}
RangePrecedentsTileArchive::RangePrecedentsTileArchive(const RangePrecedentsTileArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      from_to_range_(from.from_to_range_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  to_owner_id_ = from.to_owner_id_;
  // @@protoc_insertion_point(copy_constructor:TSCE.RangePrecedentsTileArchive)
}

void RangePrecedentsTileArchive::SharedCtor() {
to_owner_id_ = 0u;
}

RangePrecedentsTileArchive::~RangePrecedentsTileArchive() {
  // @@protoc_insertion_point(destructor:TSCE.RangePrecedentsTileArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RangePrecedentsTileArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RangePrecedentsTileArchive::ArenaDtor(void* object) {
  RangePrecedentsTileArchive* _this = reinterpret_cast< RangePrecedentsTileArchive* >(object);
  (void)_this;
}
void RangePrecedentsTileArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RangePrecedentsTileArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RangePrecedentsTileArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.RangePrecedentsTileArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  from_to_range_.Clear();
  to_owner_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RangePrecedentsTileArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 to_owner_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_to_owner_id(&has_bits);
          to_owner_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSCE.RangePrecedentsTileArchive.FromToRangeArchive from_to_range = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_from_to_range(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RangePrecedentsTileArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.RangePrecedentsTileArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 to_owner_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_to_owner_id(), target);
  }

  // repeated .TSCE.RangePrecedentsTileArchive.FromToRangeArchive from_to_range = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_from_to_range_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_from_to_range(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.RangePrecedentsTileArchive)
  return target;
}

size_t RangePrecedentsTileArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.RangePrecedentsTileArchive)
  size_t total_size = 0;

  // required uint32 to_owner_id = 1;
  if (_internal_has_to_owner_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_to_owner_id());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.RangePrecedentsTileArchive.FromToRangeArchive from_to_range = 2;
  total_size += 1UL * this->_internal_from_to_range_size();
  for (const auto& msg : this->from_to_range_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RangePrecedentsTileArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.RangePrecedentsTileArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const RangePrecedentsTileArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RangePrecedentsTileArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.RangePrecedentsTileArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.RangePrecedentsTileArchive)
    MergeFrom(*source);
  }
}

void RangePrecedentsTileArchive::MergeFrom(const RangePrecedentsTileArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.RangePrecedentsTileArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  from_to_range_.MergeFrom(from.from_to_range_);
  if (from._internal_has_to_owner_id()) {
    _internal_set_to_owner_id(from._internal_to_owner_id());
  }
}

void RangePrecedentsTileArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.RangePrecedentsTileArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RangePrecedentsTileArchive::CopyFrom(const RangePrecedentsTileArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.RangePrecedentsTileArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RangePrecedentsTileArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(from_to_range_)) return false;
  return true;
}

void RangePrecedentsTileArchive::InternalSwap(RangePrecedentsTileArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  from_to_range_.InternalSwap(&other->from_to_range_);
  swap(to_owner_id_, other->to_owner_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RangePrecedentsTileArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[40]);
}

// ===================================================================

class RangeDependenciesTiledArchive::_Internal {
 public:
};

void RangeDependenciesTiledArchive::clear_range_precedents_tile() {
  range_precedents_tile_.Clear();
}
RangeDependenciesTiledArchive::RangeDependenciesTiledArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  range_precedents_tile_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.RangeDependenciesTiledArchive)
}
RangeDependenciesTiledArchive::RangeDependenciesTiledArchive(const RangeDependenciesTiledArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      range_precedents_tile_(from.range_precedents_tile_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSCE.RangeDependenciesTiledArchive)
}

void RangeDependenciesTiledArchive::SharedCtor() {
}

RangeDependenciesTiledArchive::~RangeDependenciesTiledArchive() {
  // @@protoc_insertion_point(destructor:TSCE.RangeDependenciesTiledArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RangeDependenciesTiledArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RangeDependenciesTiledArchive::ArenaDtor(void* object) {
  RangeDependenciesTiledArchive* _this = reinterpret_cast< RangeDependenciesTiledArchive* >(object);
  (void)_this;
}
void RangeDependenciesTiledArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RangeDependenciesTiledArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RangeDependenciesTiledArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.RangeDependenciesTiledArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  range_precedents_tile_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RangeDependenciesTiledArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSP.Reference range_precedents_tile = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_range_precedents_tile(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RangeDependenciesTiledArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.RangeDependenciesTiledArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSP.Reference range_precedents_tile = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_range_precedents_tile_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_range_precedents_tile(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.RangeDependenciesTiledArchive)
  return target;
}

size_t RangeDependenciesTiledArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.RangeDependenciesTiledArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference range_precedents_tile = 1;
  total_size += 1UL * this->_internal_range_precedents_tile_size();
  for (const auto& msg : this->range_precedents_tile_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RangeDependenciesTiledArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.RangeDependenciesTiledArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const RangeDependenciesTiledArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RangeDependenciesTiledArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.RangeDependenciesTiledArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.RangeDependenciesTiledArchive)
    MergeFrom(*source);
  }
}

void RangeDependenciesTiledArchive::MergeFrom(const RangeDependenciesTiledArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.RangeDependenciesTiledArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  range_precedents_tile_.MergeFrom(from.range_precedents_tile_);
}

void RangeDependenciesTiledArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.RangeDependenciesTiledArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RangeDependenciesTiledArchive::CopyFrom(const RangeDependenciesTiledArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.RangeDependenciesTiledArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RangeDependenciesTiledArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(range_precedents_tile_)) return false;
  return true;
}

void RangeDependenciesTiledArchive::InternalSwap(RangeDependenciesTiledArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  range_precedents_tile_.InternalSwap(&other->range_precedents_tile_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RangeDependenciesTiledArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[41]);
}

// ===================================================================

class SpanningDependenciesArchive_ReferringColumnToLocalCells::_Internal {
 public:
  using HasBits = decltype(std::declval<SpanningDependenciesArchive_ReferringColumnToLocalCells>()._has_bits_);
  static void set_has_column(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_range_context(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

SpanningDependenciesArchive_ReferringColumnToLocalCells::SpanningDependenciesArchive_ReferringColumnToLocalCells(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  cell_coordinate_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.SpanningDependenciesArchive.ReferringColumnToLocalCells)
}
SpanningDependenciesArchive_ReferringColumnToLocalCells::SpanningDependenciesArchive_ReferringColumnToLocalCells(const SpanningDependenciesArchive_ReferringColumnToLocalCells& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      cell_coordinate_(from.cell_coordinate_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&column_, &from.column_,
    static_cast<size_t>(reinterpret_cast<char*>(&range_context_) -
    reinterpret_cast<char*>(&column_)) + sizeof(range_context_));
  // @@protoc_insertion_point(copy_constructor:TSCE.SpanningDependenciesArchive.ReferringColumnToLocalCells)
}

void SpanningDependenciesArchive_ReferringColumnToLocalCells::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&column_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&range_context_) -
    reinterpret_cast<char*>(&column_)) + sizeof(range_context_));
}

SpanningDependenciesArchive_ReferringColumnToLocalCells::~SpanningDependenciesArchive_ReferringColumnToLocalCells() {
  // @@protoc_insertion_point(destructor:TSCE.SpanningDependenciesArchive.ReferringColumnToLocalCells)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SpanningDependenciesArchive_ReferringColumnToLocalCells::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SpanningDependenciesArchive_ReferringColumnToLocalCells::ArenaDtor(void* object) {
  SpanningDependenciesArchive_ReferringColumnToLocalCells* _this = reinterpret_cast< SpanningDependenciesArchive_ReferringColumnToLocalCells* >(object);
  (void)_this;
}
void SpanningDependenciesArchive_ReferringColumnToLocalCells::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpanningDependenciesArchive_ReferringColumnToLocalCells::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SpanningDependenciesArchive_ReferringColumnToLocalCells::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.SpanningDependenciesArchive.ReferringColumnToLocalCells)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cell_coordinate_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&column_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&range_context_) -
        reinterpret_cast<char*>(&column_)) + sizeof(range_context_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpanningDependenciesArchive_ReferringColumnToLocalCells::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 column = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_column(&has_bits);
          column_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSCE.SpanningDependenciesArchive.RangeContext range_context = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSCE::SpanningDependenciesArchive_RangeContext_IsValid(val))) {
            _internal_set_range_context(static_cast<::TSCE::SpanningDependenciesArchive_RangeContext>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .TSCE.CellCoordinateArchive cell_coordinate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cell_coordinate(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpanningDependenciesArchive_ReferringColumnToLocalCells::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.SpanningDependenciesArchive.ReferringColumnToLocalCells)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 column = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_column(), target);
  }

  // required .TSCE.SpanningDependenciesArchive.RangeContext range_context = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_range_context(), target);
  }

  // repeated .TSCE.CellCoordinateArchive cell_coordinate = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_cell_coordinate_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_cell_coordinate(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.SpanningDependenciesArchive.ReferringColumnToLocalCells)
  return target;
}

size_t SpanningDependenciesArchive_ReferringColumnToLocalCells::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.SpanningDependenciesArchive.ReferringColumnToLocalCells)
  size_t total_size = 0;

  if (_internal_has_column()) {
    // required uint32 column = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_column());
  }

  if (_internal_has_range_context()) {
    // required .TSCE.SpanningDependenciesArchive.RangeContext range_context = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_range_context());
  }

  return total_size;
}
size_t SpanningDependenciesArchive_ReferringColumnToLocalCells::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.SpanningDependenciesArchive.ReferringColumnToLocalCells)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 column = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_column());

    // required .TSCE.SpanningDependenciesArchive.RangeContext range_context = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_range_context());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.CellCoordinateArchive cell_coordinate = 3;
  total_size += 1UL * this->_internal_cell_coordinate_size();
  for (const auto& msg : this->cell_coordinate_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpanningDependenciesArchive_ReferringColumnToLocalCells::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.SpanningDependenciesArchive.ReferringColumnToLocalCells)
  GOOGLE_DCHECK_NE(&from, this);
  const SpanningDependenciesArchive_ReferringColumnToLocalCells* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpanningDependenciesArchive_ReferringColumnToLocalCells>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.SpanningDependenciesArchive.ReferringColumnToLocalCells)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.SpanningDependenciesArchive.ReferringColumnToLocalCells)
    MergeFrom(*source);
  }
}

void SpanningDependenciesArchive_ReferringColumnToLocalCells::MergeFrom(const SpanningDependenciesArchive_ReferringColumnToLocalCells& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.SpanningDependenciesArchive.ReferringColumnToLocalCells)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cell_coordinate_.MergeFrom(from.cell_coordinate_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      column_ = from.column_;
    }
    if (cached_has_bits & 0x00000002u) {
      range_context_ = from.range_context_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SpanningDependenciesArchive_ReferringColumnToLocalCells::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.SpanningDependenciesArchive.ReferringColumnToLocalCells)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpanningDependenciesArchive_ReferringColumnToLocalCells::CopyFrom(const SpanningDependenciesArchive_ReferringColumnToLocalCells& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.SpanningDependenciesArchive.ReferringColumnToLocalCells)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpanningDependenciesArchive_ReferringColumnToLocalCells::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void SpanningDependenciesArchive_ReferringColumnToLocalCells::InternalSwap(SpanningDependenciesArchive_ReferringColumnToLocalCells* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  cell_coordinate_.InternalSwap(&other->cell_coordinate_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpanningDependenciesArchive_ReferringColumnToLocalCells, range_context_)
      + sizeof(SpanningDependenciesArchive_ReferringColumnToLocalCells::range_context_)
      - PROTOBUF_FIELD_OFFSET(SpanningDependenciesArchive_ReferringColumnToLocalCells, column_)>(
          reinterpret_cast<char*>(&column_),
          reinterpret_cast<char*>(&other->column_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpanningDependenciesArchive_ReferringColumnToLocalCells::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[42]);
}

// ===================================================================

class SpanningDependenciesArchive_ReferringColumnToRemoteCells::_Internal {
 public:
  using HasBits = decltype(std::declval<SpanningDependenciesArchive_ReferringColumnToRemoteCells>()._has_bits_);
  static void set_has_column(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_range_context(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

SpanningDependenciesArchive_ReferringColumnToRemoteCells::SpanningDependenciesArchive_ReferringColumnToRemoteCells(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  internal_cell_reference_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.SpanningDependenciesArchive.ReferringColumnToRemoteCells)
}
SpanningDependenciesArchive_ReferringColumnToRemoteCells::SpanningDependenciesArchive_ReferringColumnToRemoteCells(const SpanningDependenciesArchive_ReferringColumnToRemoteCells& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      internal_cell_reference_(from.internal_cell_reference_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&column_, &from.column_,
    static_cast<size_t>(reinterpret_cast<char*>(&range_context_) -
    reinterpret_cast<char*>(&column_)) + sizeof(range_context_));
  // @@protoc_insertion_point(copy_constructor:TSCE.SpanningDependenciesArchive.ReferringColumnToRemoteCells)
}

void SpanningDependenciesArchive_ReferringColumnToRemoteCells::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&column_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&range_context_) -
    reinterpret_cast<char*>(&column_)) + sizeof(range_context_));
}

SpanningDependenciesArchive_ReferringColumnToRemoteCells::~SpanningDependenciesArchive_ReferringColumnToRemoteCells() {
  // @@protoc_insertion_point(destructor:TSCE.SpanningDependenciesArchive.ReferringColumnToRemoteCells)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SpanningDependenciesArchive_ReferringColumnToRemoteCells::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SpanningDependenciesArchive_ReferringColumnToRemoteCells::ArenaDtor(void* object) {
  SpanningDependenciesArchive_ReferringColumnToRemoteCells* _this = reinterpret_cast< SpanningDependenciesArchive_ReferringColumnToRemoteCells* >(object);
  (void)_this;
}
void SpanningDependenciesArchive_ReferringColumnToRemoteCells::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpanningDependenciesArchive_ReferringColumnToRemoteCells::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SpanningDependenciesArchive_ReferringColumnToRemoteCells::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.SpanningDependenciesArchive.ReferringColumnToRemoteCells)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  internal_cell_reference_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&column_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&range_context_) -
        reinterpret_cast<char*>(&column_)) + sizeof(range_context_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpanningDependenciesArchive_ReferringColumnToRemoteCells::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 column = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_column(&has_bits);
          column_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSCE.SpanningDependenciesArchive.RangeContext range_context = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSCE::SpanningDependenciesArchive_RangeContext_IsValid(val))) {
            _internal_set_range_context(static_cast<::TSCE::SpanningDependenciesArchive_RangeContext>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .TSCE.InternalCellReferenceArchive internal_cell_reference = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_internal_cell_reference(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpanningDependenciesArchive_ReferringColumnToRemoteCells::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.SpanningDependenciesArchive.ReferringColumnToRemoteCells)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 column = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_column(), target);
  }

  // required .TSCE.SpanningDependenciesArchive.RangeContext range_context = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_range_context(), target);
  }

  // repeated .TSCE.InternalCellReferenceArchive internal_cell_reference = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_internal_cell_reference_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_internal_cell_reference(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.SpanningDependenciesArchive.ReferringColumnToRemoteCells)
  return target;
}

size_t SpanningDependenciesArchive_ReferringColumnToRemoteCells::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.SpanningDependenciesArchive.ReferringColumnToRemoteCells)
  size_t total_size = 0;

  if (_internal_has_column()) {
    // required uint32 column = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_column());
  }

  if (_internal_has_range_context()) {
    // required .TSCE.SpanningDependenciesArchive.RangeContext range_context = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_range_context());
  }

  return total_size;
}
size_t SpanningDependenciesArchive_ReferringColumnToRemoteCells::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.SpanningDependenciesArchive.ReferringColumnToRemoteCells)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 column = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_column());

    // required .TSCE.SpanningDependenciesArchive.RangeContext range_context = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_range_context());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.InternalCellReferenceArchive internal_cell_reference = 3;
  total_size += 1UL * this->_internal_internal_cell_reference_size();
  for (const auto& msg : this->internal_cell_reference_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpanningDependenciesArchive_ReferringColumnToRemoteCells::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.SpanningDependenciesArchive.ReferringColumnToRemoteCells)
  GOOGLE_DCHECK_NE(&from, this);
  const SpanningDependenciesArchive_ReferringColumnToRemoteCells* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpanningDependenciesArchive_ReferringColumnToRemoteCells>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.SpanningDependenciesArchive.ReferringColumnToRemoteCells)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.SpanningDependenciesArchive.ReferringColumnToRemoteCells)
    MergeFrom(*source);
  }
}

void SpanningDependenciesArchive_ReferringColumnToRemoteCells::MergeFrom(const SpanningDependenciesArchive_ReferringColumnToRemoteCells& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.SpanningDependenciesArchive.ReferringColumnToRemoteCells)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  internal_cell_reference_.MergeFrom(from.internal_cell_reference_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      column_ = from.column_;
    }
    if (cached_has_bits & 0x00000002u) {
      range_context_ = from.range_context_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SpanningDependenciesArchive_ReferringColumnToRemoteCells::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.SpanningDependenciesArchive.ReferringColumnToRemoteCells)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpanningDependenciesArchive_ReferringColumnToRemoteCells::CopyFrom(const SpanningDependenciesArchive_ReferringColumnToRemoteCells& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.SpanningDependenciesArchive.ReferringColumnToRemoteCells)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpanningDependenciesArchive_ReferringColumnToRemoteCells::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(internal_cell_reference_)) return false;
  return true;
}

void SpanningDependenciesArchive_ReferringColumnToRemoteCells::InternalSwap(SpanningDependenciesArchive_ReferringColumnToRemoteCells* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  internal_cell_reference_.InternalSwap(&other->internal_cell_reference_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpanningDependenciesArchive_ReferringColumnToRemoteCells, range_context_)
      + sizeof(SpanningDependenciesArchive_ReferringColumnToRemoteCells::range_context_)
      - PROTOBUF_FIELD_OFFSET(SpanningDependenciesArchive_ReferringColumnToRemoteCells, column_)>(
          reinterpret_cast<char*>(&column_),
          reinterpret_cast<char*>(&other->column_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpanningDependenciesArchive_ReferringColumnToRemoteCells::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[43]);
}

// ===================================================================

class SpanningDependenciesArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SpanningDependenciesArchive>()._has_bits_);
  static const ::TSCE::RangeCoordinateArchive& total_range_for_deleted_table(const SpanningDependenciesArchive* msg);
  static void set_has_total_range_for_deleted_table(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSCE::RangeCoordinateArchive& body_range_for_deleted_table(const SpanningDependenciesArchive* msg);
  static void set_has_body_range_for_deleted_table(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::TSCE::RangeCoordinateArchive&
SpanningDependenciesArchive::_Internal::total_range_for_deleted_table(const SpanningDependenciesArchive* msg) {
  return *msg->total_range_for_deleted_table_;
}
const ::TSCE::RangeCoordinateArchive&
SpanningDependenciesArchive::_Internal::body_range_for_deleted_table(const SpanningDependenciesArchive* msg) {
  return *msg->body_range_for_deleted_table_;
}
SpanningDependenciesArchive::SpanningDependenciesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  column_(arena),
  range_context_(arena),
  cell_(arena),
  referring_column_to_local_cells_(arena),
  referring_column_to_remote_cells_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.SpanningDependenciesArchive)
}
SpanningDependenciesArchive::SpanningDependenciesArchive(const SpanningDependenciesArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      column_(from.column_),
      range_context_(from.range_context_),
      cell_(from.cell_),
      referring_column_to_local_cells_(from.referring_column_to_local_cells_),
      referring_column_to_remote_cells_(from.referring_column_to_remote_cells_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_total_range_for_deleted_table()) {
    total_range_for_deleted_table_ = new ::TSCE::RangeCoordinateArchive(*from.total_range_for_deleted_table_);
  } else {
    total_range_for_deleted_table_ = nullptr;
  }
  if (from._internal_has_body_range_for_deleted_table()) {
    body_range_for_deleted_table_ = new ::TSCE::RangeCoordinateArchive(*from.body_range_for_deleted_table_);
  } else {
    body_range_for_deleted_table_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSCE.SpanningDependenciesArchive)
}

void SpanningDependenciesArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&total_range_for_deleted_table_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&body_range_for_deleted_table_) -
    reinterpret_cast<char*>(&total_range_for_deleted_table_)) + sizeof(body_range_for_deleted_table_));
}

SpanningDependenciesArchive::~SpanningDependenciesArchive() {
  // @@protoc_insertion_point(destructor:TSCE.SpanningDependenciesArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SpanningDependenciesArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete total_range_for_deleted_table_;
  if (this != internal_default_instance()) delete body_range_for_deleted_table_;
}

void SpanningDependenciesArchive::ArenaDtor(void* object) {
  SpanningDependenciesArchive* _this = reinterpret_cast< SpanningDependenciesArchive* >(object);
  (void)_this;
}
void SpanningDependenciesArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpanningDependenciesArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SpanningDependenciesArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.SpanningDependenciesArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  column_.Clear();
  range_context_.Clear();
  cell_.Clear();
  referring_column_to_local_cells_.Clear();
  referring_column_to_remote_cells_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(total_range_for_deleted_table_ != nullptr);
      total_range_for_deleted_table_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(body_range_for_deleted_table_ != nullptr);
      body_range_for_deleted_table_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpanningDependenciesArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 column = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_column(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_column(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSCE.SpanningDependenciesArchive.RangeContext range_context = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::TSCE::SpanningDependenciesArchive_RangeContext_IsValid(val))) {
              _internal_add_range_context(static_cast<::TSCE::SpanningDependenciesArchive_RangeContext>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_range_context(), ptr, ctx, ::TSCE::SpanningDependenciesArchive_RangeContext_IsValid, &_internal_metadata_, 2);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSCE.CellReferenceArchive cell = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cell(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .TSCE.RangeCoordinateArchive total_range_for_deleted_table = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_total_range_for_deleted_table(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCE.RangeCoordinateArchive body_range_for_deleted_table = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_body_range_for_deleted_table(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSCE.SpanningDependenciesArchive.ReferringColumnToLocalCells referring_column_to_local_cells = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_referring_column_to_local_cells(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSCE.SpanningDependenciesArchive.ReferringColumnToRemoteCells referring_column_to_remote_cells = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_referring_column_to_remote_cells(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpanningDependenciesArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.SpanningDependenciesArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 column = 1;
  for (int i = 0, n = this->_internal_column_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_column(i), target);
  }

  // repeated .TSCE.SpanningDependenciesArchive.RangeContext range_context = 2;
  for (int i = 0, n = this->_internal_range_context_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        2, this->_internal_range_context(i), target);
  }

  // repeated .TSCE.CellReferenceArchive cell = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_cell_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_cell(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional .TSCE.RangeCoordinateArchive total_range_for_deleted_table = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::total_range_for_deleted_table(this), target, stream);
  }

  // optional .TSCE.RangeCoordinateArchive body_range_for_deleted_table = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::body_range_for_deleted_table(this), target, stream);
  }

  // repeated .TSCE.SpanningDependenciesArchive.ReferringColumnToLocalCells referring_column_to_local_cells = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_referring_column_to_local_cells_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_referring_column_to_local_cells(i), target, stream);
  }

  // repeated .TSCE.SpanningDependenciesArchive.ReferringColumnToRemoteCells referring_column_to_remote_cells = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_referring_column_to_remote_cells_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_referring_column_to_remote_cells(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.SpanningDependenciesArchive)
  return target;
}

size_t SpanningDependenciesArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.SpanningDependenciesArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 column = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->column_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_column_size());
    total_size += data_size;
  }

  // repeated .TSCE.SpanningDependenciesArchive.RangeContext range_context = 2;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_range_context_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_range_context(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // repeated .TSCE.CellReferenceArchive cell = 3;
  total_size += 1UL * this->_internal_cell_size();
  for (const auto& msg : this->cell_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSCE.SpanningDependenciesArchive.ReferringColumnToLocalCells referring_column_to_local_cells = 6;
  total_size += 1UL * this->_internal_referring_column_to_local_cells_size();
  for (const auto& msg : this->referring_column_to_local_cells_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSCE.SpanningDependenciesArchive.ReferringColumnToRemoteCells referring_column_to_remote_cells = 7;
  total_size += 1UL * this->_internal_referring_column_to_remote_cells_size();
  for (const auto& msg : this->referring_column_to_remote_cells_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .TSCE.RangeCoordinateArchive total_range_for_deleted_table = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *total_range_for_deleted_table_);
    }

    // optional .TSCE.RangeCoordinateArchive body_range_for_deleted_table = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *body_range_for_deleted_table_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpanningDependenciesArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.SpanningDependenciesArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const SpanningDependenciesArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpanningDependenciesArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.SpanningDependenciesArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.SpanningDependenciesArchive)
    MergeFrom(*source);
  }
}

void SpanningDependenciesArchive::MergeFrom(const SpanningDependenciesArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.SpanningDependenciesArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  column_.MergeFrom(from.column_);
  range_context_.MergeFrom(from.range_context_);
  cell_.MergeFrom(from.cell_);
  referring_column_to_local_cells_.MergeFrom(from.referring_column_to_local_cells_);
  referring_column_to_remote_cells_.MergeFrom(from.referring_column_to_remote_cells_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_total_range_for_deleted_table()->::TSCE::RangeCoordinateArchive::MergeFrom(from._internal_total_range_for_deleted_table());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_body_range_for_deleted_table()->::TSCE::RangeCoordinateArchive::MergeFrom(from._internal_body_range_for_deleted_table());
    }
  }
}

void SpanningDependenciesArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.SpanningDependenciesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpanningDependenciesArchive::CopyFrom(const SpanningDependenciesArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.SpanningDependenciesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpanningDependenciesArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(cell_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(referring_column_to_local_cells_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(referring_column_to_remote_cells_)) return false;
  if (_internal_has_total_range_for_deleted_table()) {
    if (!total_range_for_deleted_table_->IsInitialized()) return false;
  }
  if (_internal_has_body_range_for_deleted_table()) {
    if (!body_range_for_deleted_table_->IsInitialized()) return false;
  }
  return true;
}

void SpanningDependenciesArchive::InternalSwap(SpanningDependenciesArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  column_.InternalSwap(&other->column_);
  range_context_.InternalSwap(&other->range_context_);
  cell_.InternalSwap(&other->cell_);
  referring_column_to_local_cells_.InternalSwap(&other->referring_column_to_local_cells_);
  referring_column_to_remote_cells_.InternalSwap(&other->referring_column_to_remote_cells_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpanningDependenciesArchive, body_range_for_deleted_table_)
      + sizeof(SpanningDependenciesArchive::body_range_for_deleted_table_)
      - PROTOBUF_FIELD_OFFSET(SpanningDependenciesArchive, total_range_for_deleted_table_)>(
          reinterpret_cast<char*>(&total_range_for_deleted_table_),
          reinterpret_cast<char*>(&other->total_range_for_deleted_table_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpanningDependenciesArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[44]);
}

// ===================================================================

class SpanningDependenciesExpandedArchive_ExtentRange::_Internal {
 public:
  using HasBits = decltype(std::declval<SpanningDependenciesExpandedArchive_ExtentRange>()._has_bits_);
  static void set_has_extent_begin(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_extent_end(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

SpanningDependenciesExpandedArchive_ExtentRange::SpanningDependenciesExpandedArchive_ExtentRange(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.SpanningDependenciesExpandedArchive.ExtentRange)
}
SpanningDependenciesExpandedArchive_ExtentRange::SpanningDependenciesExpandedArchive_ExtentRange(const SpanningDependenciesExpandedArchive_ExtentRange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&extent_begin_, &from.extent_begin_,
    static_cast<size_t>(reinterpret_cast<char*>(&extent_end_) -
    reinterpret_cast<char*>(&extent_begin_)) + sizeof(extent_end_));
  // @@protoc_insertion_point(copy_constructor:TSCE.SpanningDependenciesExpandedArchive.ExtentRange)
}

void SpanningDependenciesExpandedArchive_ExtentRange::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&extent_begin_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&extent_end_) -
    reinterpret_cast<char*>(&extent_begin_)) + sizeof(extent_end_));
}

SpanningDependenciesExpandedArchive_ExtentRange::~SpanningDependenciesExpandedArchive_ExtentRange() {
  // @@protoc_insertion_point(destructor:TSCE.SpanningDependenciesExpandedArchive.ExtentRange)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SpanningDependenciesExpandedArchive_ExtentRange::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SpanningDependenciesExpandedArchive_ExtentRange::ArenaDtor(void* object) {
  SpanningDependenciesExpandedArchive_ExtentRange* _this = reinterpret_cast< SpanningDependenciesExpandedArchive_ExtentRange* >(object);
  (void)_this;
}
void SpanningDependenciesExpandedArchive_ExtentRange::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpanningDependenciesExpandedArchive_ExtentRange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SpanningDependenciesExpandedArchive_ExtentRange::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.SpanningDependenciesExpandedArchive.ExtentRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&extent_begin_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&extent_end_) -
        reinterpret_cast<char*>(&extent_begin_)) + sizeof(extent_end_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpanningDependenciesExpandedArchive_ExtentRange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 extent_begin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_extent_begin(&has_bits);
          extent_begin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 extent_end = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_extent_end(&has_bits);
          extent_end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpanningDependenciesExpandedArchive_ExtentRange::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.SpanningDependenciesExpandedArchive.ExtentRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 extent_begin = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_extent_begin(), target);
  }

  // optional uint32 extent_end = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_extent_end(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.SpanningDependenciesExpandedArchive.ExtentRange)
  return target;
}

size_t SpanningDependenciesExpandedArchive_ExtentRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.SpanningDependenciesExpandedArchive.ExtentRange)
  size_t total_size = 0;

  // required uint32 extent_begin = 1;
  if (_internal_has_extent_begin()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_extent_begin());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 extent_end = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_extent_end());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpanningDependenciesExpandedArchive_ExtentRange::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.SpanningDependenciesExpandedArchive.ExtentRange)
  GOOGLE_DCHECK_NE(&from, this);
  const SpanningDependenciesExpandedArchive_ExtentRange* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpanningDependenciesExpandedArchive_ExtentRange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.SpanningDependenciesExpandedArchive.ExtentRange)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.SpanningDependenciesExpandedArchive.ExtentRange)
    MergeFrom(*source);
  }
}

void SpanningDependenciesExpandedArchive_ExtentRange::MergeFrom(const SpanningDependenciesExpandedArchive_ExtentRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.SpanningDependenciesExpandedArchive.ExtentRange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      extent_begin_ = from.extent_begin_;
    }
    if (cached_has_bits & 0x00000002u) {
      extent_end_ = from.extent_end_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SpanningDependenciesExpandedArchive_ExtentRange::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.SpanningDependenciesExpandedArchive.ExtentRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpanningDependenciesExpandedArchive_ExtentRange::CopyFrom(const SpanningDependenciesExpandedArchive_ExtentRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.SpanningDependenciesExpandedArchive.ExtentRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpanningDependenciesExpandedArchive_ExtentRange::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void SpanningDependenciesExpandedArchive_ExtentRange::InternalSwap(SpanningDependenciesExpandedArchive_ExtentRange* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpanningDependenciesExpandedArchive_ExtentRange, extent_end_)
      + sizeof(SpanningDependenciesExpandedArchive_ExtentRange::extent_end_)
      - PROTOBUF_FIELD_OFFSET(SpanningDependenciesExpandedArchive_ExtentRange, extent_begin_)>(
          reinterpret_cast<char*>(&extent_begin_),
          reinterpret_cast<char*>(&other->extent_begin_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpanningDependenciesExpandedArchive_ExtentRange::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[45]);
}

// ===================================================================

class SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext::_Internal {
 public:
  using HasBits = decltype(std::declval<SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext>()._has_bits_);
  static void set_has_owner_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_range_context(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext::SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ranges_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.SpanningDependenciesExpandedArchive.ExtentRangeWithTableWithContext)
}
SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext::SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext(const SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      ranges_(from.ranges_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&owner_id_, &from.owner_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&range_context_) -
    reinterpret_cast<char*>(&owner_id_)) + sizeof(range_context_));
  // @@protoc_insertion_point(copy_constructor:TSCE.SpanningDependenciesExpandedArchive.ExtentRangeWithTableWithContext)
}

void SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&owner_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&range_context_) -
    reinterpret_cast<char*>(&owner_id_)) + sizeof(range_context_));
}

SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext::~SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext() {
  // @@protoc_insertion_point(destructor:TSCE.SpanningDependenciesExpandedArchive.ExtentRangeWithTableWithContext)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext::ArenaDtor(void* object) {
  SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext* _this = reinterpret_cast< SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext* >(object);
  (void)_this;
}
void SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.SpanningDependenciesExpandedArchive.ExtentRangeWithTableWithContext)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ranges_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&owner_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&range_context_) -
        reinterpret_cast<char*>(&owner_id_)) + sizeof(range_context_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 owner_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_owner_id(&has_bits);
          owner_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSCE.SpanningDependenciesExpandedArchive.RangeContext range_context = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSCE::SpanningDependenciesExpandedArchive_RangeContext_IsValid(val))) {
            _internal_set_range_context(static_cast<::TSCE::SpanningDependenciesExpandedArchive_RangeContext>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .TSCE.SpanningDependenciesExpandedArchive.ExtentRange ranges = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ranges(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.SpanningDependenciesExpandedArchive.ExtentRangeWithTableWithContext)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 owner_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_owner_id(), target);
  }

  // required .TSCE.SpanningDependenciesExpandedArchive.RangeContext range_context = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_range_context(), target);
  }

  // repeated .TSCE.SpanningDependenciesExpandedArchive.ExtentRange ranges = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ranges_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_ranges(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.SpanningDependenciesExpandedArchive.ExtentRangeWithTableWithContext)
  return target;
}

size_t SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.SpanningDependenciesExpandedArchive.ExtentRangeWithTableWithContext)
  size_t total_size = 0;

  if (_internal_has_owner_id()) {
    // required uint32 owner_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_owner_id());
  }

  if (_internal_has_range_context()) {
    // required .TSCE.SpanningDependenciesExpandedArchive.RangeContext range_context = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_range_context());
  }

  return total_size;
}
size_t SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.SpanningDependenciesExpandedArchive.ExtentRangeWithTableWithContext)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 owner_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_owner_id());

    // required .TSCE.SpanningDependenciesExpandedArchive.RangeContext range_context = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_range_context());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.SpanningDependenciesExpandedArchive.ExtentRange ranges = 3;
  total_size += 1UL * this->_internal_ranges_size();
  for (const auto& msg : this->ranges_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.SpanningDependenciesExpandedArchive.ExtentRangeWithTableWithContext)
  GOOGLE_DCHECK_NE(&from, this);
  const SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.SpanningDependenciesExpandedArchive.ExtentRangeWithTableWithContext)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.SpanningDependenciesExpandedArchive.ExtentRangeWithTableWithContext)
    MergeFrom(*source);
  }
}

void SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext::MergeFrom(const SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.SpanningDependenciesExpandedArchive.ExtentRangeWithTableWithContext)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ranges_.MergeFrom(from.ranges_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      owner_id_ = from.owner_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      range_context_ = from.range_context_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.SpanningDependenciesExpandedArchive.ExtentRangeWithTableWithContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext::CopyFrom(const SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.SpanningDependenciesExpandedArchive.ExtentRangeWithTableWithContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(ranges_)) return false;
  return true;
}

void SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext::InternalSwap(SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ranges_.InternalSwap(&other->ranges_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext, range_context_)
      + sizeof(SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext::range_context_)
      - PROTOBUF_FIELD_OFFSET(SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext, owner_id_)>(
          reinterpret_cast<char*>(&owner_id_),
          reinterpret_cast<char*>(&other->owner_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[46]);
}

// ===================================================================

class SpanningDependenciesExpandedArchive_CellCoordRefersToExtents::_Internal {
 public:
  using HasBits = decltype(std::declval<SpanningDependenciesExpandedArchive_CellCoordRefersToExtents>()._has_bits_);
  static const ::TSCE::CellCoordinateArchive& coordinate(const SpanningDependenciesExpandedArchive_CellCoordRefersToExtents* msg);
  static void set_has_coordinate(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSCE::CellCoordinateArchive&
SpanningDependenciesExpandedArchive_CellCoordRefersToExtents::_Internal::coordinate(const SpanningDependenciesExpandedArchive_CellCoordRefersToExtents* msg) {
  return *msg->coordinate_;
}
SpanningDependenciesExpandedArchive_CellCoordRefersToExtents::SpanningDependenciesExpandedArchive_CellCoordRefersToExtents(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ranges_by_table_context_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.SpanningDependenciesExpandedArchive.CellCoordRefersToExtents)
}
SpanningDependenciesExpandedArchive_CellCoordRefersToExtents::SpanningDependenciesExpandedArchive_CellCoordRefersToExtents(const SpanningDependenciesExpandedArchive_CellCoordRefersToExtents& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      ranges_by_table_context_(from.ranges_by_table_context_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_coordinate()) {
    coordinate_ = new ::TSCE::CellCoordinateArchive(*from.coordinate_);
  } else {
    coordinate_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSCE.SpanningDependenciesExpandedArchive.CellCoordRefersToExtents)
}

void SpanningDependenciesExpandedArchive_CellCoordRefersToExtents::SharedCtor() {
coordinate_ = nullptr;
}

SpanningDependenciesExpandedArchive_CellCoordRefersToExtents::~SpanningDependenciesExpandedArchive_CellCoordRefersToExtents() {
  // @@protoc_insertion_point(destructor:TSCE.SpanningDependenciesExpandedArchive.CellCoordRefersToExtents)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SpanningDependenciesExpandedArchive_CellCoordRefersToExtents::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete coordinate_;
}

void SpanningDependenciesExpandedArchive_CellCoordRefersToExtents::ArenaDtor(void* object) {
  SpanningDependenciesExpandedArchive_CellCoordRefersToExtents* _this = reinterpret_cast< SpanningDependenciesExpandedArchive_CellCoordRefersToExtents* >(object);
  (void)_this;
}
void SpanningDependenciesExpandedArchive_CellCoordRefersToExtents::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpanningDependenciesExpandedArchive_CellCoordRefersToExtents::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SpanningDependenciesExpandedArchive_CellCoordRefersToExtents::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.SpanningDependenciesExpandedArchive.CellCoordRefersToExtents)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ranges_by_table_context_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(coordinate_ != nullptr);
    coordinate_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpanningDependenciesExpandedArchive_CellCoordRefersToExtents::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCE.CellCoordinateArchive coordinate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_coordinate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSCE.SpanningDependenciesExpandedArchive.ExtentRangeWithTableWithContext ranges_by_table_context = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ranges_by_table_context(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpanningDependenciesExpandedArchive_CellCoordRefersToExtents::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.SpanningDependenciesExpandedArchive.CellCoordRefersToExtents)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSCE.CellCoordinateArchive coordinate = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::coordinate(this), target, stream);
  }

  // repeated .TSCE.SpanningDependenciesExpandedArchive.ExtentRangeWithTableWithContext ranges_by_table_context = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ranges_by_table_context_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_ranges_by_table_context(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.SpanningDependenciesExpandedArchive.CellCoordRefersToExtents)
  return target;
}

size_t SpanningDependenciesExpandedArchive_CellCoordRefersToExtents::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.SpanningDependenciesExpandedArchive.CellCoordRefersToExtents)
  size_t total_size = 0;

  // required .TSCE.CellCoordinateArchive coordinate = 1;
  if (_internal_has_coordinate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *coordinate_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.SpanningDependenciesExpandedArchive.ExtentRangeWithTableWithContext ranges_by_table_context = 2;
  total_size += 1UL * this->_internal_ranges_by_table_context_size();
  for (const auto& msg : this->ranges_by_table_context_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpanningDependenciesExpandedArchive_CellCoordRefersToExtents::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.SpanningDependenciesExpandedArchive.CellCoordRefersToExtents)
  GOOGLE_DCHECK_NE(&from, this);
  const SpanningDependenciesExpandedArchive_CellCoordRefersToExtents* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpanningDependenciesExpandedArchive_CellCoordRefersToExtents>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.SpanningDependenciesExpandedArchive.CellCoordRefersToExtents)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.SpanningDependenciesExpandedArchive.CellCoordRefersToExtents)
    MergeFrom(*source);
  }
}

void SpanningDependenciesExpandedArchive_CellCoordRefersToExtents::MergeFrom(const SpanningDependenciesExpandedArchive_CellCoordRefersToExtents& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.SpanningDependenciesExpandedArchive.CellCoordRefersToExtents)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ranges_by_table_context_.MergeFrom(from.ranges_by_table_context_);
  if (from._internal_has_coordinate()) {
    _internal_mutable_coordinate()->::TSCE::CellCoordinateArchive::MergeFrom(from._internal_coordinate());
  }
}

void SpanningDependenciesExpandedArchive_CellCoordRefersToExtents::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.SpanningDependenciesExpandedArchive.CellCoordRefersToExtents)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpanningDependenciesExpandedArchive_CellCoordRefersToExtents::CopyFrom(const SpanningDependenciesExpandedArchive_CellCoordRefersToExtents& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.SpanningDependenciesExpandedArchive.CellCoordRefersToExtents)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpanningDependenciesExpandedArchive_CellCoordRefersToExtents::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(ranges_by_table_context_)) return false;
  return true;
}

void SpanningDependenciesExpandedArchive_CellCoordRefersToExtents::InternalSwap(SpanningDependenciesExpandedArchive_CellCoordRefersToExtents* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ranges_by_table_context_.InternalSwap(&other->ranges_by_table_context_);
  swap(coordinate_, other->coordinate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpanningDependenciesExpandedArchive_CellCoordRefersToExtents::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[47]);
}

// ===================================================================

class SpanningDependenciesExpandedArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SpanningDependenciesExpandedArchive>()._has_bits_);
  static const ::TSCE::RangeCoordinateArchive& total_range_for_table(const SpanningDependenciesExpandedArchive* msg);
  static void set_has_total_range_for_table(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSCE::RangeCoordinateArchive& body_range_for_table(const SpanningDependenciesExpandedArchive* msg);
  static void set_has_body_range_for_table(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::TSCE::RangeCoordinateArchive&
SpanningDependenciesExpandedArchive::_Internal::total_range_for_table(const SpanningDependenciesExpandedArchive* msg) {
  return *msg->total_range_for_table_;
}
const ::TSCE::RangeCoordinateArchive&
SpanningDependenciesExpandedArchive::_Internal::body_range_for_table(const SpanningDependenciesExpandedArchive* msg) {
  return *msg->body_range_for_table_;
}
SpanningDependenciesExpandedArchive::SpanningDependenciesExpandedArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  coord_refers_to_spans_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.SpanningDependenciesExpandedArchive)
}
SpanningDependenciesExpandedArchive::SpanningDependenciesExpandedArchive(const SpanningDependenciesExpandedArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      coord_refers_to_spans_(from.coord_refers_to_spans_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_total_range_for_table()) {
    total_range_for_table_ = new ::TSCE::RangeCoordinateArchive(*from.total_range_for_table_);
  } else {
    total_range_for_table_ = nullptr;
  }
  if (from._internal_has_body_range_for_table()) {
    body_range_for_table_ = new ::TSCE::RangeCoordinateArchive(*from.body_range_for_table_);
  } else {
    body_range_for_table_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSCE.SpanningDependenciesExpandedArchive)
}

void SpanningDependenciesExpandedArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&total_range_for_table_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&body_range_for_table_) -
    reinterpret_cast<char*>(&total_range_for_table_)) + sizeof(body_range_for_table_));
}

SpanningDependenciesExpandedArchive::~SpanningDependenciesExpandedArchive() {
  // @@protoc_insertion_point(destructor:TSCE.SpanningDependenciesExpandedArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SpanningDependenciesExpandedArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete total_range_for_table_;
  if (this != internal_default_instance()) delete body_range_for_table_;
}

void SpanningDependenciesExpandedArchive::ArenaDtor(void* object) {
  SpanningDependenciesExpandedArchive* _this = reinterpret_cast< SpanningDependenciesExpandedArchive* >(object);
  (void)_this;
}
void SpanningDependenciesExpandedArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpanningDependenciesExpandedArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SpanningDependenciesExpandedArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.SpanningDependenciesExpandedArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  coord_refers_to_spans_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(total_range_for_table_ != nullptr);
      total_range_for_table_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(body_range_for_table_ != nullptr);
      body_range_for_table_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpanningDependenciesExpandedArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSCE.SpanningDependenciesExpandedArchive.CellCoordRefersToExtents coord_refers_to_spans = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_coord_refers_to_spans(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .TSCE.RangeCoordinateArchive total_range_for_table = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_total_range_for_table(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCE.RangeCoordinateArchive body_range_for_table = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_body_range_for_table(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpanningDependenciesExpandedArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.SpanningDependenciesExpandedArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSCE.SpanningDependenciesExpandedArchive.CellCoordRefersToExtents coord_refers_to_spans = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_coord_refers_to_spans_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_coord_refers_to_spans(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional .TSCE.RangeCoordinateArchive total_range_for_table = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::total_range_for_table(this), target, stream);
  }

  // optional .TSCE.RangeCoordinateArchive body_range_for_table = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::body_range_for_table(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.SpanningDependenciesExpandedArchive)
  return target;
}

size_t SpanningDependenciesExpandedArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.SpanningDependenciesExpandedArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.SpanningDependenciesExpandedArchive.CellCoordRefersToExtents coord_refers_to_spans = 1;
  total_size += 1UL * this->_internal_coord_refers_to_spans_size();
  for (const auto& msg : this->coord_refers_to_spans_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .TSCE.RangeCoordinateArchive total_range_for_table = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *total_range_for_table_);
    }

    // optional .TSCE.RangeCoordinateArchive body_range_for_table = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *body_range_for_table_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpanningDependenciesExpandedArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.SpanningDependenciesExpandedArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const SpanningDependenciesExpandedArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpanningDependenciesExpandedArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.SpanningDependenciesExpandedArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.SpanningDependenciesExpandedArchive)
    MergeFrom(*source);
  }
}

void SpanningDependenciesExpandedArchive::MergeFrom(const SpanningDependenciesExpandedArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.SpanningDependenciesExpandedArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  coord_refers_to_spans_.MergeFrom(from.coord_refers_to_spans_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_total_range_for_table()->::TSCE::RangeCoordinateArchive::MergeFrom(from._internal_total_range_for_table());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_body_range_for_table()->::TSCE::RangeCoordinateArchive::MergeFrom(from._internal_body_range_for_table());
    }
  }
}

void SpanningDependenciesExpandedArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.SpanningDependenciesExpandedArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpanningDependenciesExpandedArchive::CopyFrom(const SpanningDependenciesExpandedArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.SpanningDependenciesExpandedArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpanningDependenciesExpandedArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(coord_refers_to_spans_)) return false;
  if (_internal_has_total_range_for_table()) {
    if (!total_range_for_table_->IsInitialized()) return false;
  }
  if (_internal_has_body_range_for_table()) {
    if (!body_range_for_table_->IsInitialized()) return false;
  }
  return true;
}

void SpanningDependenciesExpandedArchive::InternalSwap(SpanningDependenciesExpandedArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  coord_refers_to_spans_.InternalSwap(&other->coord_refers_to_spans_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpanningDependenciesExpandedArchive, body_range_for_table_)
      + sizeof(SpanningDependenciesExpandedArchive::body_range_for_table_)
      - PROTOBUF_FIELD_OFFSET(SpanningDependenciesExpandedArchive, total_range_for_table_)>(
          reinterpret_cast<char*>(&total_range_for_table_),
          reinterpret_cast<char*>(&other->total_range_for_table_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpanningDependenciesExpandedArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[48]);
}

// ===================================================================

class WholeOwnerDependenciesArchive::_Internal {
 public:
};

WholeOwnerDependenciesArchive::WholeOwnerDependenciesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  dependent_cell_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.WholeOwnerDependenciesArchive)
}
WholeOwnerDependenciesArchive::WholeOwnerDependenciesArchive(const WholeOwnerDependenciesArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      dependent_cell_(from.dependent_cell_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSCE.WholeOwnerDependenciesArchive)
}

void WholeOwnerDependenciesArchive::SharedCtor() {
}

WholeOwnerDependenciesArchive::~WholeOwnerDependenciesArchive() {
  // @@protoc_insertion_point(destructor:TSCE.WholeOwnerDependenciesArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WholeOwnerDependenciesArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void WholeOwnerDependenciesArchive::ArenaDtor(void* object) {
  WholeOwnerDependenciesArchive* _this = reinterpret_cast< WholeOwnerDependenciesArchive* >(object);
  (void)_this;
}
void WholeOwnerDependenciesArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WholeOwnerDependenciesArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WholeOwnerDependenciesArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.WholeOwnerDependenciesArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dependent_cell_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WholeOwnerDependenciesArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSCE.InternalCellReferenceArchive dependent_cell = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_dependent_cell(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WholeOwnerDependenciesArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.WholeOwnerDependenciesArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSCE.InternalCellReferenceArchive dependent_cell = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_dependent_cell_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_dependent_cell(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.WholeOwnerDependenciesArchive)
  return target;
}

size_t WholeOwnerDependenciesArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.WholeOwnerDependenciesArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.InternalCellReferenceArchive dependent_cell = 1;
  total_size += 1UL * this->_internal_dependent_cell_size();
  for (const auto& msg : this->dependent_cell_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WholeOwnerDependenciesArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.WholeOwnerDependenciesArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const WholeOwnerDependenciesArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WholeOwnerDependenciesArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.WholeOwnerDependenciesArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.WholeOwnerDependenciesArchive)
    MergeFrom(*source);
  }
}

void WholeOwnerDependenciesArchive::MergeFrom(const WholeOwnerDependenciesArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.WholeOwnerDependenciesArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dependent_cell_.MergeFrom(from.dependent_cell_);
}

void WholeOwnerDependenciesArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.WholeOwnerDependenciesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WholeOwnerDependenciesArchive::CopyFrom(const WholeOwnerDependenciesArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.WholeOwnerDependenciesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WholeOwnerDependenciesArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(dependent_cell_)) return false;
  return true;
}

void WholeOwnerDependenciesArchive::InternalSwap(WholeOwnerDependenciesArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  dependent_cell_.InternalSwap(&other->dependent_cell_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WholeOwnerDependenciesArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[49]);
}

// ===================================================================

class WholeOwnerDependenciesExpandedArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<WholeOwnerDependenciesExpandedArchive>()._has_bits_);
  static const ::TSCE::InternalCellRefSetArchive& dependent_cells(const WholeOwnerDependenciesExpandedArchive* msg);
  static void set_has_dependent_cells(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSCE::InternalCellRefSetArchive&
WholeOwnerDependenciesExpandedArchive::_Internal::dependent_cells(const WholeOwnerDependenciesExpandedArchive* msg) {
  return *msg->dependent_cells_;
}
WholeOwnerDependenciesExpandedArchive::WholeOwnerDependenciesExpandedArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.WholeOwnerDependenciesExpandedArchive)
}
WholeOwnerDependenciesExpandedArchive::WholeOwnerDependenciesExpandedArchive(const WholeOwnerDependenciesExpandedArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_dependent_cells()) {
    dependent_cells_ = new ::TSCE::InternalCellRefSetArchive(*from.dependent_cells_);
  } else {
    dependent_cells_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSCE.WholeOwnerDependenciesExpandedArchive)
}

void WholeOwnerDependenciesExpandedArchive::SharedCtor() {
dependent_cells_ = nullptr;
}

WholeOwnerDependenciesExpandedArchive::~WholeOwnerDependenciesExpandedArchive() {
  // @@protoc_insertion_point(destructor:TSCE.WholeOwnerDependenciesExpandedArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WholeOwnerDependenciesExpandedArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete dependent_cells_;
}

void WholeOwnerDependenciesExpandedArchive::ArenaDtor(void* object) {
  WholeOwnerDependenciesExpandedArchive* _this = reinterpret_cast< WholeOwnerDependenciesExpandedArchive* >(object);
  (void)_this;
}
void WholeOwnerDependenciesExpandedArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WholeOwnerDependenciesExpandedArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WholeOwnerDependenciesExpandedArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.WholeOwnerDependenciesExpandedArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(dependent_cells_ != nullptr);
    dependent_cells_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WholeOwnerDependenciesExpandedArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSCE.InternalCellRefSetArchive dependent_cells = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_dependent_cells(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WholeOwnerDependenciesExpandedArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.WholeOwnerDependenciesExpandedArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSCE.InternalCellRefSetArchive dependent_cells = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::dependent_cells(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.WholeOwnerDependenciesExpandedArchive)
  return target;
}

size_t WholeOwnerDependenciesExpandedArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.WholeOwnerDependenciesExpandedArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSCE.InternalCellRefSetArchive dependent_cells = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dependent_cells_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WholeOwnerDependenciesExpandedArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.WholeOwnerDependenciesExpandedArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const WholeOwnerDependenciesExpandedArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WholeOwnerDependenciesExpandedArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.WholeOwnerDependenciesExpandedArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.WholeOwnerDependenciesExpandedArchive)
    MergeFrom(*source);
  }
}

void WholeOwnerDependenciesExpandedArchive::MergeFrom(const WholeOwnerDependenciesExpandedArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.WholeOwnerDependenciesExpandedArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_dependent_cells()) {
    _internal_mutable_dependent_cells()->::TSCE::InternalCellRefSetArchive::MergeFrom(from._internal_dependent_cells());
  }
}

void WholeOwnerDependenciesExpandedArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.WholeOwnerDependenciesExpandedArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WholeOwnerDependenciesExpandedArchive::CopyFrom(const WholeOwnerDependenciesExpandedArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.WholeOwnerDependenciesExpandedArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WholeOwnerDependenciesExpandedArchive::IsInitialized() const {
  if (_internal_has_dependent_cells()) {
    if (!dependent_cells_->IsInitialized()) return false;
  }
  return true;
}

void WholeOwnerDependenciesExpandedArchive::InternalSwap(WholeOwnerDependenciesExpandedArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(dependent_cells_, other->dependent_cells_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WholeOwnerDependenciesExpandedArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[50]);
}

// ===================================================================

class CellErrorsArchive_ErrorForCell::_Internal {
 public:
  using HasBits = decltype(std::declval<CellErrorsArchive_ErrorForCell>()._has_bits_);
  static const ::TSCE::CellCoordinateArchive& coordinate(const CellErrorsArchive_ErrorForCell* msg);
  static void set_has_coordinate(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_error_flavor(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSCE::InternalCellReferenceArchive& err_due_to_cell(const CellErrorsArchive_ErrorForCell* msg);
  static void set_has_err_due_to_cell(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000005) ^ 0x00000005) != 0;
  }
};

const ::TSCE::CellCoordinateArchive&
CellErrorsArchive_ErrorForCell::_Internal::coordinate(const CellErrorsArchive_ErrorForCell* msg) {
  return *msg->coordinate_;
}
const ::TSCE::InternalCellReferenceArchive&
CellErrorsArchive_ErrorForCell::_Internal::err_due_to_cell(const CellErrorsArchive_ErrorForCell* msg) {
  return *msg->err_due_to_cell_;
}
CellErrorsArchive_ErrorForCell::CellErrorsArchive_ErrorForCell(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.CellErrorsArchive.ErrorForCell)
}
CellErrorsArchive_ErrorForCell::CellErrorsArchive_ErrorForCell(const CellErrorsArchive_ErrorForCell& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_coordinate()) {
    coordinate_ = new ::TSCE::CellCoordinateArchive(*from.coordinate_);
  } else {
    coordinate_ = nullptr;
  }
  if (from._internal_has_err_due_to_cell()) {
    err_due_to_cell_ = new ::TSCE::InternalCellReferenceArchive(*from.err_due_to_cell_);
  } else {
    err_due_to_cell_ = nullptr;
  }
  error_flavor_ = from.error_flavor_;
  // @@protoc_insertion_point(copy_constructor:TSCE.CellErrorsArchive.ErrorForCell)
}

void CellErrorsArchive_ErrorForCell::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&coordinate_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&error_flavor_) -
    reinterpret_cast<char*>(&coordinate_)) + sizeof(error_flavor_));
}

CellErrorsArchive_ErrorForCell::~CellErrorsArchive_ErrorForCell() {
  // @@protoc_insertion_point(destructor:TSCE.CellErrorsArchive.ErrorForCell)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CellErrorsArchive_ErrorForCell::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete coordinate_;
  if (this != internal_default_instance()) delete err_due_to_cell_;
}

void CellErrorsArchive_ErrorForCell::ArenaDtor(void* object) {
  CellErrorsArchive_ErrorForCell* _this = reinterpret_cast< CellErrorsArchive_ErrorForCell* >(object);
  (void)_this;
}
void CellErrorsArchive_ErrorForCell::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CellErrorsArchive_ErrorForCell::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CellErrorsArchive_ErrorForCell::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.CellErrorsArchive.ErrorForCell)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(coordinate_ != nullptr);
      coordinate_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(err_due_to_cell_ != nullptr);
      err_due_to_cell_->Clear();
    }
  }
  error_flavor_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CellErrorsArchive_ErrorForCell::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCE.CellCoordinateArchive coordinate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_coordinate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSCE.CellErrorsArchive.ErrorFlavor error_flavor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSCE::CellErrorsArchive_ErrorFlavor_IsValid(val))) {
            _internal_set_error_flavor(static_cast<::TSCE::CellErrorsArchive_ErrorFlavor>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .TSCE.InternalCellReferenceArchive err_due_to_cell = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_err_due_to_cell(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CellErrorsArchive_ErrorForCell::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.CellErrorsArchive.ErrorForCell)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSCE.CellCoordinateArchive coordinate = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::coordinate(this), target, stream);
  }

  // required .TSCE.CellErrorsArchive.ErrorFlavor error_flavor = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_error_flavor(), target);
  }

  // optional .TSCE.InternalCellReferenceArchive err_due_to_cell = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::err_due_to_cell(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.CellErrorsArchive.ErrorForCell)
  return target;
}

size_t CellErrorsArchive_ErrorForCell::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.CellErrorsArchive.ErrorForCell)
  size_t total_size = 0;

  if (_internal_has_coordinate()) {
    // required .TSCE.CellCoordinateArchive coordinate = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *coordinate_);
  }

  if (_internal_has_error_flavor()) {
    // required .TSCE.CellErrorsArchive.ErrorFlavor error_flavor = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_error_flavor());
  }

  return total_size;
}
size_t CellErrorsArchive_ErrorForCell::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.CellErrorsArchive.ErrorForCell)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required .TSCE.CellCoordinateArchive coordinate = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *coordinate_);

    // required .TSCE.CellErrorsArchive.ErrorFlavor error_flavor = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_error_flavor());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSCE.InternalCellReferenceArchive err_due_to_cell = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *err_due_to_cell_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CellErrorsArchive_ErrorForCell::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.CellErrorsArchive.ErrorForCell)
  GOOGLE_DCHECK_NE(&from, this);
  const CellErrorsArchive_ErrorForCell* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CellErrorsArchive_ErrorForCell>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.CellErrorsArchive.ErrorForCell)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.CellErrorsArchive.ErrorForCell)
    MergeFrom(*source);
  }
}

void CellErrorsArchive_ErrorForCell::MergeFrom(const CellErrorsArchive_ErrorForCell& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.CellErrorsArchive.ErrorForCell)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_coordinate()->::TSCE::CellCoordinateArchive::MergeFrom(from._internal_coordinate());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_err_due_to_cell()->::TSCE::InternalCellReferenceArchive::MergeFrom(from._internal_err_due_to_cell());
    }
    if (cached_has_bits & 0x00000004u) {
      error_flavor_ = from.error_flavor_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CellErrorsArchive_ErrorForCell::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.CellErrorsArchive.ErrorForCell)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CellErrorsArchive_ErrorForCell::CopyFrom(const CellErrorsArchive_ErrorForCell& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.CellErrorsArchive.ErrorForCell)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellErrorsArchive_ErrorForCell::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_err_due_to_cell()) {
    if (!err_due_to_cell_->IsInitialized()) return false;
  }
  return true;
}

void CellErrorsArchive_ErrorForCell::InternalSwap(CellErrorsArchive_ErrorForCell* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CellErrorsArchive_ErrorForCell, error_flavor_)
      + sizeof(CellErrorsArchive_ErrorForCell::error_flavor_)
      - PROTOBUF_FIELD_OFFSET(CellErrorsArchive_ErrorForCell, coordinate_)>(
          reinterpret_cast<char*>(&coordinate_),
          reinterpret_cast<char*>(&other->coordinate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CellErrorsArchive_ErrorForCell::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[51]);
}

// ===================================================================

class CellErrorsArchive::_Internal {
 public:
};

CellErrorsArchive::CellErrorsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  errors_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.CellErrorsArchive)
}
CellErrorsArchive::CellErrorsArchive(const CellErrorsArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      errors_(from.errors_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSCE.CellErrorsArchive)
}

void CellErrorsArchive::SharedCtor() {
}

CellErrorsArchive::~CellErrorsArchive() {
  // @@protoc_insertion_point(destructor:TSCE.CellErrorsArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CellErrorsArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CellErrorsArchive::ArenaDtor(void* object) {
  CellErrorsArchive* _this = reinterpret_cast< CellErrorsArchive* >(object);
  (void)_this;
}
void CellErrorsArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CellErrorsArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CellErrorsArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.CellErrorsArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  errors_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CellErrorsArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSCE.CellErrorsArchive.ErrorForCell errors = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_errors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CellErrorsArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.CellErrorsArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSCE.CellErrorsArchive.ErrorForCell errors = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_errors_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_errors(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.CellErrorsArchive)
  return target;
}

size_t CellErrorsArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.CellErrorsArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.CellErrorsArchive.ErrorForCell errors = 1;
  total_size += 1UL * this->_internal_errors_size();
  for (const auto& msg : this->errors_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CellErrorsArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.CellErrorsArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const CellErrorsArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CellErrorsArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.CellErrorsArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.CellErrorsArchive)
    MergeFrom(*source);
  }
}

void CellErrorsArchive::MergeFrom(const CellErrorsArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.CellErrorsArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  errors_.MergeFrom(from.errors_);
}

void CellErrorsArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.CellErrorsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CellErrorsArchive::CopyFrom(const CellErrorsArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.CellErrorsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellErrorsArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(errors_)) return false;
  return true;
}

void CellErrorsArchive::InternalSwap(CellErrorsArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  errors_.InternalSwap(&other->errors_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CellErrorsArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[52]);
}

// ===================================================================

class UuidReferencesArchive_TableRef::_Internal {
 public:
  using HasBits = decltype(std::declval<UuidReferencesArchive_TableRef>()._has_bits_);
  static const ::TSP::UUID& owner_uuid(const UuidReferencesArchive_TableRef* msg);
  static void set_has_owner_uuid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSCE::CellCoordSetArchive& coord_set(const UuidReferencesArchive_TableRef* msg);
  static void set_has_coord_set(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSP::UUID&
UuidReferencesArchive_TableRef::_Internal::owner_uuid(const UuidReferencesArchive_TableRef* msg) {
  return *msg->owner_uuid_;
}
const ::TSCE::CellCoordSetArchive&
UuidReferencesArchive_TableRef::_Internal::coord_set(const UuidReferencesArchive_TableRef* msg) {
  return *msg->coord_set_;
}
void UuidReferencesArchive_TableRef::clear_owner_uuid() {
  if (owner_uuid_ != nullptr) owner_uuid_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
UuidReferencesArchive_TableRef::UuidReferencesArchive_TableRef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.UuidReferencesArchive.TableRef)
}
UuidReferencesArchive_TableRef::UuidReferencesArchive_TableRef(const UuidReferencesArchive_TableRef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_owner_uuid()) {
    owner_uuid_ = new ::TSP::UUID(*from.owner_uuid_);
  } else {
    owner_uuid_ = nullptr;
  }
  if (from._internal_has_coord_set()) {
    coord_set_ = new ::TSCE::CellCoordSetArchive(*from.coord_set_);
  } else {
    coord_set_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSCE.UuidReferencesArchive.TableRef)
}

void UuidReferencesArchive_TableRef::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&owner_uuid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&coord_set_) -
    reinterpret_cast<char*>(&owner_uuid_)) + sizeof(coord_set_));
}

UuidReferencesArchive_TableRef::~UuidReferencesArchive_TableRef() {
  // @@protoc_insertion_point(destructor:TSCE.UuidReferencesArchive.TableRef)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UuidReferencesArchive_TableRef::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete owner_uuid_;
  if (this != internal_default_instance()) delete coord_set_;
}

void UuidReferencesArchive_TableRef::ArenaDtor(void* object) {
  UuidReferencesArchive_TableRef* _this = reinterpret_cast< UuidReferencesArchive_TableRef* >(object);
  (void)_this;
}
void UuidReferencesArchive_TableRef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UuidReferencesArchive_TableRef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UuidReferencesArchive_TableRef::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.UuidReferencesArchive.TableRef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(owner_uuid_ != nullptr);
      owner_uuid_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(coord_set_ != nullptr);
      coord_set_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UuidReferencesArchive_TableRef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.UUID owner_uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_owner_uuid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCE.CellCoordSetArchive coord_set = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_coord_set(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UuidReferencesArchive_TableRef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.UuidReferencesArchive.TableRef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSP.UUID owner_uuid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::owner_uuid(this), target, stream);
  }

  // optional .TSCE.CellCoordSetArchive coord_set = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::coord_set(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.UuidReferencesArchive.TableRef)
  return target;
}

size_t UuidReferencesArchive_TableRef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.UuidReferencesArchive.TableRef)
  size_t total_size = 0;

  // required .TSP.UUID owner_uuid = 1;
  if (_internal_has_owner_uuid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *owner_uuid_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSCE.CellCoordSetArchive coord_set = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *coord_set_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UuidReferencesArchive_TableRef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.UuidReferencesArchive.TableRef)
  GOOGLE_DCHECK_NE(&from, this);
  const UuidReferencesArchive_TableRef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UuidReferencesArchive_TableRef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.UuidReferencesArchive.TableRef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.UuidReferencesArchive.TableRef)
    MergeFrom(*source);
  }
}

void UuidReferencesArchive_TableRef::MergeFrom(const UuidReferencesArchive_TableRef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.UuidReferencesArchive.TableRef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_owner_uuid()->::TSP::UUID::MergeFrom(from._internal_owner_uuid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_coord_set()->::TSCE::CellCoordSetArchive::MergeFrom(from._internal_coord_set());
    }
  }
}

void UuidReferencesArchive_TableRef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.UuidReferencesArchive.TableRef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UuidReferencesArchive_TableRef::CopyFrom(const UuidReferencesArchive_TableRef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.UuidReferencesArchive.TableRef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UuidReferencesArchive_TableRef::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_owner_uuid()) {
    if (!owner_uuid_->IsInitialized()) return false;
  }
  if (_internal_has_coord_set()) {
    if (!coord_set_->IsInitialized()) return false;
  }
  return true;
}

void UuidReferencesArchive_TableRef::InternalSwap(UuidReferencesArchive_TableRef* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UuidReferencesArchive_TableRef, coord_set_)
      + sizeof(UuidReferencesArchive_TableRef::coord_set_)
      - PROTOBUF_FIELD_OFFSET(UuidReferencesArchive_TableRef, owner_uuid_)>(
          reinterpret_cast<char*>(&owner_uuid_),
          reinterpret_cast<char*>(&other->owner_uuid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UuidReferencesArchive_TableRef::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[53]);
}

// ===================================================================

class UuidReferencesArchive_UuidRef::_Internal {
 public:
  using HasBits = decltype(std::declval<UuidReferencesArchive_UuidRef>()._has_bits_);
  static const ::TSP::UUID& uuid(const UuidReferencesArchive_UuidRef* msg);
  static void set_has_uuid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSCE::CellCoordSetArchive& coord_set(const UuidReferencesArchive_UuidRef* msg);
  static void set_has_coord_set(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSP::UUID&
UuidReferencesArchive_UuidRef::_Internal::uuid(const UuidReferencesArchive_UuidRef* msg) {
  return *msg->uuid_;
}
const ::TSCE::CellCoordSetArchive&
UuidReferencesArchive_UuidRef::_Internal::coord_set(const UuidReferencesArchive_UuidRef* msg) {
  return *msg->coord_set_;
}
void UuidReferencesArchive_UuidRef::clear_uuid() {
  if (uuid_ != nullptr) uuid_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
UuidReferencesArchive_UuidRef::UuidReferencesArchive_UuidRef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.UuidReferencesArchive.UuidRef)
}
UuidReferencesArchive_UuidRef::UuidReferencesArchive_UuidRef(const UuidReferencesArchive_UuidRef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_uuid()) {
    uuid_ = new ::TSP::UUID(*from.uuid_);
  } else {
    uuid_ = nullptr;
  }
  if (from._internal_has_coord_set()) {
    coord_set_ = new ::TSCE::CellCoordSetArchive(*from.coord_set_);
  } else {
    coord_set_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSCE.UuidReferencesArchive.UuidRef)
}

void UuidReferencesArchive_UuidRef::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&uuid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&coord_set_) -
    reinterpret_cast<char*>(&uuid_)) + sizeof(coord_set_));
}

UuidReferencesArchive_UuidRef::~UuidReferencesArchive_UuidRef() {
  // @@protoc_insertion_point(destructor:TSCE.UuidReferencesArchive.UuidRef)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UuidReferencesArchive_UuidRef::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete uuid_;
  if (this != internal_default_instance()) delete coord_set_;
}

void UuidReferencesArchive_UuidRef::ArenaDtor(void* object) {
  UuidReferencesArchive_UuidRef* _this = reinterpret_cast< UuidReferencesArchive_UuidRef* >(object);
  (void)_this;
}
void UuidReferencesArchive_UuidRef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UuidReferencesArchive_UuidRef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UuidReferencesArchive_UuidRef::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.UuidReferencesArchive.UuidRef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(uuid_ != nullptr);
      uuid_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(coord_set_ != nullptr);
      coord_set_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UuidReferencesArchive_UuidRef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.UUID uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_uuid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCE.CellCoordSetArchive coord_set = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_coord_set(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UuidReferencesArchive_UuidRef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.UuidReferencesArchive.UuidRef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSP.UUID uuid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::uuid(this), target, stream);
  }

  // optional .TSCE.CellCoordSetArchive coord_set = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::coord_set(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.UuidReferencesArchive.UuidRef)
  return target;
}

size_t UuidReferencesArchive_UuidRef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.UuidReferencesArchive.UuidRef)
  size_t total_size = 0;

  // required .TSP.UUID uuid = 1;
  if (_internal_has_uuid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *uuid_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSCE.CellCoordSetArchive coord_set = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *coord_set_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UuidReferencesArchive_UuidRef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.UuidReferencesArchive.UuidRef)
  GOOGLE_DCHECK_NE(&from, this);
  const UuidReferencesArchive_UuidRef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UuidReferencesArchive_UuidRef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.UuidReferencesArchive.UuidRef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.UuidReferencesArchive.UuidRef)
    MergeFrom(*source);
  }
}

void UuidReferencesArchive_UuidRef::MergeFrom(const UuidReferencesArchive_UuidRef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.UuidReferencesArchive.UuidRef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_uuid()->::TSP::UUID::MergeFrom(from._internal_uuid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_coord_set()->::TSCE::CellCoordSetArchive::MergeFrom(from._internal_coord_set());
    }
  }
}

void UuidReferencesArchive_UuidRef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.UuidReferencesArchive.UuidRef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UuidReferencesArchive_UuidRef::CopyFrom(const UuidReferencesArchive_UuidRef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.UuidReferencesArchive.UuidRef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UuidReferencesArchive_UuidRef::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_uuid()) {
    if (!uuid_->IsInitialized()) return false;
  }
  if (_internal_has_coord_set()) {
    if (!coord_set_->IsInitialized()) return false;
  }
  return true;
}

void UuidReferencesArchive_UuidRef::InternalSwap(UuidReferencesArchive_UuidRef* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UuidReferencesArchive_UuidRef, coord_set_)
      + sizeof(UuidReferencesArchive_UuidRef::coord_set_)
      - PROTOBUF_FIELD_OFFSET(UuidReferencesArchive_UuidRef, uuid_)>(
          reinterpret_cast<char*>(&uuid_),
          reinterpret_cast<char*>(&other->uuid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UuidReferencesArchive_UuidRef::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[54]);
}

// ===================================================================

class UuidReferencesArchive_TableWithUuidRef::_Internal {
 public:
  using HasBits = decltype(std::declval<UuidReferencesArchive_TableWithUuidRef>()._has_bits_);
  static const ::TSP::UUID& owner_uuid(const UuidReferencesArchive_TableWithUuidRef* msg);
  static void set_has_owner_uuid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSP::UUID&
UuidReferencesArchive_TableWithUuidRef::_Internal::owner_uuid(const UuidReferencesArchive_TableWithUuidRef* msg) {
  return *msg->owner_uuid_;
}
void UuidReferencesArchive_TableWithUuidRef::clear_owner_uuid() {
  if (owner_uuid_ != nullptr) owner_uuid_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
UuidReferencesArchive_TableWithUuidRef::UuidReferencesArchive_TableWithUuidRef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  uuid_refs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.UuidReferencesArchive.TableWithUuidRef)
}
UuidReferencesArchive_TableWithUuidRef::UuidReferencesArchive_TableWithUuidRef(const UuidReferencesArchive_TableWithUuidRef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      uuid_refs_(from.uuid_refs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_owner_uuid()) {
    owner_uuid_ = new ::TSP::UUID(*from.owner_uuid_);
  } else {
    owner_uuid_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSCE.UuidReferencesArchive.TableWithUuidRef)
}

void UuidReferencesArchive_TableWithUuidRef::SharedCtor() {
owner_uuid_ = nullptr;
}

UuidReferencesArchive_TableWithUuidRef::~UuidReferencesArchive_TableWithUuidRef() {
  // @@protoc_insertion_point(destructor:TSCE.UuidReferencesArchive.TableWithUuidRef)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UuidReferencesArchive_TableWithUuidRef::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete owner_uuid_;
}

void UuidReferencesArchive_TableWithUuidRef::ArenaDtor(void* object) {
  UuidReferencesArchive_TableWithUuidRef* _this = reinterpret_cast< UuidReferencesArchive_TableWithUuidRef* >(object);
  (void)_this;
}
void UuidReferencesArchive_TableWithUuidRef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UuidReferencesArchive_TableWithUuidRef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UuidReferencesArchive_TableWithUuidRef::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.UuidReferencesArchive.TableWithUuidRef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uuid_refs_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(owner_uuid_ != nullptr);
    owner_uuid_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UuidReferencesArchive_TableWithUuidRef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.UUID owner_uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_owner_uuid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSCE.UuidReferencesArchive.UuidRef uuid_refs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_uuid_refs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UuidReferencesArchive_TableWithUuidRef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.UuidReferencesArchive.TableWithUuidRef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSP.UUID owner_uuid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::owner_uuid(this), target, stream);
  }

  // repeated .TSCE.UuidReferencesArchive.UuidRef uuid_refs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_uuid_refs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_uuid_refs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.UuidReferencesArchive.TableWithUuidRef)
  return target;
}

size_t UuidReferencesArchive_TableWithUuidRef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.UuidReferencesArchive.TableWithUuidRef)
  size_t total_size = 0;

  // required .TSP.UUID owner_uuid = 1;
  if (_internal_has_owner_uuid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *owner_uuid_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.UuidReferencesArchive.UuidRef uuid_refs = 2;
  total_size += 1UL * this->_internal_uuid_refs_size();
  for (const auto& msg : this->uuid_refs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UuidReferencesArchive_TableWithUuidRef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.UuidReferencesArchive.TableWithUuidRef)
  GOOGLE_DCHECK_NE(&from, this);
  const UuidReferencesArchive_TableWithUuidRef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UuidReferencesArchive_TableWithUuidRef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.UuidReferencesArchive.TableWithUuidRef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.UuidReferencesArchive.TableWithUuidRef)
    MergeFrom(*source);
  }
}

void UuidReferencesArchive_TableWithUuidRef::MergeFrom(const UuidReferencesArchive_TableWithUuidRef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.UuidReferencesArchive.TableWithUuidRef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  uuid_refs_.MergeFrom(from.uuid_refs_);
  if (from._internal_has_owner_uuid()) {
    _internal_mutable_owner_uuid()->::TSP::UUID::MergeFrom(from._internal_owner_uuid());
  }
}

void UuidReferencesArchive_TableWithUuidRef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.UuidReferencesArchive.TableWithUuidRef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UuidReferencesArchive_TableWithUuidRef::CopyFrom(const UuidReferencesArchive_TableWithUuidRef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.UuidReferencesArchive.TableWithUuidRef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UuidReferencesArchive_TableWithUuidRef::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(uuid_refs_)) return false;
  if (_internal_has_owner_uuid()) {
    if (!owner_uuid_->IsInitialized()) return false;
  }
  return true;
}

void UuidReferencesArchive_TableWithUuidRef::InternalSwap(UuidReferencesArchive_TableWithUuidRef* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  uuid_refs_.InternalSwap(&other->uuid_refs_);
  swap(owner_uuid_, other->owner_uuid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UuidReferencesArchive_TableWithUuidRef::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[55]);
}

// ===================================================================

class UuidReferencesArchive::_Internal {
 public:
};

UuidReferencesArchive::UuidReferencesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  table_refs_(arena),
  table_uuid_refs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.UuidReferencesArchive)
}
UuidReferencesArchive::UuidReferencesArchive(const UuidReferencesArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      table_refs_(from.table_refs_),
      table_uuid_refs_(from.table_uuid_refs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSCE.UuidReferencesArchive)
}

void UuidReferencesArchive::SharedCtor() {
}

UuidReferencesArchive::~UuidReferencesArchive() {
  // @@protoc_insertion_point(destructor:TSCE.UuidReferencesArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UuidReferencesArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UuidReferencesArchive::ArenaDtor(void* object) {
  UuidReferencesArchive* _this = reinterpret_cast< UuidReferencesArchive* >(object);
  (void)_this;
}
void UuidReferencesArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UuidReferencesArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UuidReferencesArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.UuidReferencesArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  table_refs_.Clear();
  table_uuid_refs_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UuidReferencesArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSCE.UuidReferencesArchive.TableRef table_refs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_table_refs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSCE.UuidReferencesArchive.TableWithUuidRef table_uuid_refs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_table_uuid_refs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UuidReferencesArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.UuidReferencesArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSCE.UuidReferencesArchive.TableRef table_refs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_table_refs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_table_refs(i), target, stream);
  }

  // repeated .TSCE.UuidReferencesArchive.TableWithUuidRef table_uuid_refs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_table_uuid_refs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_table_uuid_refs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.UuidReferencesArchive)
  return target;
}

size_t UuidReferencesArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.UuidReferencesArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.UuidReferencesArchive.TableRef table_refs = 1;
  total_size += 1UL * this->_internal_table_refs_size();
  for (const auto& msg : this->table_refs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSCE.UuidReferencesArchive.TableWithUuidRef table_uuid_refs = 2;
  total_size += 1UL * this->_internal_table_uuid_refs_size();
  for (const auto& msg : this->table_uuid_refs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UuidReferencesArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.UuidReferencesArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const UuidReferencesArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UuidReferencesArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.UuidReferencesArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.UuidReferencesArchive)
    MergeFrom(*source);
  }
}

void UuidReferencesArchive::MergeFrom(const UuidReferencesArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.UuidReferencesArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  table_refs_.MergeFrom(from.table_refs_);
  table_uuid_refs_.MergeFrom(from.table_uuid_refs_);
}

void UuidReferencesArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.UuidReferencesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UuidReferencesArchive::CopyFrom(const UuidReferencesArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.UuidReferencesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UuidReferencesArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(table_refs_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(table_uuid_refs_)) return false;
  return true;
}

void UuidReferencesArchive::InternalSwap(UuidReferencesArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  table_refs_.InternalSwap(&other->table_refs_);
  table_uuid_refs_.InternalSwap(&other->table_uuid_refs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UuidReferencesArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[56]);
}

// ===================================================================

class FormulaOwnerDependenciesArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<FormulaOwnerDependenciesArchive>()._has_bits_);
  static const ::TSP::UUID& formula_owner_uid(const FormulaOwnerDependenciesArchive* msg);
  static void set_has_formula_owner_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_internal_formula_owner_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_owner_kind(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::TSCE::CellDependenciesExpandedArchive& cell_dependencies(const FormulaOwnerDependenciesArchive* msg);
  static void set_has_cell_dependencies(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSCE::RangeDependenciesArchive& range_dependencies(const FormulaOwnerDependenciesArchive* msg);
  static void set_has_range_dependencies(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSCE::VolatileDependenciesExpandedArchive& volatile_dependencies(const FormulaOwnerDependenciesArchive* msg);
  static void set_has_volatile_dependencies(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSCE::SpanningDependenciesExpandedArchive& spanning_column_dependencies(const FormulaOwnerDependenciesArchive* msg);
  static void set_has_spanning_column_dependencies(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSCE::SpanningDependenciesExpandedArchive& spanning_row_dependencies(const FormulaOwnerDependenciesArchive* msg);
  static void set_has_spanning_row_dependencies(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSCE::WholeOwnerDependenciesExpandedArchive& whole_owner_dependencies(const FormulaOwnerDependenciesArchive* msg);
  static void set_has_whole_owner_dependencies(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSCE::CellErrorsArchive& cell_errors(const FormulaOwnerDependenciesArchive* msg);
  static void set_has_cell_errors(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::TSP::Reference& formula_owner(const FormulaOwnerDependenciesArchive* msg);
  static void set_has_formula_owner(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::TSP::UUID& base_owner_uid(const FormulaOwnerDependenciesArchive* msg);
  static void set_has_base_owner_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::TSCE::CellDependenciesTiledArchive& tiled_cell_dependencies(const FormulaOwnerDependenciesArchive* msg);
  static void set_has_tiled_cell_dependencies(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::TSCE::UuidReferencesArchive& uuid_references(const FormulaOwnerDependenciesArchive* msg);
  static void set_has_uuid_references(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::TSCE::RangeDependenciesTiledArchive& tiled_range_dependencies(const FormulaOwnerDependenciesArchive* msg);
  static void set_has_tiled_range_dependencies(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00002001) ^ 0x00002001) != 0;
  }
};

const ::TSP::UUID&
FormulaOwnerDependenciesArchive::_Internal::formula_owner_uid(const FormulaOwnerDependenciesArchive* msg) {
  return *msg->formula_owner_uid_;
}
const ::TSCE::CellDependenciesExpandedArchive&
FormulaOwnerDependenciesArchive::_Internal::cell_dependencies(const FormulaOwnerDependenciesArchive* msg) {
  return *msg->cell_dependencies_;
}
const ::TSCE::RangeDependenciesArchive&
FormulaOwnerDependenciesArchive::_Internal::range_dependencies(const FormulaOwnerDependenciesArchive* msg) {
  return *msg->range_dependencies_;
}
const ::TSCE::VolatileDependenciesExpandedArchive&
FormulaOwnerDependenciesArchive::_Internal::volatile_dependencies(const FormulaOwnerDependenciesArchive* msg) {
  return *msg->volatile_dependencies_;
}
const ::TSCE::SpanningDependenciesExpandedArchive&
FormulaOwnerDependenciesArchive::_Internal::spanning_column_dependencies(const FormulaOwnerDependenciesArchive* msg) {
  return *msg->spanning_column_dependencies_;
}
const ::TSCE::SpanningDependenciesExpandedArchive&
FormulaOwnerDependenciesArchive::_Internal::spanning_row_dependencies(const FormulaOwnerDependenciesArchive* msg) {
  return *msg->spanning_row_dependencies_;
}
const ::TSCE::WholeOwnerDependenciesExpandedArchive&
FormulaOwnerDependenciesArchive::_Internal::whole_owner_dependencies(const FormulaOwnerDependenciesArchive* msg) {
  return *msg->whole_owner_dependencies_;
}
const ::TSCE::CellErrorsArchive&
FormulaOwnerDependenciesArchive::_Internal::cell_errors(const FormulaOwnerDependenciesArchive* msg) {
  return *msg->cell_errors_;
}
const ::TSP::Reference&
FormulaOwnerDependenciesArchive::_Internal::formula_owner(const FormulaOwnerDependenciesArchive* msg) {
  return *msg->formula_owner_;
}
const ::TSP::UUID&
FormulaOwnerDependenciesArchive::_Internal::base_owner_uid(const FormulaOwnerDependenciesArchive* msg) {
  return *msg->base_owner_uid_;
}
const ::TSCE::CellDependenciesTiledArchive&
FormulaOwnerDependenciesArchive::_Internal::tiled_cell_dependencies(const FormulaOwnerDependenciesArchive* msg) {
  return *msg->tiled_cell_dependencies_;
}
const ::TSCE::UuidReferencesArchive&
FormulaOwnerDependenciesArchive::_Internal::uuid_references(const FormulaOwnerDependenciesArchive* msg) {
  return *msg->uuid_references_;
}
const ::TSCE::RangeDependenciesTiledArchive&
FormulaOwnerDependenciesArchive::_Internal::tiled_range_dependencies(const FormulaOwnerDependenciesArchive* msg) {
  return *msg->tiled_range_dependencies_;
}
void FormulaOwnerDependenciesArchive::clear_formula_owner_uid() {
  if (formula_owner_uid_ != nullptr) formula_owner_uid_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void FormulaOwnerDependenciesArchive::clear_formula_owner() {
  if (formula_owner_ != nullptr) formula_owner_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
void FormulaOwnerDependenciesArchive::clear_base_owner_uid() {
  if (base_owner_uid_ != nullptr) base_owner_uid_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
FormulaOwnerDependenciesArchive::FormulaOwnerDependenciesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.FormulaOwnerDependenciesArchive)
}
FormulaOwnerDependenciesArchive::FormulaOwnerDependenciesArchive(const FormulaOwnerDependenciesArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_formula_owner_uid()) {
    formula_owner_uid_ = new ::TSP::UUID(*from.formula_owner_uid_);
  } else {
    formula_owner_uid_ = nullptr;
  }
  if (from._internal_has_cell_dependencies()) {
    cell_dependencies_ = new ::TSCE::CellDependenciesExpandedArchive(*from.cell_dependencies_);
  } else {
    cell_dependencies_ = nullptr;
  }
  if (from._internal_has_range_dependencies()) {
    range_dependencies_ = new ::TSCE::RangeDependenciesArchive(*from.range_dependencies_);
  } else {
    range_dependencies_ = nullptr;
  }
  if (from._internal_has_volatile_dependencies()) {
    volatile_dependencies_ = new ::TSCE::VolatileDependenciesExpandedArchive(*from.volatile_dependencies_);
  } else {
    volatile_dependencies_ = nullptr;
  }
  if (from._internal_has_spanning_column_dependencies()) {
    spanning_column_dependencies_ = new ::TSCE::SpanningDependenciesExpandedArchive(*from.spanning_column_dependencies_);
  } else {
    spanning_column_dependencies_ = nullptr;
  }
  if (from._internal_has_spanning_row_dependencies()) {
    spanning_row_dependencies_ = new ::TSCE::SpanningDependenciesExpandedArchive(*from.spanning_row_dependencies_);
  } else {
    spanning_row_dependencies_ = nullptr;
  }
  if (from._internal_has_whole_owner_dependencies()) {
    whole_owner_dependencies_ = new ::TSCE::WholeOwnerDependenciesExpandedArchive(*from.whole_owner_dependencies_);
  } else {
    whole_owner_dependencies_ = nullptr;
  }
  if (from._internal_has_cell_errors()) {
    cell_errors_ = new ::TSCE::CellErrorsArchive(*from.cell_errors_);
  } else {
    cell_errors_ = nullptr;
  }
  if (from._internal_has_formula_owner()) {
    formula_owner_ = new ::TSP::Reference(*from.formula_owner_);
  } else {
    formula_owner_ = nullptr;
  }
  if (from._internal_has_base_owner_uid()) {
    base_owner_uid_ = new ::TSP::UUID(*from.base_owner_uid_);
  } else {
    base_owner_uid_ = nullptr;
  }
  if (from._internal_has_tiled_cell_dependencies()) {
    tiled_cell_dependencies_ = new ::TSCE::CellDependenciesTiledArchive(*from.tiled_cell_dependencies_);
  } else {
    tiled_cell_dependencies_ = nullptr;
  }
  if (from._internal_has_uuid_references()) {
    uuid_references_ = new ::TSCE::UuidReferencesArchive(*from.uuid_references_);
  } else {
    uuid_references_ = nullptr;
  }
  if (from._internal_has_tiled_range_dependencies()) {
    tiled_range_dependencies_ = new ::TSCE::RangeDependenciesTiledArchive(*from.tiled_range_dependencies_);
  } else {
    tiled_range_dependencies_ = nullptr;
  }
  ::memcpy(&internal_formula_owner_id_, &from.internal_formula_owner_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&owner_kind_) -
    reinterpret_cast<char*>(&internal_formula_owner_id_)) + sizeof(owner_kind_));
  // @@protoc_insertion_point(copy_constructor:TSCE.FormulaOwnerDependenciesArchive)
}

void FormulaOwnerDependenciesArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&formula_owner_uid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&owner_kind_) -
    reinterpret_cast<char*>(&formula_owner_uid_)) + sizeof(owner_kind_));
}

FormulaOwnerDependenciesArchive::~FormulaOwnerDependenciesArchive() {
  // @@protoc_insertion_point(destructor:TSCE.FormulaOwnerDependenciesArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FormulaOwnerDependenciesArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete formula_owner_uid_;
  if (this != internal_default_instance()) delete cell_dependencies_;
  if (this != internal_default_instance()) delete range_dependencies_;
  if (this != internal_default_instance()) delete volatile_dependencies_;
  if (this != internal_default_instance()) delete spanning_column_dependencies_;
  if (this != internal_default_instance()) delete spanning_row_dependencies_;
  if (this != internal_default_instance()) delete whole_owner_dependencies_;
  if (this != internal_default_instance()) delete cell_errors_;
  if (this != internal_default_instance()) delete formula_owner_;
  if (this != internal_default_instance()) delete base_owner_uid_;
  if (this != internal_default_instance()) delete tiled_cell_dependencies_;
  if (this != internal_default_instance()) delete uuid_references_;
  if (this != internal_default_instance()) delete tiled_range_dependencies_;
}

void FormulaOwnerDependenciesArchive::ArenaDtor(void* object) {
  FormulaOwnerDependenciesArchive* _this = reinterpret_cast< FormulaOwnerDependenciesArchive* >(object);
  (void)_this;
}
void FormulaOwnerDependenciesArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FormulaOwnerDependenciesArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FormulaOwnerDependenciesArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.FormulaOwnerDependenciesArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(formula_owner_uid_ != nullptr);
      formula_owner_uid_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(cell_dependencies_ != nullptr);
      cell_dependencies_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(range_dependencies_ != nullptr);
      range_dependencies_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(volatile_dependencies_ != nullptr);
      volatile_dependencies_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(spanning_column_dependencies_ != nullptr);
      spanning_column_dependencies_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(spanning_row_dependencies_ != nullptr);
      spanning_row_dependencies_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(whole_owner_dependencies_ != nullptr);
      whole_owner_dependencies_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(cell_errors_ != nullptr);
      cell_errors_->Clear();
    }
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(formula_owner_ != nullptr);
      formula_owner_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(base_owner_uid_ != nullptr);
      base_owner_uid_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(tiled_cell_dependencies_ != nullptr);
      tiled_cell_dependencies_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(uuid_references_ != nullptr);
      uuid_references_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(tiled_range_dependencies_ != nullptr);
      tiled_range_dependencies_->Clear();
    }
  }
  if (cached_has_bits & 0x00006000u) {
    ::memset(&internal_formula_owner_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&owner_kind_) -
        reinterpret_cast<char*>(&internal_formula_owner_id_)) + sizeof(owner_kind_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FormulaOwnerDependenciesArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.UUID formula_owner_uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_formula_owner_uid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 internal_formula_owner_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_internal_formula_owner_id(&has_bits);
          internal_formula_owner_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 owner_kind = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_owner_kind(&has_bits);
          owner_kind_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCE.CellDependenciesExpandedArchive cell_dependencies = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell_dependencies(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCE.RangeDependenciesArchive range_dependencies = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_range_dependencies(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCE.VolatileDependenciesExpandedArchive volatile_dependencies = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_volatile_dependencies(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCE.SpanningDependenciesExpandedArchive spanning_column_dependencies = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_spanning_column_dependencies(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCE.SpanningDependenciesExpandedArchive spanning_row_dependencies = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_spanning_row_dependencies(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCE.WholeOwnerDependenciesExpandedArchive whole_owner_dependencies = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_whole_owner_dependencies(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCE.CellErrorsArchive cell_errors = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell_errors(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference formula_owner = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_formula_owner(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.UUID base_owner_uid = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_base_owner_uid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCE.CellDependenciesTiledArchive tiled_cell_dependencies = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_tiled_cell_dependencies(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCE.UuidReferencesArchive uuid_references = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_uuid_references(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCE.RangeDependenciesTiledArchive tiled_range_dependencies = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_tiled_range_dependencies(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FormulaOwnerDependenciesArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.FormulaOwnerDependenciesArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSP.UUID formula_owner_uid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::formula_owner_uid(this), target, stream);
  }

  // required uint32 internal_formula_owner_id = 2;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_internal_formula_owner_id(), target);
  }

  // optional uint32 owner_kind = 3;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_owner_kind(), target);
  }

  // optional .TSCE.CellDependenciesExpandedArchive cell_dependencies = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::cell_dependencies(this), target, stream);
  }

  // optional .TSCE.RangeDependenciesArchive range_dependencies = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::range_dependencies(this), target, stream);
  }

  // optional .TSCE.VolatileDependenciesExpandedArchive volatile_dependencies = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::volatile_dependencies(this), target, stream);
  }

  // optional .TSCE.SpanningDependenciesExpandedArchive spanning_column_dependencies = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::spanning_column_dependencies(this), target, stream);
  }

  // optional .TSCE.SpanningDependenciesExpandedArchive spanning_row_dependencies = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::spanning_row_dependencies(this), target, stream);
  }

  // optional .TSCE.WholeOwnerDependenciesExpandedArchive whole_owner_dependencies = 9;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::whole_owner_dependencies(this), target, stream);
  }

  // optional .TSCE.CellErrorsArchive cell_errors = 10;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::cell_errors(this), target, stream);
  }

  // optional .TSP.Reference formula_owner = 11;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::formula_owner(this), target, stream);
  }

  // optional .TSP.UUID base_owner_uid = 12;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::base_owner_uid(this), target, stream);
  }

  // optional .TSCE.CellDependenciesTiledArchive tiled_cell_dependencies = 13;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::tiled_cell_dependencies(this), target, stream);
  }

  // optional .TSCE.UuidReferencesArchive uuid_references = 14;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::uuid_references(this), target, stream);
  }

  // optional .TSCE.RangeDependenciesTiledArchive tiled_range_dependencies = 15;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::tiled_range_dependencies(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.FormulaOwnerDependenciesArchive)
  return target;
}

size_t FormulaOwnerDependenciesArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.FormulaOwnerDependenciesArchive)
  size_t total_size = 0;

  if (_internal_has_formula_owner_uid()) {
    // required .TSP.UUID formula_owner_uid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *formula_owner_uid_);
  }

  if (_internal_has_internal_formula_owner_id()) {
    // required uint32 internal_formula_owner_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_internal_formula_owner_id());
  }

  return total_size;
}
size_t FormulaOwnerDependenciesArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.FormulaOwnerDependenciesArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00002001) ^ 0x00002001) == 0) {  // All required fields are present.
    // required .TSP.UUID formula_owner_uid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *formula_owner_uid_);

    // required uint32 internal_formula_owner_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_internal_formula_owner_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000feu) {
    // optional .TSCE.CellDependenciesExpandedArchive cell_dependencies = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cell_dependencies_);
    }

    // optional .TSCE.RangeDependenciesArchive range_dependencies = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *range_dependencies_);
    }

    // optional .TSCE.VolatileDependenciesExpandedArchive volatile_dependencies = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *volatile_dependencies_);
    }

    // optional .TSCE.SpanningDependenciesExpandedArchive spanning_column_dependencies = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *spanning_column_dependencies_);
    }

    // optional .TSCE.SpanningDependenciesExpandedArchive spanning_row_dependencies = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *spanning_row_dependencies_);
    }

    // optional .TSCE.WholeOwnerDependenciesExpandedArchive whole_owner_dependencies = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *whole_owner_dependencies_);
    }

    // optional .TSCE.CellErrorsArchive cell_errors = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cell_errors_);
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional .TSP.Reference formula_owner = 11;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *formula_owner_);
    }

    // optional .TSP.UUID base_owner_uid = 12;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *base_owner_uid_);
    }

    // optional .TSCE.CellDependenciesTiledArchive tiled_cell_dependencies = 13;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tiled_cell_dependencies_);
    }

    // optional .TSCE.UuidReferencesArchive uuid_references = 14;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *uuid_references_);
    }

    // optional .TSCE.RangeDependenciesTiledArchive tiled_range_dependencies = 15;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tiled_range_dependencies_);
    }

  }
  // optional uint32 owner_kind = 3;
  if (cached_has_bits & 0x00004000u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_owner_kind());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FormulaOwnerDependenciesArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.FormulaOwnerDependenciesArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const FormulaOwnerDependenciesArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FormulaOwnerDependenciesArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.FormulaOwnerDependenciesArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.FormulaOwnerDependenciesArchive)
    MergeFrom(*source);
  }
}

void FormulaOwnerDependenciesArchive::MergeFrom(const FormulaOwnerDependenciesArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.FormulaOwnerDependenciesArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_formula_owner_uid()->::TSP::UUID::MergeFrom(from._internal_formula_owner_uid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_cell_dependencies()->::TSCE::CellDependenciesExpandedArchive::MergeFrom(from._internal_cell_dependencies());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_range_dependencies()->::TSCE::RangeDependenciesArchive::MergeFrom(from._internal_range_dependencies());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_volatile_dependencies()->::TSCE::VolatileDependenciesExpandedArchive::MergeFrom(from._internal_volatile_dependencies());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_spanning_column_dependencies()->::TSCE::SpanningDependenciesExpandedArchive::MergeFrom(from._internal_spanning_column_dependencies());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_spanning_row_dependencies()->::TSCE::SpanningDependenciesExpandedArchive::MergeFrom(from._internal_spanning_row_dependencies());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_whole_owner_dependencies()->::TSCE::WholeOwnerDependenciesExpandedArchive::MergeFrom(from._internal_whole_owner_dependencies());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_cell_errors()->::TSCE::CellErrorsArchive::MergeFrom(from._internal_cell_errors());
    }
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_formula_owner()->::TSP::Reference::MergeFrom(from._internal_formula_owner());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_base_owner_uid()->::TSP::UUID::MergeFrom(from._internal_base_owner_uid());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_tiled_cell_dependencies()->::TSCE::CellDependenciesTiledArchive::MergeFrom(from._internal_tiled_cell_dependencies());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_uuid_references()->::TSCE::UuidReferencesArchive::MergeFrom(from._internal_uuid_references());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_mutable_tiled_range_dependencies()->::TSCE::RangeDependenciesTiledArchive::MergeFrom(from._internal_tiled_range_dependencies());
    }
    if (cached_has_bits & 0x00002000u) {
      internal_formula_owner_id_ = from.internal_formula_owner_id_;
    }
    if (cached_has_bits & 0x00004000u) {
      owner_kind_ = from.owner_kind_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FormulaOwnerDependenciesArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.FormulaOwnerDependenciesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FormulaOwnerDependenciesArchive::CopyFrom(const FormulaOwnerDependenciesArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.FormulaOwnerDependenciesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FormulaOwnerDependenciesArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_formula_owner_uid()) {
    if (!formula_owner_uid_->IsInitialized()) return false;
  }
  if (_internal_has_cell_dependencies()) {
    if (!cell_dependencies_->IsInitialized()) return false;
  }
  if (_internal_has_range_dependencies()) {
    if (!range_dependencies_->IsInitialized()) return false;
  }
  if (_internal_has_volatile_dependencies()) {
    if (!volatile_dependencies_->IsInitialized()) return false;
  }
  if (_internal_has_spanning_column_dependencies()) {
    if (!spanning_column_dependencies_->IsInitialized()) return false;
  }
  if (_internal_has_spanning_row_dependencies()) {
    if (!spanning_row_dependencies_->IsInitialized()) return false;
  }
  if (_internal_has_whole_owner_dependencies()) {
    if (!whole_owner_dependencies_->IsInitialized()) return false;
  }
  if (_internal_has_cell_errors()) {
    if (!cell_errors_->IsInitialized()) return false;
  }
  if (_internal_has_formula_owner()) {
    if (!formula_owner_->IsInitialized()) return false;
  }
  if (_internal_has_base_owner_uid()) {
    if (!base_owner_uid_->IsInitialized()) return false;
  }
  if (_internal_has_tiled_cell_dependencies()) {
    if (!tiled_cell_dependencies_->IsInitialized()) return false;
  }
  if (_internal_has_uuid_references()) {
    if (!uuid_references_->IsInitialized()) return false;
  }
  if (_internal_has_tiled_range_dependencies()) {
    if (!tiled_range_dependencies_->IsInitialized()) return false;
  }
  return true;
}

void FormulaOwnerDependenciesArchive::InternalSwap(FormulaOwnerDependenciesArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FormulaOwnerDependenciesArchive, owner_kind_)
      + sizeof(FormulaOwnerDependenciesArchive::owner_kind_)
      - PROTOBUF_FIELD_OFFSET(FormulaOwnerDependenciesArchive, formula_owner_uid_)>(
          reinterpret_cast<char*>(&formula_owner_uid_),
          reinterpret_cast<char*>(&other->formula_owner_uid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FormulaOwnerDependenciesArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[57]);
}

// ===================================================================

class FormulaOwnerInfoArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<FormulaOwnerInfoArchive>()._has_bits_);
  static const ::TSP::CFUUIDArchive& formula_owner_id(const FormulaOwnerInfoArchive* msg);
  static void set_has_formula_owner_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSCE::CellDependenciesArchive& cell_dependencies(const FormulaOwnerInfoArchive* msg);
  static void set_has_cell_dependencies(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSCE::RangeDependenciesArchive& range_dependencies(const FormulaOwnerInfoArchive* msg);
  static void set_has_range_dependencies(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSCE::VolatileDependenciesArchive& volatile_dependencies(const FormulaOwnerInfoArchive* msg);
  static void set_has_volatile_dependencies(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSCE::SpanningDependenciesArchive& spanning_column_dependencies(const FormulaOwnerInfoArchive* msg);
  static void set_has_spanning_column_dependencies(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSCE::SpanningDependenciesArchive& spanning_row_dependencies(const FormulaOwnerInfoArchive* msg);
  static void set_has_spanning_row_dependencies(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSCE::WholeOwnerDependenciesArchive& whole_owner_dependencies(const FormulaOwnerInfoArchive* msg);
  static void set_has_whole_owner_dependencies(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::TSCE::CellErrorsArchive& cell_errors(const FormulaOwnerInfoArchive* msg);
  static void set_has_cell_errors(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::TSP::Reference& formula_owner(const FormulaOwnerInfoArchive* msg);
  static void set_has_formula_owner(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSP::CFUUIDArchive&
FormulaOwnerInfoArchive::_Internal::formula_owner_id(const FormulaOwnerInfoArchive* msg) {
  return *msg->formula_owner_id_;
}
const ::TSCE::CellDependenciesArchive&
FormulaOwnerInfoArchive::_Internal::cell_dependencies(const FormulaOwnerInfoArchive* msg) {
  return *msg->cell_dependencies_;
}
const ::TSCE::RangeDependenciesArchive&
FormulaOwnerInfoArchive::_Internal::range_dependencies(const FormulaOwnerInfoArchive* msg) {
  return *msg->range_dependencies_;
}
const ::TSCE::VolatileDependenciesArchive&
FormulaOwnerInfoArchive::_Internal::volatile_dependencies(const FormulaOwnerInfoArchive* msg) {
  return *msg->volatile_dependencies_;
}
const ::TSCE::SpanningDependenciesArchive&
FormulaOwnerInfoArchive::_Internal::spanning_column_dependencies(const FormulaOwnerInfoArchive* msg) {
  return *msg->spanning_column_dependencies_;
}
const ::TSCE::SpanningDependenciesArchive&
FormulaOwnerInfoArchive::_Internal::spanning_row_dependencies(const FormulaOwnerInfoArchive* msg) {
  return *msg->spanning_row_dependencies_;
}
const ::TSCE::WholeOwnerDependenciesArchive&
FormulaOwnerInfoArchive::_Internal::whole_owner_dependencies(const FormulaOwnerInfoArchive* msg) {
  return *msg->whole_owner_dependencies_;
}
const ::TSCE::CellErrorsArchive&
FormulaOwnerInfoArchive::_Internal::cell_errors(const FormulaOwnerInfoArchive* msg) {
  return *msg->cell_errors_;
}
const ::TSP::Reference&
FormulaOwnerInfoArchive::_Internal::formula_owner(const FormulaOwnerInfoArchive* msg) {
  return *msg->formula_owner_;
}
void FormulaOwnerInfoArchive::clear_formula_owner_id() {
  if (formula_owner_id_ != nullptr) formula_owner_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void FormulaOwnerInfoArchive::clear_formula_owner() {
  if (formula_owner_ != nullptr) formula_owner_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
FormulaOwnerInfoArchive::FormulaOwnerInfoArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.FormulaOwnerInfoArchive)
}
FormulaOwnerInfoArchive::FormulaOwnerInfoArchive(const FormulaOwnerInfoArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_formula_owner_id()) {
    formula_owner_id_ = new ::TSP::CFUUIDArchive(*from.formula_owner_id_);
  } else {
    formula_owner_id_ = nullptr;
  }
  if (from._internal_has_cell_dependencies()) {
    cell_dependencies_ = new ::TSCE::CellDependenciesArchive(*from.cell_dependencies_);
  } else {
    cell_dependencies_ = nullptr;
  }
  if (from._internal_has_range_dependencies()) {
    range_dependencies_ = new ::TSCE::RangeDependenciesArchive(*from.range_dependencies_);
  } else {
    range_dependencies_ = nullptr;
  }
  if (from._internal_has_volatile_dependencies()) {
    volatile_dependencies_ = new ::TSCE::VolatileDependenciesArchive(*from.volatile_dependencies_);
  } else {
    volatile_dependencies_ = nullptr;
  }
  if (from._internal_has_spanning_column_dependencies()) {
    spanning_column_dependencies_ = new ::TSCE::SpanningDependenciesArchive(*from.spanning_column_dependencies_);
  } else {
    spanning_column_dependencies_ = nullptr;
  }
  if (from._internal_has_spanning_row_dependencies()) {
    spanning_row_dependencies_ = new ::TSCE::SpanningDependenciesArchive(*from.spanning_row_dependencies_);
  } else {
    spanning_row_dependencies_ = nullptr;
  }
  if (from._internal_has_formula_owner()) {
    formula_owner_ = new ::TSP::Reference(*from.formula_owner_);
  } else {
    formula_owner_ = nullptr;
  }
  if (from._internal_has_whole_owner_dependencies()) {
    whole_owner_dependencies_ = new ::TSCE::WholeOwnerDependenciesArchive(*from.whole_owner_dependencies_);
  } else {
    whole_owner_dependencies_ = nullptr;
  }
  if (from._internal_has_cell_errors()) {
    cell_errors_ = new ::TSCE::CellErrorsArchive(*from.cell_errors_);
  } else {
    cell_errors_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSCE.FormulaOwnerInfoArchive)
}

void FormulaOwnerInfoArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&formula_owner_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cell_errors_) -
    reinterpret_cast<char*>(&formula_owner_id_)) + sizeof(cell_errors_));
}

FormulaOwnerInfoArchive::~FormulaOwnerInfoArchive() {
  // @@protoc_insertion_point(destructor:TSCE.FormulaOwnerInfoArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FormulaOwnerInfoArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete formula_owner_id_;
  if (this != internal_default_instance()) delete cell_dependencies_;
  if (this != internal_default_instance()) delete range_dependencies_;
  if (this != internal_default_instance()) delete volatile_dependencies_;
  if (this != internal_default_instance()) delete spanning_column_dependencies_;
  if (this != internal_default_instance()) delete spanning_row_dependencies_;
  if (this != internal_default_instance()) delete formula_owner_;
  if (this != internal_default_instance()) delete whole_owner_dependencies_;
  if (this != internal_default_instance()) delete cell_errors_;
}

void FormulaOwnerInfoArchive::ArenaDtor(void* object) {
  FormulaOwnerInfoArchive* _this = reinterpret_cast< FormulaOwnerInfoArchive* >(object);
  (void)_this;
}
void FormulaOwnerInfoArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FormulaOwnerInfoArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FormulaOwnerInfoArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.FormulaOwnerInfoArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(formula_owner_id_ != nullptr);
      formula_owner_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(cell_dependencies_ != nullptr);
      cell_dependencies_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(range_dependencies_ != nullptr);
      range_dependencies_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(volatile_dependencies_ != nullptr);
      volatile_dependencies_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(spanning_column_dependencies_ != nullptr);
      spanning_column_dependencies_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(spanning_row_dependencies_ != nullptr);
      spanning_row_dependencies_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(formula_owner_ != nullptr);
      formula_owner_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(whole_owner_dependencies_ != nullptr);
      whole_owner_dependencies_->Clear();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    GOOGLE_DCHECK(cell_errors_ != nullptr);
    cell_errors_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FormulaOwnerInfoArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.CFUUIDArchive formula_owner_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_formula_owner_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCE.CellDependenciesArchive cell_dependencies = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell_dependencies(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCE.RangeDependenciesArchive range_dependencies = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_range_dependencies(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCE.VolatileDependenciesArchive volatile_dependencies = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_volatile_dependencies(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCE.SpanningDependenciesArchive spanning_column_dependencies = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_spanning_column_dependencies(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCE.SpanningDependenciesArchive spanning_row_dependencies = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_spanning_row_dependencies(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference formula_owner = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_formula_owner(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCE.WholeOwnerDependenciesArchive whole_owner_dependencies = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_whole_owner_dependencies(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCE.CellErrorsArchive cell_errors = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell_errors(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FormulaOwnerInfoArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.FormulaOwnerInfoArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSP.CFUUIDArchive formula_owner_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::formula_owner_id(this), target, stream);
  }

  // optional .TSCE.CellDependenciesArchive cell_dependencies = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::cell_dependencies(this), target, stream);
  }

  // optional .TSCE.RangeDependenciesArchive range_dependencies = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::range_dependencies(this), target, stream);
  }

  // optional .TSCE.VolatileDependenciesArchive volatile_dependencies = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::volatile_dependencies(this), target, stream);
  }

  // optional .TSCE.SpanningDependenciesArchive spanning_column_dependencies = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::spanning_column_dependencies(this), target, stream);
  }

  // optional .TSCE.SpanningDependenciesArchive spanning_row_dependencies = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::spanning_row_dependencies(this), target, stream);
  }

  // optional .TSP.Reference formula_owner = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::formula_owner(this), target, stream);
  }

  // optional .TSCE.WholeOwnerDependenciesArchive whole_owner_dependencies = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::whole_owner_dependencies(this), target, stream);
  }

  // optional .TSCE.CellErrorsArchive cell_errors = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::cell_errors(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.FormulaOwnerInfoArchive)
  return target;
}

size_t FormulaOwnerInfoArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.FormulaOwnerInfoArchive)
  size_t total_size = 0;

  // required .TSP.CFUUIDArchive formula_owner_id = 1;
  if (_internal_has_formula_owner_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *formula_owner_id_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000feu) {
    // optional .TSCE.CellDependenciesArchive cell_dependencies = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cell_dependencies_);
    }

    // optional .TSCE.RangeDependenciesArchive range_dependencies = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *range_dependencies_);
    }

    // optional .TSCE.VolatileDependenciesArchive volatile_dependencies = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *volatile_dependencies_);
    }

    // optional .TSCE.SpanningDependenciesArchive spanning_column_dependencies = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *spanning_column_dependencies_);
    }

    // optional .TSCE.SpanningDependenciesArchive spanning_row_dependencies = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *spanning_row_dependencies_);
    }

    // optional .TSP.Reference formula_owner = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *formula_owner_);
    }

    // optional .TSCE.WholeOwnerDependenciesArchive whole_owner_dependencies = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *whole_owner_dependencies_);
    }

  }
  // optional .TSCE.CellErrorsArchive cell_errors = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cell_errors_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FormulaOwnerInfoArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.FormulaOwnerInfoArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const FormulaOwnerInfoArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FormulaOwnerInfoArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.FormulaOwnerInfoArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.FormulaOwnerInfoArchive)
    MergeFrom(*source);
  }
}

void FormulaOwnerInfoArchive::MergeFrom(const FormulaOwnerInfoArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.FormulaOwnerInfoArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_formula_owner_id()->::TSP::CFUUIDArchive::MergeFrom(from._internal_formula_owner_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_cell_dependencies()->::TSCE::CellDependenciesArchive::MergeFrom(from._internal_cell_dependencies());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_range_dependencies()->::TSCE::RangeDependenciesArchive::MergeFrom(from._internal_range_dependencies());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_volatile_dependencies()->::TSCE::VolatileDependenciesArchive::MergeFrom(from._internal_volatile_dependencies());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_spanning_column_dependencies()->::TSCE::SpanningDependenciesArchive::MergeFrom(from._internal_spanning_column_dependencies());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_spanning_row_dependencies()->::TSCE::SpanningDependenciesArchive::MergeFrom(from._internal_spanning_row_dependencies());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_formula_owner()->::TSP::Reference::MergeFrom(from._internal_formula_owner());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_whole_owner_dependencies()->::TSCE::WholeOwnerDependenciesArchive::MergeFrom(from._internal_whole_owner_dependencies());
    }
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_mutable_cell_errors()->::TSCE::CellErrorsArchive::MergeFrom(from._internal_cell_errors());
  }
}

void FormulaOwnerInfoArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.FormulaOwnerInfoArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FormulaOwnerInfoArchive::CopyFrom(const FormulaOwnerInfoArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.FormulaOwnerInfoArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FormulaOwnerInfoArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_cell_dependencies()) {
    if (!cell_dependencies_->IsInitialized()) return false;
  }
  if (_internal_has_range_dependencies()) {
    if (!range_dependencies_->IsInitialized()) return false;
  }
  if (_internal_has_volatile_dependencies()) {
    if (!volatile_dependencies_->IsInitialized()) return false;
  }
  if (_internal_has_spanning_column_dependencies()) {
    if (!spanning_column_dependencies_->IsInitialized()) return false;
  }
  if (_internal_has_spanning_row_dependencies()) {
    if (!spanning_row_dependencies_->IsInitialized()) return false;
  }
  if (_internal_has_formula_owner()) {
    if (!formula_owner_->IsInitialized()) return false;
  }
  if (_internal_has_whole_owner_dependencies()) {
    if (!whole_owner_dependencies_->IsInitialized()) return false;
  }
  if (_internal_has_cell_errors()) {
    if (!cell_errors_->IsInitialized()) return false;
  }
  return true;
}

void FormulaOwnerInfoArchive::InternalSwap(FormulaOwnerInfoArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FormulaOwnerInfoArchive, cell_errors_)
      + sizeof(FormulaOwnerInfoArchive::cell_errors_)
      - PROTOBUF_FIELD_OFFSET(FormulaOwnerInfoArchive, formula_owner_id_)>(
          reinterpret_cast<char*>(&formula_owner_id_),
          reinterpret_cast<char*>(&other->formula_owner_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FormulaOwnerInfoArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[58]);
}

// ===================================================================

class SubFormulaOwnerIDArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SubFormulaOwnerIDArchive>()._has_bits_);
  static const ::TSP::UUID& base_owner_uid(const SubFormulaOwnerIDArchive* msg);
  static void set_has_base_owner_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_owner_kind(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSP::UUID&
SubFormulaOwnerIDArchive::_Internal::base_owner_uid(const SubFormulaOwnerIDArchive* msg) {
  return *msg->base_owner_uid_;
}
void SubFormulaOwnerIDArchive::clear_base_owner_uid() {
  if (base_owner_uid_ != nullptr) base_owner_uid_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
SubFormulaOwnerIDArchive::SubFormulaOwnerIDArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.SubFormulaOwnerIDArchive)
}
SubFormulaOwnerIDArchive::SubFormulaOwnerIDArchive(const SubFormulaOwnerIDArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_base_owner_uid()) {
    base_owner_uid_ = new ::TSP::UUID(*from.base_owner_uid_);
  } else {
    base_owner_uid_ = nullptr;
  }
  owner_kind_ = from.owner_kind_;
  // @@protoc_insertion_point(copy_constructor:TSCE.SubFormulaOwnerIDArchive)
}

void SubFormulaOwnerIDArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&base_owner_uid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&owner_kind_) -
    reinterpret_cast<char*>(&base_owner_uid_)) + sizeof(owner_kind_));
}

SubFormulaOwnerIDArchive::~SubFormulaOwnerIDArchive() {
  // @@protoc_insertion_point(destructor:TSCE.SubFormulaOwnerIDArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubFormulaOwnerIDArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete base_owner_uid_;
}

void SubFormulaOwnerIDArchive::ArenaDtor(void* object) {
  SubFormulaOwnerIDArchive* _this = reinterpret_cast< SubFormulaOwnerIDArchive* >(object);
  (void)_this;
}
void SubFormulaOwnerIDArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubFormulaOwnerIDArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SubFormulaOwnerIDArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.SubFormulaOwnerIDArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(base_owner_uid_ != nullptr);
    base_owner_uid_->Clear();
  }
  owner_kind_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubFormulaOwnerIDArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.UUID base_owner_uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base_owner_uid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 owner_kind = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_owner_kind(&has_bits);
          owner_kind_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubFormulaOwnerIDArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.SubFormulaOwnerIDArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSP.UUID base_owner_uid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base_owner_uid(this), target, stream);
  }

  // optional uint32 owner_kind = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_owner_kind(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.SubFormulaOwnerIDArchive)
  return target;
}

size_t SubFormulaOwnerIDArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.SubFormulaOwnerIDArchive)
  size_t total_size = 0;

  // required .TSP.UUID base_owner_uid = 1;
  if (_internal_has_base_owner_uid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_owner_uid_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 owner_kind = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_owner_kind());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubFormulaOwnerIDArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.SubFormulaOwnerIDArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const SubFormulaOwnerIDArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubFormulaOwnerIDArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.SubFormulaOwnerIDArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.SubFormulaOwnerIDArchive)
    MergeFrom(*source);
  }
}

void SubFormulaOwnerIDArchive::MergeFrom(const SubFormulaOwnerIDArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.SubFormulaOwnerIDArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_base_owner_uid()->::TSP::UUID::MergeFrom(from._internal_base_owner_uid());
    }
    if (cached_has_bits & 0x00000002u) {
      owner_kind_ = from.owner_kind_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SubFormulaOwnerIDArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.SubFormulaOwnerIDArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubFormulaOwnerIDArchive::CopyFrom(const SubFormulaOwnerIDArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.SubFormulaOwnerIDArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubFormulaOwnerIDArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_base_owner_uid()) {
    if (!base_owner_uid_->IsInitialized()) return false;
  }
  return true;
}

void SubFormulaOwnerIDArchive::InternalSwap(SubFormulaOwnerIDArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SubFormulaOwnerIDArchive, owner_kind_)
      + sizeof(SubFormulaOwnerIDArchive::owner_kind_)
      - PROTOBUF_FIELD_OFFSET(SubFormulaOwnerIDArchive, base_owner_uid_)>(
          reinterpret_cast<char*>(&base_owner_uid_),
          reinterpret_cast<char*>(&other->base_owner_uid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SubFormulaOwnerIDArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[59]);
}

// ===================================================================

class OwnerIDMapArchive_OwnerIDMapArchiveEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<OwnerIDMapArchive_OwnerIDMapArchiveEntry>()._has_bits_);
  static void set_has_internal_owner_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::CFUUIDArchive& owner_id(const OwnerIDMapArchive_OwnerIDMapArchiveEntry* msg);
  static void set_has_owner_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSCE::SubFormulaOwnerIDArchive& sub_formula_owner_uid(const OwnerIDMapArchive_OwnerIDMapArchiveEntry* msg);
  static void set_has_sub_formula_owner_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000005) ^ 0x00000005) != 0;
  }
};

const ::TSP::CFUUIDArchive&
OwnerIDMapArchive_OwnerIDMapArchiveEntry::_Internal::owner_id(const OwnerIDMapArchive_OwnerIDMapArchiveEntry* msg) {
  return *msg->owner_id_;
}
const ::TSCE::SubFormulaOwnerIDArchive&
OwnerIDMapArchive_OwnerIDMapArchiveEntry::_Internal::sub_formula_owner_uid(const OwnerIDMapArchive_OwnerIDMapArchiveEntry* msg) {
  return *msg->sub_formula_owner_uid_;
}
void OwnerIDMapArchive_OwnerIDMapArchiveEntry::clear_owner_id() {
  if (owner_id_ != nullptr) owner_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
OwnerIDMapArchive_OwnerIDMapArchiveEntry::OwnerIDMapArchive_OwnerIDMapArchiveEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.OwnerIDMapArchive.OwnerIDMapArchiveEntry)
}
OwnerIDMapArchive_OwnerIDMapArchiveEntry::OwnerIDMapArchive_OwnerIDMapArchiveEntry(const OwnerIDMapArchive_OwnerIDMapArchiveEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_owner_id()) {
    owner_id_ = new ::TSP::CFUUIDArchive(*from.owner_id_);
  } else {
    owner_id_ = nullptr;
  }
  if (from._internal_has_sub_formula_owner_uid()) {
    sub_formula_owner_uid_ = new ::TSCE::SubFormulaOwnerIDArchive(*from.sub_formula_owner_uid_);
  } else {
    sub_formula_owner_uid_ = nullptr;
  }
  internal_owner_id_ = from.internal_owner_id_;
  // @@protoc_insertion_point(copy_constructor:TSCE.OwnerIDMapArchive.OwnerIDMapArchiveEntry)
}

void OwnerIDMapArchive_OwnerIDMapArchiveEntry::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&owner_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&internal_owner_id_) -
    reinterpret_cast<char*>(&owner_id_)) + sizeof(internal_owner_id_));
}

OwnerIDMapArchive_OwnerIDMapArchiveEntry::~OwnerIDMapArchive_OwnerIDMapArchiveEntry() {
  // @@protoc_insertion_point(destructor:TSCE.OwnerIDMapArchive.OwnerIDMapArchiveEntry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OwnerIDMapArchive_OwnerIDMapArchiveEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete owner_id_;
  if (this != internal_default_instance()) delete sub_formula_owner_uid_;
}

void OwnerIDMapArchive_OwnerIDMapArchiveEntry::ArenaDtor(void* object) {
  OwnerIDMapArchive_OwnerIDMapArchiveEntry* _this = reinterpret_cast< OwnerIDMapArchive_OwnerIDMapArchiveEntry* >(object);
  (void)_this;
}
void OwnerIDMapArchive_OwnerIDMapArchiveEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OwnerIDMapArchive_OwnerIDMapArchiveEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OwnerIDMapArchive_OwnerIDMapArchiveEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.OwnerIDMapArchive.OwnerIDMapArchiveEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(owner_id_ != nullptr);
      owner_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(sub_formula_owner_uid_ != nullptr);
      sub_formula_owner_uid_->Clear();
    }
  }
  internal_owner_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OwnerIDMapArchive_OwnerIDMapArchiveEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 internal_owner_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_internal_owner_id(&has_bits);
          internal_owner_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.CFUUIDArchive owner_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_owner_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCE.SubFormulaOwnerIDArchive sub_formula_owner_uid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_sub_formula_owner_uid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OwnerIDMapArchive_OwnerIDMapArchiveEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.OwnerIDMapArchive.OwnerIDMapArchiveEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 internal_owner_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_internal_owner_id(), target);
  }

  // required .TSP.CFUUIDArchive owner_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::owner_id(this), target, stream);
  }

  // optional .TSCE.SubFormulaOwnerIDArchive sub_formula_owner_uid = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::sub_formula_owner_uid(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.OwnerIDMapArchive.OwnerIDMapArchiveEntry)
  return target;
}

size_t OwnerIDMapArchive_OwnerIDMapArchiveEntry::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.OwnerIDMapArchive.OwnerIDMapArchiveEntry)
  size_t total_size = 0;

  if (_internal_has_owner_id()) {
    // required .TSP.CFUUIDArchive owner_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *owner_id_);
  }

  if (_internal_has_internal_owner_id()) {
    // required uint32 internal_owner_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_internal_owner_id());
  }

  return total_size;
}
size_t OwnerIDMapArchive_OwnerIDMapArchiveEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.OwnerIDMapArchive.OwnerIDMapArchiveEntry)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required .TSP.CFUUIDArchive owner_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *owner_id_);

    // required uint32 internal_owner_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_internal_owner_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSCE.SubFormulaOwnerIDArchive sub_formula_owner_uid = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sub_formula_owner_uid_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OwnerIDMapArchive_OwnerIDMapArchiveEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.OwnerIDMapArchive.OwnerIDMapArchiveEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const OwnerIDMapArchive_OwnerIDMapArchiveEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OwnerIDMapArchive_OwnerIDMapArchiveEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.OwnerIDMapArchive.OwnerIDMapArchiveEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.OwnerIDMapArchive.OwnerIDMapArchiveEntry)
    MergeFrom(*source);
  }
}

void OwnerIDMapArchive_OwnerIDMapArchiveEntry::MergeFrom(const OwnerIDMapArchive_OwnerIDMapArchiveEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.OwnerIDMapArchive.OwnerIDMapArchiveEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_owner_id()->::TSP::CFUUIDArchive::MergeFrom(from._internal_owner_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_sub_formula_owner_uid()->::TSCE::SubFormulaOwnerIDArchive::MergeFrom(from._internal_sub_formula_owner_uid());
    }
    if (cached_has_bits & 0x00000004u) {
      internal_owner_id_ = from.internal_owner_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OwnerIDMapArchive_OwnerIDMapArchiveEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.OwnerIDMapArchive.OwnerIDMapArchiveEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OwnerIDMapArchive_OwnerIDMapArchiveEntry::CopyFrom(const OwnerIDMapArchive_OwnerIDMapArchiveEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.OwnerIDMapArchive.OwnerIDMapArchiveEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OwnerIDMapArchive_OwnerIDMapArchiveEntry::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_sub_formula_owner_uid()) {
    if (!sub_formula_owner_uid_->IsInitialized()) return false;
  }
  return true;
}

void OwnerIDMapArchive_OwnerIDMapArchiveEntry::InternalSwap(OwnerIDMapArchive_OwnerIDMapArchiveEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OwnerIDMapArchive_OwnerIDMapArchiveEntry, internal_owner_id_)
      + sizeof(OwnerIDMapArchive_OwnerIDMapArchiveEntry::internal_owner_id_)
      - PROTOBUF_FIELD_OFFSET(OwnerIDMapArchive_OwnerIDMapArchiveEntry, owner_id_)>(
          reinterpret_cast<char*>(&owner_id_),
          reinterpret_cast<char*>(&other->owner_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OwnerIDMapArchive_OwnerIDMapArchiveEntry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[60]);
}

// ===================================================================

class OwnerIDMapArchive::_Internal {
 public:
};

OwnerIDMapArchive::OwnerIDMapArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  map_entry_(arena),
  unregistered_internal_owner_id_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.OwnerIDMapArchive)
}
OwnerIDMapArchive::OwnerIDMapArchive(const OwnerIDMapArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      map_entry_(from.map_entry_),
      unregistered_internal_owner_id_(from.unregistered_internal_owner_id_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSCE.OwnerIDMapArchive)
}

void OwnerIDMapArchive::SharedCtor() {
}

OwnerIDMapArchive::~OwnerIDMapArchive() {
  // @@protoc_insertion_point(destructor:TSCE.OwnerIDMapArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OwnerIDMapArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void OwnerIDMapArchive::ArenaDtor(void* object) {
  OwnerIDMapArchive* _this = reinterpret_cast< OwnerIDMapArchive* >(object);
  (void)_this;
}
void OwnerIDMapArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OwnerIDMapArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OwnerIDMapArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.OwnerIDMapArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  map_entry_.Clear();
  unregistered_internal_owner_id_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OwnerIDMapArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSCE.OwnerIDMapArchive.OwnerIDMapArchiveEntry map_entry = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_map_entry(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated uint32 unregistered_internal_owner_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_unregistered_internal_owner_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_unregistered_internal_owner_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OwnerIDMapArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.OwnerIDMapArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSCE.OwnerIDMapArchive.OwnerIDMapArchiveEntry map_entry = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_map_entry_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_map_entry(i), target, stream);
  }

  // repeated uint32 unregistered_internal_owner_id = 2;
  for (int i = 0, n = this->_internal_unregistered_internal_owner_id_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_unregistered_internal_owner_id(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.OwnerIDMapArchive)
  return target;
}

size_t OwnerIDMapArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.OwnerIDMapArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.OwnerIDMapArchive.OwnerIDMapArchiveEntry map_entry = 1;
  total_size += 1UL * this->_internal_map_entry_size();
  for (const auto& msg : this->map_entry_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 unregistered_internal_owner_id = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->unregistered_internal_owner_id_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_unregistered_internal_owner_id_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OwnerIDMapArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.OwnerIDMapArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const OwnerIDMapArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OwnerIDMapArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.OwnerIDMapArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.OwnerIDMapArchive)
    MergeFrom(*source);
  }
}

void OwnerIDMapArchive::MergeFrom(const OwnerIDMapArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.OwnerIDMapArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  map_entry_.MergeFrom(from.map_entry_);
  unregistered_internal_owner_id_.MergeFrom(from.unregistered_internal_owner_id_);
}

void OwnerIDMapArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.OwnerIDMapArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OwnerIDMapArchive::CopyFrom(const OwnerIDMapArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.OwnerIDMapArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OwnerIDMapArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(map_entry_)) return false;
  return true;
}

void OwnerIDMapArchive::InternalSwap(OwnerIDMapArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  map_entry_.InternalSwap(&other->map_entry_);
  unregistered_internal_owner_id_.InternalSwap(&other->unregistered_internal_owner_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OwnerIDMapArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[61]);
}

// ===================================================================

class UidLookupListArchive::_Internal {
 public:
};

void UidLookupListArchive::clear_uuids() {
  uuids_.Clear();
}
UidLookupListArchive::UidLookupListArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  uuids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.UidLookupListArchive)
}
UidLookupListArchive::UidLookupListArchive(const UidLookupListArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      uuids_(from.uuids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSCE.UidLookupListArchive)
}

void UidLookupListArchive::SharedCtor() {
}

UidLookupListArchive::~UidLookupListArchive() {
  // @@protoc_insertion_point(destructor:TSCE.UidLookupListArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UidLookupListArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UidLookupListArchive::ArenaDtor(void* object) {
  UidLookupListArchive* _this = reinterpret_cast< UidLookupListArchive* >(object);
  (void)_this;
}
void UidLookupListArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UidLookupListArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UidLookupListArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.UidLookupListArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uuids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UidLookupListArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSP.UUID uuids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_uuids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UidLookupListArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.UidLookupListArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSP.UUID uuids = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_uuids_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_uuids(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.UidLookupListArchive)
  return target;
}

size_t UidLookupListArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.UidLookupListArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.UUID uuids = 1;
  total_size += 1UL * this->_internal_uuids_size();
  for (const auto& msg : this->uuids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UidLookupListArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.UidLookupListArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const UidLookupListArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UidLookupListArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.UidLookupListArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.UidLookupListArchive)
    MergeFrom(*source);
  }
}

void UidLookupListArchive::MergeFrom(const UidLookupListArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.UidLookupListArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  uuids_.MergeFrom(from.uuids_);
}

void UidLookupListArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.UidLookupListArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UidLookupListArchive::CopyFrom(const UidLookupListArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.UidLookupListArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UidLookupListArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(uuids_)) return false;
  return true;
}

void UidLookupListArchive::InternalSwap(UidLookupListArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  uuids_.InternalSwap(&other->uuids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UidLookupListArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[62]);
}

// ===================================================================

class DependencyTrackerArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<DependencyTrackerArchive>()._has_bits_);
  static const ::TSCE::OwnerIDMapArchive& owner_id_map(const DependencyTrackerArchive* msg);
  static void set_has_owner_id_map(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_number_of_formulas(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::TSCE::OwnerIDMapArchive&
DependencyTrackerArchive::_Internal::owner_id_map(const DependencyTrackerArchive* msg) {
  return *msg->owner_id_map_;
}
void DependencyTrackerArchive::clear_formula_owner_dependencies() {
  formula_owner_dependencies_.Clear();
}
DependencyTrackerArchive::DependencyTrackerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  formula_owner_info_(arena),
  dirty_leaf_(arena),
  internal_dirty_leaf_(arena),
  formula_owner_dependencies_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.DependencyTrackerArchive)
}
DependencyTrackerArchive::DependencyTrackerArchive(const DependencyTrackerArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      formula_owner_info_(from.formula_owner_info_),
      dirty_leaf_(from.dirty_leaf_),
      internal_dirty_leaf_(from.internal_dirty_leaf_),
      formula_owner_dependencies_(from.formula_owner_dependencies_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_owner_id_map()) {
    owner_id_map_ = new ::TSCE::OwnerIDMapArchive(*from.owner_id_map_);
  } else {
    owner_id_map_ = nullptr;
  }
  number_of_formulas_ = from.number_of_formulas_;
  // @@protoc_insertion_point(copy_constructor:TSCE.DependencyTrackerArchive)
}

void DependencyTrackerArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&owner_id_map_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&number_of_formulas_) -
    reinterpret_cast<char*>(&owner_id_map_)) + sizeof(number_of_formulas_));
}

DependencyTrackerArchive::~DependencyTrackerArchive() {
  // @@protoc_insertion_point(destructor:TSCE.DependencyTrackerArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DependencyTrackerArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete owner_id_map_;
}

void DependencyTrackerArchive::ArenaDtor(void* object) {
  DependencyTrackerArchive* _this = reinterpret_cast< DependencyTrackerArchive* >(object);
  (void)_this;
}
void DependencyTrackerArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DependencyTrackerArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DependencyTrackerArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.DependencyTrackerArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  formula_owner_info_.Clear();
  dirty_leaf_.Clear();
  internal_dirty_leaf_.Clear();
  formula_owner_dependencies_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(owner_id_map_ != nullptr);
    owner_id_map_->Clear();
  }
  number_of_formulas_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DependencyTrackerArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSCE.FormulaOwnerInfoArchive formula_owner_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_formula_owner_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSCE.CellReferenceArchive dirty_leaf = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_dirty_leaf(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .TSCE.OwnerIDMapArchive owner_id_map = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_owner_id_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSCE.InternalCellReferenceArchive internal_dirty_leaf = 4 [deprecated = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_internal_dirty_leaf(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint64 number_of_formulas = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_number_of_formulas(&has_bits);
          number_of_formulas_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference formula_owner_dependencies = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_formula_owner_dependencies(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DependencyTrackerArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.DependencyTrackerArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSCE.FormulaOwnerInfoArchive formula_owner_info = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_formula_owner_info_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_formula_owner_info(i), target, stream);
  }

  // repeated .TSCE.CellReferenceArchive dirty_leaf = 2 [deprecated = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_dirty_leaf_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_dirty_leaf(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional .TSCE.OwnerIDMapArchive owner_id_map = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::owner_id_map(this), target, stream);
  }

  // repeated .TSCE.InternalCellReferenceArchive internal_dirty_leaf = 4 [deprecated = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_internal_dirty_leaf_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_internal_dirty_leaf(i), target, stream);
  }

  // optional uint64 number_of_formulas = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_number_of_formulas(), target);
  }

  // repeated .TSP.Reference formula_owner_dependencies = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_formula_owner_dependencies_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_formula_owner_dependencies(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.DependencyTrackerArchive)
  return target;
}

size_t DependencyTrackerArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.DependencyTrackerArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.FormulaOwnerInfoArchive formula_owner_info = 1;
  total_size += 1UL * this->_internal_formula_owner_info_size();
  for (const auto& msg : this->formula_owner_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSCE.CellReferenceArchive dirty_leaf = 2 [deprecated = true];
  total_size += 1UL * this->_internal_dirty_leaf_size();
  for (const auto& msg : this->dirty_leaf_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSCE.InternalCellReferenceArchive internal_dirty_leaf = 4 [deprecated = true];
  total_size += 1UL * this->_internal_internal_dirty_leaf_size();
  for (const auto& msg : this->internal_dirty_leaf_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference formula_owner_dependencies = 6;
  total_size += 1UL * this->_internal_formula_owner_dependencies_size();
  for (const auto& msg : this->formula_owner_dependencies_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .TSCE.OwnerIDMapArchive owner_id_map = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *owner_id_map_);
    }

    // optional uint64 number_of_formulas = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_number_of_formulas());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DependencyTrackerArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.DependencyTrackerArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const DependencyTrackerArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DependencyTrackerArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.DependencyTrackerArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.DependencyTrackerArchive)
    MergeFrom(*source);
  }
}

void DependencyTrackerArchive::MergeFrom(const DependencyTrackerArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.DependencyTrackerArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  formula_owner_info_.MergeFrom(from.formula_owner_info_);
  dirty_leaf_.MergeFrom(from.dirty_leaf_);
  internal_dirty_leaf_.MergeFrom(from.internal_dirty_leaf_);
  formula_owner_dependencies_.MergeFrom(from.formula_owner_dependencies_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_owner_id_map()->::TSCE::OwnerIDMapArchive::MergeFrom(from._internal_owner_id_map());
    }
    if (cached_has_bits & 0x00000002u) {
      number_of_formulas_ = from.number_of_formulas_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DependencyTrackerArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.DependencyTrackerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DependencyTrackerArchive::CopyFrom(const DependencyTrackerArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.DependencyTrackerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DependencyTrackerArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(formula_owner_info_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(dirty_leaf_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(internal_dirty_leaf_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(formula_owner_dependencies_)) return false;
  if (_internal_has_owner_id_map()) {
    if (!owner_id_map_->IsInitialized()) return false;
  }
  return true;
}

void DependencyTrackerArchive::InternalSwap(DependencyTrackerArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  formula_owner_info_.InternalSwap(&other->formula_owner_info_);
  dirty_leaf_.InternalSwap(&other->dirty_leaf_);
  internal_dirty_leaf_.InternalSwap(&other->internal_dirty_leaf_);
  formula_owner_dependencies_.InternalSwap(&other->formula_owner_dependencies_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DependencyTrackerArchive, number_of_formulas_)
      + sizeof(DependencyTrackerArchive::number_of_formulas_)
      - PROTOBUF_FIELD_OFFSET(DependencyTrackerArchive, owner_id_map_)>(
          reinterpret_cast<char*>(&owner_id_map_),
          reinterpret_cast<char*>(&other->owner_id_map_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DependencyTrackerArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[63]);
}

// ===================================================================

class RemoteDataSpecifierArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<RemoteDataSpecifierArchive>()._has_bits_);
  static void set_has_function_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_symbol(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_attribute(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_date(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

RemoteDataSpecifierArchive::RemoteDataSpecifierArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.RemoteDataSpecifierArchive)
}
RemoteDataSpecifierArchive::RemoteDataSpecifierArchive(const RemoteDataSpecifierArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_symbol()) {
    symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_symbol(), 
      GetArena());
  }
  ::memcpy(&function_index_, &from.function_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&date_) -
    reinterpret_cast<char*>(&function_index_)) + sizeof(date_));
  // @@protoc_insertion_point(copy_constructor:TSCE.RemoteDataSpecifierArchive)
}

void RemoteDataSpecifierArchive::SharedCtor() {
symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&function_index_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&date_) -
    reinterpret_cast<char*>(&function_index_)) + sizeof(date_));
}

RemoteDataSpecifierArchive::~RemoteDataSpecifierArchive() {
  // @@protoc_insertion_point(destructor:TSCE.RemoteDataSpecifierArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RemoteDataSpecifierArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  symbol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RemoteDataSpecifierArchive::ArenaDtor(void* object) {
  RemoteDataSpecifierArchive* _this = reinterpret_cast< RemoteDataSpecifierArchive* >(object);
  (void)_this;
}
void RemoteDataSpecifierArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RemoteDataSpecifierArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RemoteDataSpecifierArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.RemoteDataSpecifierArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    symbol_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&function_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&date_) -
        reinterpret_cast<char*>(&function_index_)) + sizeof(date_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoteDataSpecifierArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 function_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_function_index(&has_bits);
          function_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string symbol = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_symbol();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSCE.RemoteDataSpecifierArchive.symbol");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 attribute = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_attribute(&has_bits);
          attribute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double date = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_date(&has_bits);
          date_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RemoteDataSpecifierArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.RemoteDataSpecifierArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 function_index = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_function_index(), target);
  }

  // required string symbol = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_symbol().data(), static_cast<int>(this->_internal_symbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCE.RemoteDataSpecifierArchive.symbol");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_symbol(), target);
  }

  // required uint32 attribute = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_attribute(), target);
  }

  // optional double date = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_date(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.RemoteDataSpecifierArchive)
  return target;
}

size_t RemoteDataSpecifierArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.RemoteDataSpecifierArchive)
  size_t total_size = 0;

  if (_internal_has_symbol()) {
    // required string symbol = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_symbol());
  }

  if (_internal_has_function_index()) {
    // required uint32 function_index = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_function_index());
  }

  if (_internal_has_attribute()) {
    // required uint32 attribute = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_attribute());
  }

  return total_size;
}
size_t RemoteDataSpecifierArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.RemoteDataSpecifierArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string symbol = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_symbol());

    // required uint32 function_index = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_function_index());

    // required uint32 attribute = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_attribute());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional double date = 4;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoteDataSpecifierArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.RemoteDataSpecifierArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoteDataSpecifierArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RemoteDataSpecifierArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.RemoteDataSpecifierArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.RemoteDataSpecifierArchive)
    MergeFrom(*source);
  }
}

void RemoteDataSpecifierArchive::MergeFrom(const RemoteDataSpecifierArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.RemoteDataSpecifierArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_symbol(from._internal_symbol());
    }
    if (cached_has_bits & 0x00000002u) {
      function_index_ = from.function_index_;
    }
    if (cached_has_bits & 0x00000004u) {
      attribute_ = from.attribute_;
    }
    if (cached_has_bits & 0x00000008u) {
      date_ = from.date_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RemoteDataSpecifierArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.RemoteDataSpecifierArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoteDataSpecifierArchive::CopyFrom(const RemoteDataSpecifierArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.RemoteDataSpecifierArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteDataSpecifierArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void RemoteDataSpecifierArchive::InternalSwap(RemoteDataSpecifierArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  symbol_.Swap(&other->symbol_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RemoteDataSpecifierArchive, date_)
      + sizeof(RemoteDataSpecifierArchive::date_)
      - PROTOBUF_FIELD_OFFSET(RemoteDataSpecifierArchive, function_index_)>(
          reinterpret_cast<char*>(&function_index_),
          reinterpret_cast<char*>(&other->function_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoteDataSpecifierArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[64]);
}

// ===================================================================

class RemoteDataValueMapArchive_RemoteDataMapEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<RemoteDataValueMapArchive_RemoteDataMapEntry>()._has_bits_);
  static const ::TSCE::RemoteDataSpecifierArchive& specifier(const RemoteDataValueMapArchive_RemoteDataMapEntry* msg);
  static void set_has_specifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSCE::CellValueArchive& value(const RemoteDataValueMapArchive_RemoteDataMapEntry* msg);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSCE::RemoteDataSpecifierArchive&
RemoteDataValueMapArchive_RemoteDataMapEntry::_Internal::specifier(const RemoteDataValueMapArchive_RemoteDataMapEntry* msg) {
  return *msg->specifier_;
}
const ::TSCE::CellValueArchive&
RemoteDataValueMapArchive_RemoteDataMapEntry::_Internal::value(const RemoteDataValueMapArchive_RemoteDataMapEntry* msg) {
  return *msg->value_;
}
RemoteDataValueMapArchive_RemoteDataMapEntry::RemoteDataValueMapArchive_RemoteDataMapEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.RemoteDataValueMapArchive.RemoteDataMapEntry)
}
RemoteDataValueMapArchive_RemoteDataMapEntry::RemoteDataValueMapArchive_RemoteDataMapEntry(const RemoteDataValueMapArchive_RemoteDataMapEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_specifier()) {
    specifier_ = new ::TSCE::RemoteDataSpecifierArchive(*from.specifier_);
  } else {
    specifier_ = nullptr;
  }
  if (from._internal_has_value()) {
    value_ = new ::TSCE::CellValueArchive(*from.value_);
  } else {
    value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSCE.RemoteDataValueMapArchive.RemoteDataMapEntry)
}

void RemoteDataValueMapArchive_RemoteDataMapEntry::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&specifier_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&specifier_)) + sizeof(value_));
}

RemoteDataValueMapArchive_RemoteDataMapEntry::~RemoteDataValueMapArchive_RemoteDataMapEntry() {
  // @@protoc_insertion_point(destructor:TSCE.RemoteDataValueMapArchive.RemoteDataMapEntry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RemoteDataValueMapArchive_RemoteDataMapEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete specifier_;
  if (this != internal_default_instance()) delete value_;
}

void RemoteDataValueMapArchive_RemoteDataMapEntry::ArenaDtor(void* object) {
  RemoteDataValueMapArchive_RemoteDataMapEntry* _this = reinterpret_cast< RemoteDataValueMapArchive_RemoteDataMapEntry* >(object);
  (void)_this;
}
void RemoteDataValueMapArchive_RemoteDataMapEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RemoteDataValueMapArchive_RemoteDataMapEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RemoteDataValueMapArchive_RemoteDataMapEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.RemoteDataValueMapArchive.RemoteDataMapEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(specifier_ != nullptr);
      specifier_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(value_ != nullptr);
      value_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoteDataValueMapArchive_RemoteDataMapEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCE.RemoteDataSpecifierArchive specifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_specifier(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSCE.CellValueArchive value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RemoteDataValueMapArchive_RemoteDataMapEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.RemoteDataValueMapArchive.RemoteDataMapEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSCE.RemoteDataSpecifierArchive specifier = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::specifier(this), target, stream);
  }

  // required .TSCE.CellValueArchive value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.RemoteDataValueMapArchive.RemoteDataMapEntry)
  return target;
}

size_t RemoteDataValueMapArchive_RemoteDataMapEntry::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.RemoteDataValueMapArchive.RemoteDataMapEntry)
  size_t total_size = 0;

  if (_internal_has_specifier()) {
    // required .TSCE.RemoteDataSpecifierArchive specifier = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *specifier_);
  }

  if (_internal_has_value()) {
    // required .TSCE.CellValueArchive value = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);
  }

  return total_size;
}
size_t RemoteDataValueMapArchive_RemoteDataMapEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.RemoteDataValueMapArchive.RemoteDataMapEntry)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSCE.RemoteDataSpecifierArchive specifier = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *specifier_);

    // required .TSCE.CellValueArchive value = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoteDataValueMapArchive_RemoteDataMapEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.RemoteDataValueMapArchive.RemoteDataMapEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoteDataValueMapArchive_RemoteDataMapEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RemoteDataValueMapArchive_RemoteDataMapEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.RemoteDataValueMapArchive.RemoteDataMapEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.RemoteDataValueMapArchive.RemoteDataMapEntry)
    MergeFrom(*source);
  }
}

void RemoteDataValueMapArchive_RemoteDataMapEntry::MergeFrom(const RemoteDataValueMapArchive_RemoteDataMapEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.RemoteDataValueMapArchive.RemoteDataMapEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_specifier()->::TSCE::RemoteDataSpecifierArchive::MergeFrom(from._internal_specifier());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_value()->::TSCE::CellValueArchive::MergeFrom(from._internal_value());
    }
  }
}

void RemoteDataValueMapArchive_RemoteDataMapEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.RemoteDataValueMapArchive.RemoteDataMapEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoteDataValueMapArchive_RemoteDataMapEntry::CopyFrom(const RemoteDataValueMapArchive_RemoteDataMapEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.RemoteDataValueMapArchive.RemoteDataMapEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteDataValueMapArchive_RemoteDataMapEntry::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_specifier()) {
    if (!specifier_->IsInitialized()) return false;
  }
  if (_internal_has_value()) {
    if (!value_->IsInitialized()) return false;
  }
  return true;
}

void RemoteDataValueMapArchive_RemoteDataMapEntry::InternalSwap(RemoteDataValueMapArchive_RemoteDataMapEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RemoteDataValueMapArchive_RemoteDataMapEntry, value_)
      + sizeof(RemoteDataValueMapArchive_RemoteDataMapEntry::value_)
      - PROTOBUF_FIELD_OFFSET(RemoteDataValueMapArchive_RemoteDataMapEntry, specifier_)>(
          reinterpret_cast<char*>(&specifier_),
          reinterpret_cast<char*>(&other->specifier_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoteDataValueMapArchive_RemoteDataMapEntry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[65]);
}

// ===================================================================

class RemoteDataValueMapArchive::_Internal {
 public:
};

RemoteDataValueMapArchive::RemoteDataValueMapArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  entry_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.RemoteDataValueMapArchive)
}
RemoteDataValueMapArchive::RemoteDataValueMapArchive(const RemoteDataValueMapArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      entry_(from.entry_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSCE.RemoteDataValueMapArchive)
}

void RemoteDataValueMapArchive::SharedCtor() {
}

RemoteDataValueMapArchive::~RemoteDataValueMapArchive() {
  // @@protoc_insertion_point(destructor:TSCE.RemoteDataValueMapArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RemoteDataValueMapArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RemoteDataValueMapArchive::ArenaDtor(void* object) {
  RemoteDataValueMapArchive* _this = reinterpret_cast< RemoteDataValueMapArchive* >(object);
  (void)_this;
}
void RemoteDataValueMapArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RemoteDataValueMapArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RemoteDataValueMapArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.RemoteDataValueMapArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entry_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoteDataValueMapArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSCE.RemoteDataValueMapArchive.RemoteDataMapEntry entry = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entry(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RemoteDataValueMapArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.RemoteDataValueMapArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSCE.RemoteDataValueMapArchive.RemoteDataMapEntry entry = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_entry_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_entry(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.RemoteDataValueMapArchive)
  return target;
}

size_t RemoteDataValueMapArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.RemoteDataValueMapArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.RemoteDataValueMapArchive.RemoteDataMapEntry entry = 1;
  total_size += 1UL * this->_internal_entry_size();
  for (const auto& msg : this->entry_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoteDataValueMapArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.RemoteDataValueMapArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoteDataValueMapArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RemoteDataValueMapArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.RemoteDataValueMapArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.RemoteDataValueMapArchive)
    MergeFrom(*source);
  }
}

void RemoteDataValueMapArchive::MergeFrom(const RemoteDataValueMapArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.RemoteDataValueMapArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entry_.MergeFrom(from.entry_);
}

void RemoteDataValueMapArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.RemoteDataValueMapArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoteDataValueMapArchive::CopyFrom(const RemoteDataValueMapArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.RemoteDataValueMapArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteDataValueMapArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(entry_)) return false;
  return true;
}

void RemoteDataValueMapArchive::InternalSwap(RemoteDataValueMapArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  entry_.InternalSwap(&other->entry_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoteDataValueMapArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[66]);
}

// ===================================================================

class StockArchive_AttributeEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<StockArchive_AttributeEntry>()._has_bits_);
  static void set_has_attribute(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

StockArchive_AttributeEntry::StockArchive_AttributeEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.StockArchive.AttributeEntry)
}
StockArchive_AttributeEntry::StockArchive_AttributeEntry(const StockArchive_AttributeEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_value()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArena());
  }
  attribute_ = from.attribute_;
  // @@protoc_insertion_point(copy_constructor:TSCE.StockArchive.AttributeEntry)
}

void StockArchive_AttributeEntry::SharedCtor() {
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
attribute_ = 0u;
}

StockArchive_AttributeEntry::~StockArchive_AttributeEntry() {
  // @@protoc_insertion_point(destructor:TSCE.StockArchive.AttributeEntry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StockArchive_AttributeEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StockArchive_AttributeEntry::ArenaDtor(void* object) {
  StockArchive_AttributeEntry* _this = reinterpret_cast< StockArchive_AttributeEntry* >(object);
  (void)_this;
}
void StockArchive_AttributeEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StockArchive_AttributeEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StockArchive_AttributeEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.StockArchive.AttributeEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    value_.ClearNonDefaultToEmpty();
  }
  attribute_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StockArchive_AttributeEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 attribute = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_attribute(&has_bits);
          attribute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSCE.StockArchive.AttributeEntry.value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StockArchive_AttributeEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.StockArchive.AttributeEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 attribute = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_attribute(), target);
  }

  // required string value = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCE.StockArchive.AttributeEntry.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.StockArchive.AttributeEntry)
  return target;
}

size_t StockArchive_AttributeEntry::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.StockArchive.AttributeEntry)
  size_t total_size = 0;

  if (_internal_has_value()) {
    // required string value = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  if (_internal_has_attribute()) {
    // required uint32 attribute = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_attribute());
  }

  return total_size;
}
size_t StockArchive_AttributeEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.StockArchive.AttributeEntry)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string value = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());

    // required uint32 attribute = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_attribute());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StockArchive_AttributeEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.StockArchive.AttributeEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const StockArchive_AttributeEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StockArchive_AttributeEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.StockArchive.AttributeEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.StockArchive.AttributeEntry)
    MergeFrom(*source);
  }
}

void StockArchive_AttributeEntry::MergeFrom(const StockArchive_AttributeEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.StockArchive.AttributeEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_value(from._internal_value());
    }
    if (cached_has_bits & 0x00000002u) {
      attribute_ = from.attribute_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StockArchive_AttributeEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.StockArchive.AttributeEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StockArchive_AttributeEntry::CopyFrom(const StockArchive_AttributeEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.StockArchive.AttributeEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StockArchive_AttributeEntry::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void StockArchive_AttributeEntry::InternalSwap(StockArchive_AttributeEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(attribute_, other->attribute_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StockArchive_AttributeEntry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[67]);
}

// ===================================================================

class StockArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<StockArchive>()._has_bits_);
  static void set_has_symbol(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_date(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

StockArchive::StockArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  attribute_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.StockArchive)
}
StockArchive::StockArchive(const StockArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      attribute_(from.attribute_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_symbol()) {
    symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_symbol(), 
      GetArena());
  }
  date_ = from.date_;
  // @@protoc_insertion_point(copy_constructor:TSCE.StockArchive)
}

void StockArchive::SharedCtor() {
symbol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
date_ = 0;
}

StockArchive::~StockArchive() {
  // @@protoc_insertion_point(destructor:TSCE.StockArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StockArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  symbol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StockArchive::ArenaDtor(void* object) {
  StockArchive* _this = reinterpret_cast< StockArchive* >(object);
  (void)_this;
}
void StockArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StockArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StockArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.StockArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attribute_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    symbol_.ClearNonDefaultToEmpty();
  }
  date_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StockArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string symbol = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_symbol();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSCE.StockArchive.symbol");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double date = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_date(&has_bits);
          date_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated .TSCE.StockArchive.AttributeEntry attribute = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attribute(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StockArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.StockArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string symbol = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_symbol().data(), static_cast<int>(this->_internal_symbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCE.StockArchive.symbol");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_symbol(), target);
  }

  // optional double date = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_date(), target);
  }

  // repeated .TSCE.StockArchive.AttributeEntry attribute = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attribute_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_attribute(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.StockArchive)
  return target;
}

size_t StockArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.StockArchive)
  size_t total_size = 0;

  // required string symbol = 1;
  if (_internal_has_symbol()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_symbol());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.StockArchive.AttributeEntry attribute = 3;
  total_size += 1UL * this->_internal_attribute_size();
  for (const auto& msg : this->attribute_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional double date = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StockArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.StockArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const StockArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StockArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.StockArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.StockArchive)
    MergeFrom(*source);
  }
}

void StockArchive::MergeFrom(const StockArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.StockArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attribute_.MergeFrom(from.attribute_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_symbol(from._internal_symbol());
    }
    if (cached_has_bits & 0x00000002u) {
      date_ = from.date_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StockArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.StockArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StockArchive::CopyFrom(const StockArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.StockArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StockArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(attribute_)) return false;
  return true;
}

void StockArchive::InternalSwap(StockArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  attribute_.InternalSwap(&other->attribute_);
  symbol_.Swap(&other->symbol_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(date_, other->date_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StockArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[68]);
}

// ===================================================================

class RemoteDataStoreArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<RemoteDataStoreArchive>()._has_bits_);
  static const ::TSCE::RemoteDataValueMapArchive& value_map(const RemoteDataStoreArchive* msg);
  static void set_has_value_map(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSCE::RemoteDataValueMapArchive&
RemoteDataStoreArchive::_Internal::value_map(const RemoteDataStoreArchive* msg) {
  return *msg->value_map_;
}
RemoteDataStoreArchive::RemoteDataStoreArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  stocks_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.RemoteDataStoreArchive)
}
RemoteDataStoreArchive::RemoteDataStoreArchive(const RemoteDataStoreArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      stocks_(from.stocks_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_value_map()) {
    value_map_ = new ::TSCE::RemoteDataValueMapArchive(*from.value_map_);
  } else {
    value_map_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSCE.RemoteDataStoreArchive)
}

void RemoteDataStoreArchive::SharedCtor() {
value_map_ = nullptr;
}

RemoteDataStoreArchive::~RemoteDataStoreArchive() {
  // @@protoc_insertion_point(destructor:TSCE.RemoteDataStoreArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RemoteDataStoreArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete value_map_;
}

void RemoteDataStoreArchive::ArenaDtor(void* object) {
  RemoteDataStoreArchive* _this = reinterpret_cast< RemoteDataStoreArchive* >(object);
  (void)_this;
}
void RemoteDataStoreArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RemoteDataStoreArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RemoteDataStoreArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.RemoteDataStoreArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stocks_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(value_map_ != nullptr);
    value_map_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoteDataStoreArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCE.RemoteDataValueMapArchive value_map = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_value_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSCE.StockArchive stocks = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stocks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RemoteDataStoreArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.RemoteDataStoreArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSCE.RemoteDataValueMapArchive value_map = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::value_map(this), target, stream);
  }

  // repeated .TSCE.StockArchive stocks = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stocks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_stocks(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.RemoteDataStoreArchive)
  return target;
}

size_t RemoteDataStoreArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.RemoteDataStoreArchive)
  size_t total_size = 0;

  // required .TSCE.RemoteDataValueMapArchive value_map = 1;
  if (_internal_has_value_map()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_map_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.StockArchive stocks = 2;
  total_size += 1UL * this->_internal_stocks_size();
  for (const auto& msg : this->stocks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoteDataStoreArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.RemoteDataStoreArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoteDataStoreArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RemoteDataStoreArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.RemoteDataStoreArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.RemoteDataStoreArchive)
    MergeFrom(*source);
  }
}

void RemoteDataStoreArchive::MergeFrom(const RemoteDataStoreArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.RemoteDataStoreArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stocks_.MergeFrom(from.stocks_);
  if (from._internal_has_value_map()) {
    _internal_mutable_value_map()->::TSCE::RemoteDataValueMapArchive::MergeFrom(from._internal_value_map());
  }
}

void RemoteDataStoreArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.RemoteDataStoreArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoteDataStoreArchive::CopyFrom(const RemoteDataStoreArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.RemoteDataStoreArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteDataStoreArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(stocks_)) return false;
  if (_internal_has_value_map()) {
    if (!value_map_->IsInitialized()) return false;
  }
  return true;
}

void RemoteDataStoreArchive::InternalSwap(RemoteDataStoreArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  stocks_.InternalSwap(&other->stocks_);
  swap(value_map_, other->value_map_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoteDataStoreArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[69]);
}

// ===================================================================

class NameTrackedReferencePair::_Internal {
 public:
  using HasBits = decltype(std::declval<NameTrackedReferencePair>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& tracked_reference(const NameTrackedReferencePair* msg);
  static void set_has_tracked_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_tracked_reference_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSP::Reference&
NameTrackedReferencePair::_Internal::tracked_reference(const NameTrackedReferencePair* msg) {
  return *msg->tracked_reference_;
}
void NameTrackedReferencePair::clear_tracked_reference() {
  if (tracked_reference_ != nullptr) tracked_reference_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
NameTrackedReferencePair::NameTrackedReferencePair(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.NameTrackedReferencePair)
}
NameTrackedReferencePair::NameTrackedReferencePair(const NameTrackedReferencePair& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  if (from._internal_has_tracked_reference()) {
    tracked_reference_ = new ::TSP::Reference(*from.tracked_reference_);
  } else {
    tracked_reference_ = nullptr;
  }
  tracked_reference_id_ = from.tracked_reference_id_;
  // @@protoc_insertion_point(copy_constructor:TSCE.NameTrackedReferencePair)
}

void NameTrackedReferencePair::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&tracked_reference_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&tracked_reference_id_) -
    reinterpret_cast<char*>(&tracked_reference_)) + sizeof(tracked_reference_id_));
}

NameTrackedReferencePair::~NameTrackedReferencePair() {
  // @@protoc_insertion_point(destructor:TSCE.NameTrackedReferencePair)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NameTrackedReferencePair::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete tracked_reference_;
}

void NameTrackedReferencePair::ArenaDtor(void* object) {
  NameTrackedReferencePair* _this = reinterpret_cast< NameTrackedReferencePair* >(object);
  (void)_this;
}
void NameTrackedReferencePair::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NameTrackedReferencePair::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NameTrackedReferencePair::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.NameTrackedReferencePair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(tracked_reference_ != nullptr);
      tracked_reference_->Clear();
    }
  }
  tracked_reference_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NameTrackedReferencePair::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSCE.NameTrackedReferencePair.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference tracked_reference = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_tracked_reference(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 tracked_reference_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_tracked_reference_id(&has_bits);
          tracked_reference_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NameTrackedReferencePair::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.NameTrackedReferencePair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCE.NameTrackedReferencePair.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional .TSP.Reference tracked_reference = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::tracked_reference(this), target, stream);
  }

  // optional uint32 tracked_reference_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_tracked_reference_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.NameTrackedReferencePair)
  return target;
}

size_t NameTrackedReferencePair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.NameTrackedReferencePair)
  size_t total_size = 0;

  // required string name = 1;
  if (_internal_has_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .TSP.Reference tracked_reference = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tracked_reference_);
    }

    // optional uint32 tracked_reference_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tracked_reference_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NameTrackedReferencePair::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.NameTrackedReferencePair)
  GOOGLE_DCHECK_NE(&from, this);
  const NameTrackedReferencePair* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NameTrackedReferencePair>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.NameTrackedReferencePair)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.NameTrackedReferencePair)
    MergeFrom(*source);
  }
}

void NameTrackedReferencePair::MergeFrom(const NameTrackedReferencePair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.NameTrackedReferencePair)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_tracked_reference()->::TSP::Reference::MergeFrom(from._internal_tracked_reference());
    }
    if (cached_has_bits & 0x00000004u) {
      tracked_reference_id_ = from.tracked_reference_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NameTrackedReferencePair::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.NameTrackedReferencePair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NameTrackedReferencePair::CopyFrom(const NameTrackedReferencePair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.NameTrackedReferencePair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NameTrackedReferencePair::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_tracked_reference()) {
    if (!tracked_reference_->IsInitialized()) return false;
  }
  return true;
}

void NameTrackedReferencePair::InternalSwap(NameTrackedReferencePair* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NameTrackedReferencePair, tracked_reference_id_)
      + sizeof(NameTrackedReferencePair::tracked_reference_id_)
      - PROTOBUF_FIELD_OFFSET(NameTrackedReferencePair, tracked_reference_)>(
          reinterpret_cast<char*>(&tracked_reference_),
          reinterpret_cast<char*>(&other->tracked_reference_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NameTrackedReferencePair::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[70]);
}

// ===================================================================

class NamesByTrackedReferenceArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<NamesByTrackedReferenceArchive>()._has_bits_);
  static const ::TSP::CFUUIDArchive& table_id(const NamesByTrackedReferenceArchive* msg);
  static void set_has_table_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSP::CFUUIDArchive&
NamesByTrackedReferenceArchive::_Internal::table_id(const NamesByTrackedReferenceArchive* msg) {
  return *msg->table_id_;
}
void NamesByTrackedReferenceArchive::clear_table_id() {
  if (table_id_ != nullptr) table_id_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
NamesByTrackedReferenceArchive::NamesByTrackedReferenceArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  name_tracked_reference_pair_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.NamesByTrackedReferenceArchive)
}
NamesByTrackedReferenceArchive::NamesByTrackedReferenceArchive(const NamesByTrackedReferenceArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      name_tracked_reference_pair_(from.name_tracked_reference_pair_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_table_id()) {
    table_id_ = new ::TSP::CFUUIDArchive(*from.table_id_);
  } else {
    table_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSCE.NamesByTrackedReferenceArchive)
}

void NamesByTrackedReferenceArchive::SharedCtor() {
table_id_ = nullptr;
}

NamesByTrackedReferenceArchive::~NamesByTrackedReferenceArchive() {
  // @@protoc_insertion_point(destructor:TSCE.NamesByTrackedReferenceArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NamesByTrackedReferenceArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete table_id_;
}

void NamesByTrackedReferenceArchive::ArenaDtor(void* object) {
  NamesByTrackedReferenceArchive* _this = reinterpret_cast< NamesByTrackedReferenceArchive* >(object);
  (void)_this;
}
void NamesByTrackedReferenceArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NamesByTrackedReferenceArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NamesByTrackedReferenceArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.NamesByTrackedReferenceArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_tracked_reference_pair_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(table_id_ != nullptr);
    table_id_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NamesByTrackedReferenceArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.CFUUIDArchive table_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSCE.NameTrackedReferencePair name_tracked_reference_pair = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_name_tracked_reference_pair(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NamesByTrackedReferenceArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.NamesByTrackedReferenceArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSP.CFUUIDArchive table_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::table_id(this), target, stream);
  }

  // repeated .TSCE.NameTrackedReferencePair name_tracked_reference_pair = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_name_tracked_reference_pair_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_name_tracked_reference_pair(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.NamesByTrackedReferenceArchive)
  return target;
}

size_t NamesByTrackedReferenceArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.NamesByTrackedReferenceArchive)
  size_t total_size = 0;

  // required .TSP.CFUUIDArchive table_id = 1;
  if (_internal_has_table_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *table_id_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.NameTrackedReferencePair name_tracked_reference_pair = 2;
  total_size += 1UL * this->_internal_name_tracked_reference_pair_size();
  for (const auto& msg : this->name_tracked_reference_pair_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NamesByTrackedReferenceArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.NamesByTrackedReferenceArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const NamesByTrackedReferenceArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NamesByTrackedReferenceArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.NamesByTrackedReferenceArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.NamesByTrackedReferenceArchive)
    MergeFrom(*source);
  }
}

void NamesByTrackedReferenceArchive::MergeFrom(const NamesByTrackedReferenceArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.NamesByTrackedReferenceArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  name_tracked_reference_pair_.MergeFrom(from.name_tracked_reference_pair_);
  if (from._internal_has_table_id()) {
    _internal_mutable_table_id()->::TSP::CFUUIDArchive::MergeFrom(from._internal_table_id());
  }
}

void NamesByTrackedReferenceArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.NamesByTrackedReferenceArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NamesByTrackedReferenceArchive::CopyFrom(const NamesByTrackedReferenceArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.NamesByTrackedReferenceArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NamesByTrackedReferenceArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(name_tracked_reference_pair_)) return false;
  return true;
}

void NamesByTrackedReferenceArchive::InternalSwap(NamesByTrackedReferenceArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_tracked_reference_pair_.InternalSwap(&other->name_tracked_reference_pair_);
  swap(table_id_, other->table_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NamesByTrackedReferenceArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[71]);
}

// ===================================================================

class NamedReferenceManagerArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<NamedReferenceManagerArchive>()._has_bits_);
  static const ::TSP::Reference& reference_tracker(const NamedReferenceManagerArchive* msg);
  static void set_has_reference_tracker(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSP::Reference&
NamedReferenceManagerArchive::_Internal::reference_tracker(const NamedReferenceManagerArchive* msg) {
  return *msg->reference_tracker_;
}
void NamedReferenceManagerArchive::clear_reference_tracker() {
  if (reference_tracker_ != nullptr) reference_tracker_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
NamedReferenceManagerArchive::NamedReferenceManagerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  names_by_tracked_reference_by_table_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.NamedReferenceManagerArchive)
}
NamedReferenceManagerArchive::NamedReferenceManagerArchive(const NamedReferenceManagerArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      names_by_tracked_reference_by_table_(from.names_by_tracked_reference_by_table_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_reference_tracker()) {
    reference_tracker_ = new ::TSP::Reference(*from.reference_tracker_);
  } else {
    reference_tracker_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSCE.NamedReferenceManagerArchive)
}

void NamedReferenceManagerArchive::SharedCtor() {
reference_tracker_ = nullptr;
}

NamedReferenceManagerArchive::~NamedReferenceManagerArchive() {
  // @@protoc_insertion_point(destructor:TSCE.NamedReferenceManagerArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NamedReferenceManagerArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete reference_tracker_;
}

void NamedReferenceManagerArchive::ArenaDtor(void* object) {
  NamedReferenceManagerArchive* _this = reinterpret_cast< NamedReferenceManagerArchive* >(object);
  (void)_this;
}
void NamedReferenceManagerArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NamedReferenceManagerArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NamedReferenceManagerArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.NamedReferenceManagerArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  names_by_tracked_reference_by_table_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(reference_tracker_ != nullptr);
    reference_tracker_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NamedReferenceManagerArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.Reference reference_tracker = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_reference_tracker(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSCE.NamesByTrackedReferenceArchive names_by_tracked_reference_by_table = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_names_by_tracked_reference_by_table(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NamedReferenceManagerArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.NamedReferenceManagerArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSP.Reference reference_tracker = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::reference_tracker(this), target, stream);
  }

  // repeated .TSCE.NamesByTrackedReferenceArchive names_by_tracked_reference_by_table = 2 [deprecated = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_names_by_tracked_reference_by_table_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_names_by_tracked_reference_by_table(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.NamedReferenceManagerArchive)
  return target;
}

size_t NamedReferenceManagerArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.NamedReferenceManagerArchive)
  size_t total_size = 0;

  // required .TSP.Reference reference_tracker = 1;
  if (_internal_has_reference_tracker()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *reference_tracker_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.NamesByTrackedReferenceArchive names_by_tracked_reference_by_table = 2 [deprecated = true];
  total_size += 1UL * this->_internal_names_by_tracked_reference_by_table_size();
  for (const auto& msg : this->names_by_tracked_reference_by_table_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NamedReferenceManagerArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.NamedReferenceManagerArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const NamedReferenceManagerArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NamedReferenceManagerArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.NamedReferenceManagerArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.NamedReferenceManagerArchive)
    MergeFrom(*source);
  }
}

void NamedReferenceManagerArchive::MergeFrom(const NamedReferenceManagerArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.NamedReferenceManagerArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  names_by_tracked_reference_by_table_.MergeFrom(from.names_by_tracked_reference_by_table_);
  if (from._internal_has_reference_tracker()) {
    _internal_mutable_reference_tracker()->::TSP::Reference::MergeFrom(from._internal_reference_tracker());
  }
}

void NamedReferenceManagerArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.NamedReferenceManagerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NamedReferenceManagerArchive::CopyFrom(const NamedReferenceManagerArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.NamedReferenceManagerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NamedReferenceManagerArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(names_by_tracked_reference_by_table_)) return false;
  if (_internal_has_reference_tracker()) {
    if (!reference_tracker_->IsInitialized()) return false;
  }
  return true;
}

void NamedReferenceManagerArchive::InternalSwap(NamedReferenceManagerArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  names_by_tracked_reference_by_table_.InternalSwap(&other->names_by_tracked_reference_by_table_);
  swap(reference_tracker_, other->reference_tracker_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NamedReferenceManagerArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[72]);
}

// ===================================================================

class UuidSetStoreArchive_UuidSet::_Internal {
 public:
  using HasBits = decltype(std::declval<UuidSetStoreArchive_UuidSet>()._has_bits_);
  static void set_has_index_of_set(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

void UuidSetStoreArchive_UuidSet::clear_uuid() {
  uuid_.Clear();
}
UuidSetStoreArchive_UuidSet::UuidSetStoreArchive_UuidSet(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  uuid_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.UuidSetStoreArchive.UuidSet)
}
UuidSetStoreArchive_UuidSet::UuidSetStoreArchive_UuidSet(const UuidSetStoreArchive_UuidSet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      uuid_(from.uuid_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  index_of_set_ = from.index_of_set_;
  // @@protoc_insertion_point(copy_constructor:TSCE.UuidSetStoreArchive.UuidSet)
}

void UuidSetStoreArchive_UuidSet::SharedCtor() {
index_of_set_ = 0u;
}

UuidSetStoreArchive_UuidSet::~UuidSetStoreArchive_UuidSet() {
  // @@protoc_insertion_point(destructor:TSCE.UuidSetStoreArchive.UuidSet)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UuidSetStoreArchive_UuidSet::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UuidSetStoreArchive_UuidSet::ArenaDtor(void* object) {
  UuidSetStoreArchive_UuidSet* _this = reinterpret_cast< UuidSetStoreArchive_UuidSet* >(object);
  (void)_this;
}
void UuidSetStoreArchive_UuidSet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UuidSetStoreArchive_UuidSet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UuidSetStoreArchive_UuidSet::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.UuidSetStoreArchive.UuidSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uuid_.Clear();
  index_of_set_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UuidSetStoreArchive_UuidSet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSP.UUID uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_uuid(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // required uint32 index_of_set = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_index_of_set(&has_bits);
          index_of_set_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UuidSetStoreArchive_UuidSet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.UuidSetStoreArchive.UuidSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSP.UUID uuid = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_uuid_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_uuid(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // required uint32 index_of_set = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_index_of_set(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.UuidSetStoreArchive.UuidSet)
  return target;
}

size_t UuidSetStoreArchive_UuidSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.UuidSetStoreArchive.UuidSet)
  size_t total_size = 0;

  // required uint32 index_of_set = 2;
  if (_internal_has_index_of_set()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_index_of_set());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.UUID uuid = 1;
  total_size += 1UL * this->_internal_uuid_size();
  for (const auto& msg : this->uuid_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UuidSetStoreArchive_UuidSet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.UuidSetStoreArchive.UuidSet)
  GOOGLE_DCHECK_NE(&from, this);
  const UuidSetStoreArchive_UuidSet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UuidSetStoreArchive_UuidSet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.UuidSetStoreArchive.UuidSet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.UuidSetStoreArchive.UuidSet)
    MergeFrom(*source);
  }
}

void UuidSetStoreArchive_UuidSet::MergeFrom(const UuidSetStoreArchive_UuidSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.UuidSetStoreArchive.UuidSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  uuid_.MergeFrom(from.uuid_);
  if (from._internal_has_index_of_set()) {
    _internal_set_index_of_set(from._internal_index_of_set());
  }
}

void UuidSetStoreArchive_UuidSet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.UuidSetStoreArchive.UuidSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UuidSetStoreArchive_UuidSet::CopyFrom(const UuidSetStoreArchive_UuidSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.UuidSetStoreArchive.UuidSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UuidSetStoreArchive_UuidSet::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(uuid_)) return false;
  return true;
}

void UuidSetStoreArchive_UuidSet::InternalSwap(UuidSetStoreArchive_UuidSet* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  uuid_.InternalSwap(&other->uuid_);
  swap(index_of_set_, other->index_of_set_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UuidSetStoreArchive_UuidSet::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[73]);
}

// ===================================================================

class UuidSetStoreArchive::_Internal {
 public:
};

UuidSetStoreArchive::UuidSetStoreArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  uuidset_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.UuidSetStoreArchive)
}
UuidSetStoreArchive::UuidSetStoreArchive(const UuidSetStoreArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      uuidset_(from.uuidset_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSCE.UuidSetStoreArchive)
}

void UuidSetStoreArchive::SharedCtor() {
}

UuidSetStoreArchive::~UuidSetStoreArchive() {
  // @@protoc_insertion_point(destructor:TSCE.UuidSetStoreArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UuidSetStoreArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UuidSetStoreArchive::ArenaDtor(void* object) {
  UuidSetStoreArchive* _this = reinterpret_cast< UuidSetStoreArchive* >(object);
  (void)_this;
}
void UuidSetStoreArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UuidSetStoreArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UuidSetStoreArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.UuidSetStoreArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uuidset_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UuidSetStoreArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSCE.UuidSetStoreArchive.UuidSet uuidSet = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_uuidset(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UuidSetStoreArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.UuidSetStoreArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSCE.UuidSetStoreArchive.UuidSet uuidSet = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_uuidset_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_uuidset(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.UuidSetStoreArchive)
  return target;
}

size_t UuidSetStoreArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.UuidSetStoreArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.UuidSetStoreArchive.UuidSet uuidSet = 1;
  total_size += 1UL * this->_internal_uuidset_size();
  for (const auto& msg : this->uuidset_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UuidSetStoreArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.UuidSetStoreArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const UuidSetStoreArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UuidSetStoreArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.UuidSetStoreArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.UuidSetStoreArchive)
    MergeFrom(*source);
  }
}

void UuidSetStoreArchive::MergeFrom(const UuidSetStoreArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.UuidSetStoreArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  uuidset_.MergeFrom(from.uuidset_);
}

void UuidSetStoreArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.UuidSetStoreArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UuidSetStoreArchive::CopyFrom(const UuidSetStoreArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.UuidSetStoreArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UuidSetStoreArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(uuidset_)) return false;
  return true;
}

void UuidSetStoreArchive::InternalSwap(UuidSetStoreArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  uuidset_.InternalSwap(&other->uuidset_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UuidSetStoreArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[74]);
}

// ===================================================================

class UuidReferenceMapArchive_CellRefsForUuid::_Internal {
 public:
  using HasBits = decltype(std::declval<UuidReferenceMapArchive_CellRefsForUuid>()._has_bits_);
  static const ::TSP::UUID& uuid(const UuidReferenceMapArchive_CellRefsForUuid* msg);
  static void set_has_uuid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSCE::InternalCellRefSetArchive& cell_refs(const UuidReferenceMapArchive_CellRefsForUuid* msg);
  static void set_has_cell_refs(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSP::UUID&
UuidReferenceMapArchive_CellRefsForUuid::_Internal::uuid(const UuidReferenceMapArchive_CellRefsForUuid* msg) {
  return *msg->uuid_;
}
const ::TSCE::InternalCellRefSetArchive&
UuidReferenceMapArchive_CellRefsForUuid::_Internal::cell_refs(const UuidReferenceMapArchive_CellRefsForUuid* msg) {
  return *msg->cell_refs_;
}
void UuidReferenceMapArchive_CellRefsForUuid::clear_uuid() {
  if (uuid_ != nullptr) uuid_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
UuidReferenceMapArchive_CellRefsForUuid::UuidReferenceMapArchive_CellRefsForUuid(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  cell_ref_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.UuidReferenceMapArchive.CellRefsForUuid)
}
UuidReferenceMapArchive_CellRefsForUuid::UuidReferenceMapArchive_CellRefsForUuid(const UuidReferenceMapArchive_CellRefsForUuid& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      cell_ref_(from.cell_ref_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_uuid()) {
    uuid_ = new ::TSP::UUID(*from.uuid_);
  } else {
    uuid_ = nullptr;
  }
  if (from._internal_has_cell_refs()) {
    cell_refs_ = new ::TSCE::InternalCellRefSetArchive(*from.cell_refs_);
  } else {
    cell_refs_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSCE.UuidReferenceMapArchive.CellRefsForUuid)
}

void UuidReferenceMapArchive_CellRefsForUuid::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&uuid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cell_refs_) -
    reinterpret_cast<char*>(&uuid_)) + sizeof(cell_refs_));
}

UuidReferenceMapArchive_CellRefsForUuid::~UuidReferenceMapArchive_CellRefsForUuid() {
  // @@protoc_insertion_point(destructor:TSCE.UuidReferenceMapArchive.CellRefsForUuid)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UuidReferenceMapArchive_CellRefsForUuid::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete uuid_;
  if (this != internal_default_instance()) delete cell_refs_;
}

void UuidReferenceMapArchive_CellRefsForUuid::ArenaDtor(void* object) {
  UuidReferenceMapArchive_CellRefsForUuid* _this = reinterpret_cast< UuidReferenceMapArchive_CellRefsForUuid* >(object);
  (void)_this;
}
void UuidReferenceMapArchive_CellRefsForUuid::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UuidReferenceMapArchive_CellRefsForUuid::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UuidReferenceMapArchive_CellRefsForUuid::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.UuidReferenceMapArchive.CellRefsForUuid)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cell_ref_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(uuid_ != nullptr);
      uuid_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(cell_refs_ != nullptr);
      cell_refs_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UuidReferenceMapArchive_CellRefsForUuid::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.UUID uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_uuid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSCE.InternalCellReferenceArchive cell_ref = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cell_ref(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .TSCE.InternalCellRefSetArchive cell_refs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell_refs(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UuidReferenceMapArchive_CellRefsForUuid::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.UuidReferenceMapArchive.CellRefsForUuid)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSP.UUID uuid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::uuid(this), target, stream);
  }

  // repeated .TSCE.InternalCellReferenceArchive cell_ref = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_cell_ref_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_cell_ref(i), target, stream);
  }

  // optional .TSCE.InternalCellRefSetArchive cell_refs = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::cell_refs(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.UuidReferenceMapArchive.CellRefsForUuid)
  return target;
}

size_t UuidReferenceMapArchive_CellRefsForUuid::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.UuidReferenceMapArchive.CellRefsForUuid)
  size_t total_size = 0;

  // required .TSP.UUID uuid = 1;
  if (_internal_has_uuid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *uuid_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.InternalCellReferenceArchive cell_ref = 2;
  total_size += 1UL * this->_internal_cell_ref_size();
  for (const auto& msg : this->cell_ref_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .TSCE.InternalCellRefSetArchive cell_refs = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cell_refs_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UuidReferenceMapArchive_CellRefsForUuid::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.UuidReferenceMapArchive.CellRefsForUuid)
  GOOGLE_DCHECK_NE(&from, this);
  const UuidReferenceMapArchive_CellRefsForUuid* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UuidReferenceMapArchive_CellRefsForUuid>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.UuidReferenceMapArchive.CellRefsForUuid)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.UuidReferenceMapArchive.CellRefsForUuid)
    MergeFrom(*source);
  }
}

void UuidReferenceMapArchive_CellRefsForUuid::MergeFrom(const UuidReferenceMapArchive_CellRefsForUuid& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.UuidReferenceMapArchive.CellRefsForUuid)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cell_ref_.MergeFrom(from.cell_ref_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_uuid()->::TSP::UUID::MergeFrom(from._internal_uuid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_cell_refs()->::TSCE::InternalCellRefSetArchive::MergeFrom(from._internal_cell_refs());
    }
  }
}

void UuidReferenceMapArchive_CellRefsForUuid::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.UuidReferenceMapArchive.CellRefsForUuid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UuidReferenceMapArchive_CellRefsForUuid::CopyFrom(const UuidReferenceMapArchive_CellRefsForUuid& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.UuidReferenceMapArchive.CellRefsForUuid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UuidReferenceMapArchive_CellRefsForUuid::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(cell_ref_)) return false;
  if (_internal_has_uuid()) {
    if (!uuid_->IsInitialized()) return false;
  }
  if (_internal_has_cell_refs()) {
    if (!cell_refs_->IsInitialized()) return false;
  }
  return true;
}

void UuidReferenceMapArchive_CellRefsForUuid::InternalSwap(UuidReferenceMapArchive_CellRefsForUuid* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  cell_ref_.InternalSwap(&other->cell_ref_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UuidReferenceMapArchive_CellRefsForUuid, cell_refs_)
      + sizeof(UuidReferenceMapArchive_CellRefsForUuid::cell_refs_)
      - PROTOBUF_FIELD_OFFSET(UuidReferenceMapArchive_CellRefsForUuid, uuid_)>(
          reinterpret_cast<char*>(&uuid_),
          reinterpret_cast<char*>(&other->uuid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UuidReferenceMapArchive_CellRefsForUuid::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[75]);
}

// ===================================================================

class UuidReferenceMapArchive::_Internal {
 public:
};

UuidReferenceMapArchive::UuidReferenceMapArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  cell_refs_for_uuid_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.UuidReferenceMapArchive)
}
UuidReferenceMapArchive::UuidReferenceMapArchive(const UuidReferenceMapArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      cell_refs_for_uuid_(from.cell_refs_for_uuid_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSCE.UuidReferenceMapArchive)
}

void UuidReferenceMapArchive::SharedCtor() {
}

UuidReferenceMapArchive::~UuidReferenceMapArchive() {
  // @@protoc_insertion_point(destructor:TSCE.UuidReferenceMapArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UuidReferenceMapArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UuidReferenceMapArchive::ArenaDtor(void* object) {
  UuidReferenceMapArchive* _this = reinterpret_cast< UuidReferenceMapArchive* >(object);
  (void)_this;
}
void UuidReferenceMapArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UuidReferenceMapArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UuidReferenceMapArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.UuidReferenceMapArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cell_refs_for_uuid_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UuidReferenceMapArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSCE.UuidReferenceMapArchive.CellRefsForUuid cell_refs_for_uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cell_refs_for_uuid(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UuidReferenceMapArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.UuidReferenceMapArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSCE.UuidReferenceMapArchive.CellRefsForUuid cell_refs_for_uuid = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_cell_refs_for_uuid_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_cell_refs_for_uuid(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.UuidReferenceMapArchive)
  return target;
}

size_t UuidReferenceMapArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.UuidReferenceMapArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.UuidReferenceMapArchive.CellRefsForUuid cell_refs_for_uuid = 1;
  total_size += 1UL * this->_internal_cell_refs_for_uuid_size();
  for (const auto& msg : this->cell_refs_for_uuid_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UuidReferenceMapArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.UuidReferenceMapArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const UuidReferenceMapArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UuidReferenceMapArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.UuidReferenceMapArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.UuidReferenceMapArchive)
    MergeFrom(*source);
  }
}

void UuidReferenceMapArchive::MergeFrom(const UuidReferenceMapArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.UuidReferenceMapArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cell_refs_for_uuid_.MergeFrom(from.cell_refs_for_uuid_);
}

void UuidReferenceMapArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.UuidReferenceMapArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UuidReferenceMapArchive::CopyFrom(const UuidReferenceMapArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.UuidReferenceMapArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UuidReferenceMapArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(cell_refs_for_uuid_)) return false;
  return true;
}

void UuidReferenceMapArchive::InternalSwap(UuidReferenceMapArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  cell_refs_for_uuid_.InternalSwap(&other->cell_refs_for_uuid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UuidReferenceMapArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[76]);
}

// ===================================================================

class GroupByNodeMapArchive_CellRefsForGroupNode::_Internal {
 public:
  using HasBits = decltype(std::declval<GroupByNodeMapArchive_CellRefsForGroupNode>()._has_bits_);
  static const ::TSP::UUID& group_node_uid(const GroupByNodeMapArchive_CellRefsForGroupNode* msg);
  static void set_has_group_node_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSCE::InternalCellRefSetArchive& cell_refs(const GroupByNodeMapArchive_CellRefsForGroupNode* msg);
  static void set_has_cell_refs(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSP::UUID&
GroupByNodeMapArchive_CellRefsForGroupNode::_Internal::group_node_uid(const GroupByNodeMapArchive_CellRefsForGroupNode* msg) {
  return *msg->group_node_uid_;
}
const ::TSCE::InternalCellRefSetArchive&
GroupByNodeMapArchive_CellRefsForGroupNode::_Internal::cell_refs(const GroupByNodeMapArchive_CellRefsForGroupNode* msg) {
  return *msg->cell_refs_;
}
void GroupByNodeMapArchive_CellRefsForGroupNode::clear_group_node_uid() {
  if (group_node_uid_ != nullptr) group_node_uid_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
GroupByNodeMapArchive_CellRefsForGroupNode::GroupByNodeMapArchive_CellRefsForGroupNode(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.GroupByNodeMapArchive.CellRefsForGroupNode)
}
GroupByNodeMapArchive_CellRefsForGroupNode::GroupByNodeMapArchive_CellRefsForGroupNode(const GroupByNodeMapArchive_CellRefsForGroupNode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_group_node_uid()) {
    group_node_uid_ = new ::TSP::UUID(*from.group_node_uid_);
  } else {
    group_node_uid_ = nullptr;
  }
  if (from._internal_has_cell_refs()) {
    cell_refs_ = new ::TSCE::InternalCellRefSetArchive(*from.cell_refs_);
  } else {
    cell_refs_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSCE.GroupByNodeMapArchive.CellRefsForGroupNode)
}

void GroupByNodeMapArchive_CellRefsForGroupNode::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&group_node_uid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cell_refs_) -
    reinterpret_cast<char*>(&group_node_uid_)) + sizeof(cell_refs_));
}

GroupByNodeMapArchive_CellRefsForGroupNode::~GroupByNodeMapArchive_CellRefsForGroupNode() {
  // @@protoc_insertion_point(destructor:TSCE.GroupByNodeMapArchive.CellRefsForGroupNode)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GroupByNodeMapArchive_CellRefsForGroupNode::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete group_node_uid_;
  if (this != internal_default_instance()) delete cell_refs_;
}

void GroupByNodeMapArchive_CellRefsForGroupNode::ArenaDtor(void* object) {
  GroupByNodeMapArchive_CellRefsForGroupNode* _this = reinterpret_cast< GroupByNodeMapArchive_CellRefsForGroupNode* >(object);
  (void)_this;
}
void GroupByNodeMapArchive_CellRefsForGroupNode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GroupByNodeMapArchive_CellRefsForGroupNode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GroupByNodeMapArchive_CellRefsForGroupNode::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.GroupByNodeMapArchive.CellRefsForGroupNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(group_node_uid_ != nullptr);
      group_node_uid_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(cell_refs_ != nullptr);
      cell_refs_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GroupByNodeMapArchive_CellRefsForGroupNode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.UUID group_node_uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_group_node_uid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCE.InternalCellRefSetArchive cell_refs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell_refs(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GroupByNodeMapArchive_CellRefsForGroupNode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.GroupByNodeMapArchive.CellRefsForGroupNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSP.UUID group_node_uid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::group_node_uid(this), target, stream);
  }

  // optional .TSCE.InternalCellRefSetArchive cell_refs = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::cell_refs(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.GroupByNodeMapArchive.CellRefsForGroupNode)
  return target;
}

size_t GroupByNodeMapArchive_CellRefsForGroupNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.GroupByNodeMapArchive.CellRefsForGroupNode)
  size_t total_size = 0;

  // required .TSP.UUID group_node_uid = 1;
  if (_internal_has_group_node_uid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *group_node_uid_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSCE.InternalCellRefSetArchive cell_refs = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cell_refs_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GroupByNodeMapArchive_CellRefsForGroupNode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.GroupByNodeMapArchive.CellRefsForGroupNode)
  GOOGLE_DCHECK_NE(&from, this);
  const GroupByNodeMapArchive_CellRefsForGroupNode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GroupByNodeMapArchive_CellRefsForGroupNode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.GroupByNodeMapArchive.CellRefsForGroupNode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.GroupByNodeMapArchive.CellRefsForGroupNode)
    MergeFrom(*source);
  }
}

void GroupByNodeMapArchive_CellRefsForGroupNode::MergeFrom(const GroupByNodeMapArchive_CellRefsForGroupNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.GroupByNodeMapArchive.CellRefsForGroupNode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_group_node_uid()->::TSP::UUID::MergeFrom(from._internal_group_node_uid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_cell_refs()->::TSCE::InternalCellRefSetArchive::MergeFrom(from._internal_cell_refs());
    }
  }
}

void GroupByNodeMapArchive_CellRefsForGroupNode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.GroupByNodeMapArchive.CellRefsForGroupNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupByNodeMapArchive_CellRefsForGroupNode::CopyFrom(const GroupByNodeMapArchive_CellRefsForGroupNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.GroupByNodeMapArchive.CellRefsForGroupNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupByNodeMapArchive_CellRefsForGroupNode::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_group_node_uid()) {
    if (!group_node_uid_->IsInitialized()) return false;
  }
  if (_internal_has_cell_refs()) {
    if (!cell_refs_->IsInitialized()) return false;
  }
  return true;
}

void GroupByNodeMapArchive_CellRefsForGroupNode::InternalSwap(GroupByNodeMapArchive_CellRefsForGroupNode* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GroupByNodeMapArchive_CellRefsForGroupNode, cell_refs_)
      + sizeof(GroupByNodeMapArchive_CellRefsForGroupNode::cell_refs_)
      - PROTOBUF_FIELD_OFFSET(GroupByNodeMapArchive_CellRefsForGroupNode, group_node_uid_)>(
          reinterpret_cast<char*>(&group_node_uid_),
          reinterpret_cast<char*>(&other->group_node_uid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GroupByNodeMapArchive_CellRefsForGroupNode::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[77]);
}

// ===================================================================

class GroupByNodeMapArchive_GroupNodesForGroupBy::_Internal {
 public:
  using HasBits = decltype(std::declval<GroupByNodeMapArchive_GroupNodesForGroupBy>()._has_bits_);
  static const ::TSP::UUID& group_by_uid(const GroupByNodeMapArchive_GroupNodesForGroupBy* msg);
  static void set_has_group_by_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSP::UUID&
GroupByNodeMapArchive_GroupNodesForGroupBy::_Internal::group_by_uid(const GroupByNodeMapArchive_GroupNodesForGroupBy* msg) {
  return *msg->group_by_uid_;
}
void GroupByNodeMapArchive_GroupNodesForGroupBy::clear_group_by_uid() {
  if (group_by_uid_ != nullptr) group_by_uid_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
GroupByNodeMapArchive_GroupNodesForGroupBy::GroupByNodeMapArchive_GroupNodesForGroupBy(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  refs_for_group_node_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.GroupByNodeMapArchive.GroupNodesForGroupBy)
}
GroupByNodeMapArchive_GroupNodesForGroupBy::GroupByNodeMapArchive_GroupNodesForGroupBy(const GroupByNodeMapArchive_GroupNodesForGroupBy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      refs_for_group_node_(from.refs_for_group_node_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_group_by_uid()) {
    group_by_uid_ = new ::TSP::UUID(*from.group_by_uid_);
  } else {
    group_by_uid_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSCE.GroupByNodeMapArchive.GroupNodesForGroupBy)
}

void GroupByNodeMapArchive_GroupNodesForGroupBy::SharedCtor() {
group_by_uid_ = nullptr;
}

GroupByNodeMapArchive_GroupNodesForGroupBy::~GroupByNodeMapArchive_GroupNodesForGroupBy() {
  // @@protoc_insertion_point(destructor:TSCE.GroupByNodeMapArchive.GroupNodesForGroupBy)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GroupByNodeMapArchive_GroupNodesForGroupBy::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete group_by_uid_;
}

void GroupByNodeMapArchive_GroupNodesForGroupBy::ArenaDtor(void* object) {
  GroupByNodeMapArchive_GroupNodesForGroupBy* _this = reinterpret_cast< GroupByNodeMapArchive_GroupNodesForGroupBy* >(object);
  (void)_this;
}
void GroupByNodeMapArchive_GroupNodesForGroupBy::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GroupByNodeMapArchive_GroupNodesForGroupBy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GroupByNodeMapArchive_GroupNodesForGroupBy::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.GroupByNodeMapArchive.GroupNodesForGroupBy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  refs_for_group_node_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(group_by_uid_ != nullptr);
    group_by_uid_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GroupByNodeMapArchive_GroupNodesForGroupBy::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.UUID group_by_uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_group_by_uid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSCE.GroupByNodeMapArchive.CellRefsForGroupNode refs_for_group_node = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_refs_for_group_node(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GroupByNodeMapArchive_GroupNodesForGroupBy::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.GroupByNodeMapArchive.GroupNodesForGroupBy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSP.UUID group_by_uid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::group_by_uid(this), target, stream);
  }

  // repeated .TSCE.GroupByNodeMapArchive.CellRefsForGroupNode refs_for_group_node = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_refs_for_group_node_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_refs_for_group_node(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.GroupByNodeMapArchive.GroupNodesForGroupBy)
  return target;
}

size_t GroupByNodeMapArchive_GroupNodesForGroupBy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.GroupByNodeMapArchive.GroupNodesForGroupBy)
  size_t total_size = 0;

  // required .TSP.UUID group_by_uid = 1;
  if (_internal_has_group_by_uid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *group_by_uid_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.GroupByNodeMapArchive.CellRefsForGroupNode refs_for_group_node = 2;
  total_size += 1UL * this->_internal_refs_for_group_node_size();
  for (const auto& msg : this->refs_for_group_node_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GroupByNodeMapArchive_GroupNodesForGroupBy::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.GroupByNodeMapArchive.GroupNodesForGroupBy)
  GOOGLE_DCHECK_NE(&from, this);
  const GroupByNodeMapArchive_GroupNodesForGroupBy* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GroupByNodeMapArchive_GroupNodesForGroupBy>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.GroupByNodeMapArchive.GroupNodesForGroupBy)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.GroupByNodeMapArchive.GroupNodesForGroupBy)
    MergeFrom(*source);
  }
}

void GroupByNodeMapArchive_GroupNodesForGroupBy::MergeFrom(const GroupByNodeMapArchive_GroupNodesForGroupBy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.GroupByNodeMapArchive.GroupNodesForGroupBy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  refs_for_group_node_.MergeFrom(from.refs_for_group_node_);
  if (from._internal_has_group_by_uid()) {
    _internal_mutable_group_by_uid()->::TSP::UUID::MergeFrom(from._internal_group_by_uid());
  }
}

void GroupByNodeMapArchive_GroupNodesForGroupBy::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.GroupByNodeMapArchive.GroupNodesForGroupBy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupByNodeMapArchive_GroupNodesForGroupBy::CopyFrom(const GroupByNodeMapArchive_GroupNodesForGroupBy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.GroupByNodeMapArchive.GroupNodesForGroupBy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupByNodeMapArchive_GroupNodesForGroupBy::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(refs_for_group_node_)) return false;
  if (_internal_has_group_by_uid()) {
    if (!group_by_uid_->IsInitialized()) return false;
  }
  return true;
}

void GroupByNodeMapArchive_GroupNodesForGroupBy::InternalSwap(GroupByNodeMapArchive_GroupNodesForGroupBy* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  refs_for_group_node_.InternalSwap(&other->refs_for_group_node_);
  swap(group_by_uid_, other->group_by_uid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GroupByNodeMapArchive_GroupNodesForGroupBy::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[78]);
}

// ===================================================================

class GroupByNodeMapArchive::_Internal {
 public:
};

GroupByNodeMapArchive::GroupByNodeMapArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  refs_for_group_by_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.GroupByNodeMapArchive)
}
GroupByNodeMapArchive::GroupByNodeMapArchive(const GroupByNodeMapArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      refs_for_group_by_(from.refs_for_group_by_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSCE.GroupByNodeMapArchive)
}

void GroupByNodeMapArchive::SharedCtor() {
}

GroupByNodeMapArchive::~GroupByNodeMapArchive() {
  // @@protoc_insertion_point(destructor:TSCE.GroupByNodeMapArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GroupByNodeMapArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GroupByNodeMapArchive::ArenaDtor(void* object) {
  GroupByNodeMapArchive* _this = reinterpret_cast< GroupByNodeMapArchive* >(object);
  (void)_this;
}
void GroupByNodeMapArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GroupByNodeMapArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GroupByNodeMapArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.GroupByNodeMapArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  refs_for_group_by_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GroupByNodeMapArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSCE.GroupByNodeMapArchive.GroupNodesForGroupBy refs_for_group_by = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_refs_for_group_by(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GroupByNodeMapArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.GroupByNodeMapArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSCE.GroupByNodeMapArchive.GroupNodesForGroupBy refs_for_group_by = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_refs_for_group_by_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_refs_for_group_by(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.GroupByNodeMapArchive)
  return target;
}

size_t GroupByNodeMapArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.GroupByNodeMapArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.GroupByNodeMapArchive.GroupNodesForGroupBy refs_for_group_by = 1;
  total_size += 1UL * this->_internal_refs_for_group_by_size();
  for (const auto& msg : this->refs_for_group_by_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GroupByNodeMapArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.GroupByNodeMapArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const GroupByNodeMapArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GroupByNodeMapArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.GroupByNodeMapArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.GroupByNodeMapArchive)
    MergeFrom(*source);
  }
}

void GroupByNodeMapArchive::MergeFrom(const GroupByNodeMapArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.GroupByNodeMapArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  refs_for_group_by_.MergeFrom(from.refs_for_group_by_);
}

void GroupByNodeMapArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.GroupByNodeMapArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupByNodeMapArchive::CopyFrom(const GroupByNodeMapArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.GroupByNodeMapArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupByNodeMapArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(refs_for_group_by_)) return false;
  return true;
}

void GroupByNodeMapArchive::InternalSwap(GroupByNodeMapArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  refs_for_group_by_.InternalSwap(&other->refs_for_group_by_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GroupByNodeMapArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[79]);
}

// ===================================================================

class CalculationEngineArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CalculationEngineArchive>()._has_bits_);
  static void set_has_base_date_1904(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::TSCE::DependencyTrackerArchive& dependency_tracker(const CalculationEngineArchive* msg);
  static void set_has_dependency_tracker(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::Reference& named_reference_manager(const CalculationEngineArchive* msg);
  static void set_has_named_reference_manager(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_excel_import_date_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_saved_locale_identifier_for_4_2(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_document_random_seed(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::TSCE::UuidReferenceMapArchive& uuid_reference_map(const CalculationEngineArchive* msg);
  static void set_has_uuid_reference_map(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_document_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_document_timezone(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSCE::RewriteTableUIDInfoArchive& table_uid_history(const CalculationEngineArchive* msg);
  static void set_has_table_uid_history(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSP::Reference& remote_data_store(const CalculationEngineArchive* msg);
  static void set_has_remote_data_store(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::TSCE::GroupByNodeMapArchive& group_node_map(const CalculationEngineArchive* msg);
  static void set_has_group_node_map(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::TSP::Reference& header_name_manager(const CalculationEngineArchive* msg);
  static void set_has_header_name_manager(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::TSP::Reference& refs_to_dirty(const CalculationEngineArchive* msg);
  static void set_has_refs_to_dirty(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_saved_locale_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000008) ^ 0x00000008) != 0;
  }
};

const ::TSCE::DependencyTrackerArchive&
CalculationEngineArchive::_Internal::dependency_tracker(const CalculationEngineArchive* msg) {
  return *msg->dependency_tracker_;
}
const ::TSP::Reference&
CalculationEngineArchive::_Internal::named_reference_manager(const CalculationEngineArchive* msg) {
  return *msg->named_reference_manager_;
}
const ::TSCE::UuidReferenceMapArchive&
CalculationEngineArchive::_Internal::uuid_reference_map(const CalculationEngineArchive* msg) {
  return *msg->uuid_reference_map_;
}
const ::TSCE::RewriteTableUIDInfoArchive&
CalculationEngineArchive::_Internal::table_uid_history(const CalculationEngineArchive* msg) {
  return *msg->table_uid_history_;
}
const ::TSP::Reference&
CalculationEngineArchive::_Internal::remote_data_store(const CalculationEngineArchive* msg) {
  return *msg->remote_data_store_;
}
const ::TSCE::GroupByNodeMapArchive&
CalculationEngineArchive::_Internal::group_node_map(const CalculationEngineArchive* msg) {
  return *msg->group_node_map_;
}
const ::TSP::Reference&
CalculationEngineArchive::_Internal::header_name_manager(const CalculationEngineArchive* msg) {
  return *msg->header_name_manager_;
}
const ::TSP::Reference&
CalculationEngineArchive::_Internal::refs_to_dirty(const CalculationEngineArchive* msg) {
  return *msg->refs_to_dirty_;
}
void CalculationEngineArchive::clear_named_reference_manager() {
  if (named_reference_manager_ != nullptr) named_reference_manager_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void CalculationEngineArchive::clear_remote_data_store() {
  if (remote_data_store_ != nullptr) remote_data_store_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
void CalculationEngineArchive::clear_header_name_manager() {
  if (header_name_manager_ != nullptr) header_name_manager_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
void CalculationEngineArchive::clear_refs_to_dirty() {
  if (refs_to_dirty_ != nullptr) refs_to_dirty_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
void CalculationEngineArchive::clear_begin_tracking_names_legacy_nrm() {
  begin_tracking_names_legacy_nrm_.Clear();
}
void CalculationEngineArchive::clear_end_tracking_names_legacy_nrm() {
  end_tracking_names_legacy_nrm_.Clear();
}
CalculationEngineArchive::CalculationEngineArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  begin_tracking_names_legacy_nrm_(arena),
  end_tracking_names_legacy_nrm_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.CalculationEngineArchive)
}
CalculationEngineArchive::CalculationEngineArchive(const CalculationEngineArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      begin_tracking_names_legacy_nrm_(from.begin_tracking_names_legacy_nrm_),
      end_tracking_names_legacy_nrm_(from.end_tracking_names_legacy_nrm_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  saved_locale_identifier_for_4_2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_saved_locale_identifier_for_4_2()) {
    saved_locale_identifier_for_4_2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_saved_locale_identifier_for_4_2(), 
      GetArena());
  }
  document_timezone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_document_timezone()) {
    document_timezone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_document_timezone(), 
      GetArena());
  }
  saved_locale_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_saved_locale_identifier()) {
    saved_locale_identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_saved_locale_identifier(), 
      GetArena());
  }
  if (from._internal_has_dependency_tracker()) {
    dependency_tracker_ = new ::TSCE::DependencyTrackerArchive(*from.dependency_tracker_);
  } else {
    dependency_tracker_ = nullptr;
  }
  if (from._internal_has_named_reference_manager()) {
    named_reference_manager_ = new ::TSP::Reference(*from.named_reference_manager_);
  } else {
    named_reference_manager_ = nullptr;
  }
  if (from._internal_has_uuid_reference_map()) {
    uuid_reference_map_ = new ::TSCE::UuidReferenceMapArchive(*from.uuid_reference_map_);
  } else {
    uuid_reference_map_ = nullptr;
  }
  if (from._internal_has_table_uid_history()) {
    table_uid_history_ = new ::TSCE::RewriteTableUIDInfoArchive(*from.table_uid_history_);
  } else {
    table_uid_history_ = nullptr;
  }
  if (from._internal_has_remote_data_store()) {
    remote_data_store_ = new ::TSP::Reference(*from.remote_data_store_);
  } else {
    remote_data_store_ = nullptr;
  }
  if (from._internal_has_group_node_map()) {
    group_node_map_ = new ::TSCE::GroupByNodeMapArchive(*from.group_node_map_);
  } else {
    group_node_map_ = nullptr;
  }
  if (from._internal_has_header_name_manager()) {
    header_name_manager_ = new ::TSP::Reference(*from.header_name_manager_);
  } else {
    header_name_manager_ = nullptr;
  }
  if (from._internal_has_refs_to_dirty()) {
    refs_to_dirty_ = new ::TSP::Reference(*from.refs_to_dirty_);
  } else {
    refs_to_dirty_ = nullptr;
  }
  ::memcpy(&document_random_seed_, &from.document_random_seed_,
    static_cast<size_t>(reinterpret_cast<char*>(&excel_import_date_mode_) -
    reinterpret_cast<char*>(&document_random_seed_)) + sizeof(excel_import_date_mode_));
  // @@protoc_insertion_point(copy_constructor:TSCE.CalculationEngineArchive)
}

void CalculationEngineArchive::SharedCtor() {
saved_locale_identifier_for_4_2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
document_timezone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
saved_locale_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&dependency_tracker_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&base_date_1904_) -
    reinterpret_cast<char*>(&dependency_tracker_)) + sizeof(base_date_1904_));
excel_import_date_mode_ = 1;
}

CalculationEngineArchive::~CalculationEngineArchive() {
  // @@protoc_insertion_point(destructor:TSCE.CalculationEngineArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CalculationEngineArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  saved_locale_identifier_for_4_2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  document_timezone_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  saved_locale_identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete dependency_tracker_;
  if (this != internal_default_instance()) delete named_reference_manager_;
  if (this != internal_default_instance()) delete uuid_reference_map_;
  if (this != internal_default_instance()) delete table_uid_history_;
  if (this != internal_default_instance()) delete remote_data_store_;
  if (this != internal_default_instance()) delete group_node_map_;
  if (this != internal_default_instance()) delete header_name_manager_;
  if (this != internal_default_instance()) delete refs_to_dirty_;
}

void CalculationEngineArchive::ArenaDtor(void* object) {
  CalculationEngineArchive* _this = reinterpret_cast< CalculationEngineArchive* >(object);
  (void)_this;
}
void CalculationEngineArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CalculationEngineArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CalculationEngineArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.CalculationEngineArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  begin_tracking_names_legacy_nrm_.Clear();
  end_tracking_names_legacy_nrm_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      saved_locale_identifier_for_4_2_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      document_timezone_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      saved_locale_identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(dependency_tracker_ != nullptr);
      dependency_tracker_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(named_reference_manager_ != nullptr);
      named_reference_manager_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(uuid_reference_map_ != nullptr);
      uuid_reference_map_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(table_uid_history_ != nullptr);
      table_uid_history_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(remote_data_store_ != nullptr);
      remote_data_store_->Clear();
    }
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(group_node_map_ != nullptr);
      group_node_map_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(header_name_manager_ != nullptr);
      header_name_manager_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(refs_to_dirty_ != nullptr);
      refs_to_dirty_->Clear();
    }
  }
  if (cached_has_bits & 0x00007800u) {
    ::memset(&document_random_seed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&base_date_1904_) -
        reinterpret_cast<char*>(&document_random_seed_)) + sizeof(base_date_1904_));
    excel_import_date_mode_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CalculationEngineArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool base_date_1904 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_base_date_1904(&has_bits);
          base_date_1904_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSCE.DependencyTrackerArchive dependency_tracker = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_dependency_tracker(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference named_reference_manager = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_named_reference_manager(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCE.CalculationEngineArchive.ExcelImportDateMode excel_import_date_mode = 4 [default = DATE_MODE_1900];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSCE::CalculationEngineArchive_ExcelImportDateMode_IsValid(val))) {
            _internal_set_excel_import_date_mode(static_cast<::TSCE::CalculationEngineArchive_ExcelImportDateMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string saved_locale_identifier_for_4_2 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_saved_locale_identifier_for_4_2();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSCE.CalculationEngineArchive.saved_locale_identifier_for_4_2");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 document_random_seed = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_document_random_seed(&has_bits);
          document_random_seed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCE.UuidReferenceMapArchive uuid_reference_map = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_uuid_reference_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double document_timestamp = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_document_timestamp(&has_bits);
          document_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional string document_timezone = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_document_timezone();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSCE.CalculationEngineArchive.document_timezone");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCE.RewriteTableUIDInfoArchive table_uid_history = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_uid_history(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference remote_data_store = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_remote_data_store(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCE.GroupByNodeMapArchive group_node_map = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_group_node_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference header_name_manager = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_header_name_manager(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference refs_to_dirty = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_refs_to_dirty(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string saved_locale_identifier = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_saved_locale_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSCE.CalculationEngineArchive.saved_locale_identifier");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.UUID begin_tracking_names_legacy_nrm = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_begin_tracking_names_legacy_nrm(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSP.UUID end_tracking_names_legacy_nrm = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_end_tracking_names_legacy_nrm(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CalculationEngineArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.CalculationEngineArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool base_date_1904 = 1;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_base_date_1904(), target);
  }

  // required .TSCE.DependencyTrackerArchive dependency_tracker = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::dependency_tracker(this), target, stream);
  }

  // optional .TSP.Reference named_reference_manager = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::named_reference_manager(this), target, stream);
  }

  // optional .TSCE.CalculationEngineArchive.ExcelImportDateMode excel_import_date_mode = 4 [default = DATE_MODE_1900];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_excel_import_date_mode(), target);
  }

  // optional string saved_locale_identifier_for_4_2 = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_saved_locale_identifier_for_4_2().data(), static_cast<int>(this->_internal_saved_locale_identifier_for_4_2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCE.CalculationEngineArchive.saved_locale_identifier_for_4_2");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_saved_locale_identifier_for_4_2(), target);
  }

  // optional uint64 document_random_seed = 6;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_document_random_seed(), target);
  }

  // optional .TSCE.UuidReferenceMapArchive uuid_reference_map = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::uuid_reference_map(this), target, stream);
  }

  // optional double document_timestamp = 9;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_document_timestamp(), target);
  }

  // optional string document_timezone = 10;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_document_timezone().data(), static_cast<int>(this->_internal_document_timezone().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCE.CalculationEngineArchive.document_timezone");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_document_timezone(), target);
  }

  // optional .TSCE.RewriteTableUIDInfoArchive table_uid_history = 11;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::table_uid_history(this), target, stream);
  }

  // optional .TSP.Reference remote_data_store = 12;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::remote_data_store(this), target, stream);
  }

  // optional .TSCE.GroupByNodeMapArchive group_node_map = 13;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::group_node_map(this), target, stream);
  }

  // optional .TSP.Reference header_name_manager = 14;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::header_name_manager(this), target, stream);
  }

  // optional .TSP.Reference refs_to_dirty = 15;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::refs_to_dirty(this), target, stream);
  }

  // optional string saved_locale_identifier = 16;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_saved_locale_identifier().data(), static_cast<int>(this->_internal_saved_locale_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCE.CalculationEngineArchive.saved_locale_identifier");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_saved_locale_identifier(), target);
  }

  // repeated .TSP.UUID begin_tracking_names_legacy_nrm = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_begin_tracking_names_legacy_nrm_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, this->_internal_begin_tracking_names_legacy_nrm(i), target, stream);
  }

  // repeated .TSP.UUID end_tracking_names_legacy_nrm = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_end_tracking_names_legacy_nrm_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, this->_internal_end_tracking_names_legacy_nrm(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.CalculationEngineArchive)
  return target;
}

size_t CalculationEngineArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.CalculationEngineArchive)
  size_t total_size = 0;

  // required .TSCE.DependencyTrackerArchive dependency_tracker = 2;
  if (_internal_has_dependency_tracker()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dependency_tracker_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.UUID begin_tracking_names_legacy_nrm = 17;
  total_size += 2UL * this->_internal_begin_tracking_names_legacy_nrm_size();
  for (const auto& msg : this->begin_tracking_names_legacy_nrm_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.UUID end_tracking_names_legacy_nrm = 18;
  total_size += 2UL * this->_internal_end_tracking_names_legacy_nrm_size();
  for (const auto& msg : this->end_tracking_names_legacy_nrm_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string saved_locale_identifier_for_4_2 = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_saved_locale_identifier_for_4_2());
    }

    // optional string document_timezone = 10;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_document_timezone());
    }

    // optional string saved_locale_identifier = 16;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_saved_locale_identifier());
    }

  }
  if (cached_has_bits & 0x000000f0u) {
    // optional .TSP.Reference named_reference_manager = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *named_reference_manager_);
    }

    // optional .TSCE.UuidReferenceMapArchive uuid_reference_map = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *uuid_reference_map_);
    }

    // optional .TSCE.RewriteTableUIDInfoArchive table_uid_history = 11;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *table_uid_history_);
    }

    // optional .TSP.Reference remote_data_store = 12;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *remote_data_store_);
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // optional .TSCE.GroupByNodeMapArchive group_node_map = 13;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *group_node_map_);
    }

    // optional .TSP.Reference header_name_manager = 14;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_name_manager_);
    }

    // optional .TSP.Reference refs_to_dirty = 15;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *refs_to_dirty_);
    }

    // optional uint64 document_random_seed = 6;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_document_random_seed());
    }

    // optional double document_timestamp = 9;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 8;
    }

    // optional bool base_date_1904 = 1;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

    // optional .TSCE.CalculationEngineArchive.ExcelImportDateMode excel_import_date_mode = 4 [default = DATE_MODE_1900];
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_excel_import_date_mode());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CalculationEngineArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.CalculationEngineArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const CalculationEngineArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CalculationEngineArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.CalculationEngineArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.CalculationEngineArchive)
    MergeFrom(*source);
  }
}

void CalculationEngineArchive::MergeFrom(const CalculationEngineArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.CalculationEngineArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  begin_tracking_names_legacy_nrm_.MergeFrom(from.begin_tracking_names_legacy_nrm_);
  end_tracking_names_legacy_nrm_.MergeFrom(from.end_tracking_names_legacy_nrm_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_saved_locale_identifier_for_4_2(from._internal_saved_locale_identifier_for_4_2());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_document_timezone(from._internal_document_timezone());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_saved_locale_identifier(from._internal_saved_locale_identifier());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_dependency_tracker()->::TSCE::DependencyTrackerArchive::MergeFrom(from._internal_dependency_tracker());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_named_reference_manager()->::TSP::Reference::MergeFrom(from._internal_named_reference_manager());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_uuid_reference_map()->::TSCE::UuidReferenceMapArchive::MergeFrom(from._internal_uuid_reference_map());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_table_uid_history()->::TSCE::RewriteTableUIDInfoArchive::MergeFrom(from._internal_table_uid_history());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_remote_data_store()->::TSP::Reference::MergeFrom(from._internal_remote_data_store());
    }
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_group_node_map()->::TSCE::GroupByNodeMapArchive::MergeFrom(from._internal_group_node_map());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_header_name_manager()->::TSP::Reference::MergeFrom(from._internal_header_name_manager());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_refs_to_dirty()->::TSP::Reference::MergeFrom(from._internal_refs_to_dirty());
    }
    if (cached_has_bits & 0x00000800u) {
      document_random_seed_ = from.document_random_seed_;
    }
    if (cached_has_bits & 0x00001000u) {
      document_timestamp_ = from.document_timestamp_;
    }
    if (cached_has_bits & 0x00002000u) {
      base_date_1904_ = from.base_date_1904_;
    }
    if (cached_has_bits & 0x00004000u) {
      excel_import_date_mode_ = from.excel_import_date_mode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CalculationEngineArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.CalculationEngineArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CalculationEngineArchive::CopyFrom(const CalculationEngineArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.CalculationEngineArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CalculationEngineArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(begin_tracking_names_legacy_nrm_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(end_tracking_names_legacy_nrm_)) return false;
  if (_internal_has_dependency_tracker()) {
    if (!dependency_tracker_->IsInitialized()) return false;
  }
  if (_internal_has_named_reference_manager()) {
    if (!named_reference_manager_->IsInitialized()) return false;
  }
  if (_internal_has_uuid_reference_map()) {
    if (!uuid_reference_map_->IsInitialized()) return false;
  }
  if (_internal_has_table_uid_history()) {
    if (!table_uid_history_->IsInitialized()) return false;
  }
  if (_internal_has_remote_data_store()) {
    if (!remote_data_store_->IsInitialized()) return false;
  }
  if (_internal_has_group_node_map()) {
    if (!group_node_map_->IsInitialized()) return false;
  }
  if (_internal_has_header_name_manager()) {
    if (!header_name_manager_->IsInitialized()) return false;
  }
  if (_internal_has_refs_to_dirty()) {
    if (!refs_to_dirty_->IsInitialized()) return false;
  }
  return true;
}

void CalculationEngineArchive::InternalSwap(CalculationEngineArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  begin_tracking_names_legacy_nrm_.InternalSwap(&other->begin_tracking_names_legacy_nrm_);
  end_tracking_names_legacy_nrm_.InternalSwap(&other->end_tracking_names_legacy_nrm_);
  saved_locale_identifier_for_4_2_.Swap(&other->saved_locale_identifier_for_4_2_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  document_timezone_.Swap(&other->document_timezone_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  saved_locale_identifier_.Swap(&other->saved_locale_identifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CalculationEngineArchive, base_date_1904_)
      + sizeof(CalculationEngineArchive::base_date_1904_)
      - PROTOBUF_FIELD_OFFSET(CalculationEngineArchive, dependency_tracker_)>(
          reinterpret_cast<char*>(&dependency_tracker_),
          reinterpret_cast<char*>(&other->dependency_tracker_));
  swap(excel_import_date_mode_, other->excel_import_date_mode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CalculationEngineArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[80]);
}

// ===================================================================

class PreserveColumnRowFlagsArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<PreserveColumnRowFlagsArchive>()._has_bits_);
  static void set_has_begin_row_is_absolute(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_begin_column_is_absolute(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_end_row_is_absolute(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_end_column_is_absolute(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

PreserveColumnRowFlagsArchive::PreserveColumnRowFlagsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.PreserveColumnRowFlagsArchive)
}
PreserveColumnRowFlagsArchive::PreserveColumnRowFlagsArchive(const PreserveColumnRowFlagsArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&begin_row_is_absolute_, &from.begin_row_is_absolute_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_column_is_absolute_) -
    reinterpret_cast<char*>(&begin_row_is_absolute_)) + sizeof(end_column_is_absolute_));
  // @@protoc_insertion_point(copy_constructor:TSCE.PreserveColumnRowFlagsArchive)
}

void PreserveColumnRowFlagsArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&begin_row_is_absolute_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&end_column_is_absolute_) -
    reinterpret_cast<char*>(&begin_row_is_absolute_)) + sizeof(end_column_is_absolute_));
}

PreserveColumnRowFlagsArchive::~PreserveColumnRowFlagsArchive() {
  // @@protoc_insertion_point(destructor:TSCE.PreserveColumnRowFlagsArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PreserveColumnRowFlagsArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PreserveColumnRowFlagsArchive::ArenaDtor(void* object) {
  PreserveColumnRowFlagsArchive* _this = reinterpret_cast< PreserveColumnRowFlagsArchive* >(object);
  (void)_this;
}
void PreserveColumnRowFlagsArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PreserveColumnRowFlagsArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PreserveColumnRowFlagsArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.PreserveColumnRowFlagsArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&begin_row_is_absolute_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_column_is_absolute_) -
      reinterpret_cast<char*>(&begin_row_is_absolute_)) + sizeof(end_column_is_absolute_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PreserveColumnRowFlagsArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bool begin_row_is_absolute = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_begin_row_is_absolute(&has_bits);
          begin_row_is_absolute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool begin_column_is_absolute = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_begin_column_is_absolute(&has_bits);
          begin_column_is_absolute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool end_row_is_absolute = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_end_row_is_absolute(&has_bits);
          end_row_is_absolute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool end_column_is_absolute = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_end_column_is_absolute(&has_bits);
          end_column_is_absolute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PreserveColumnRowFlagsArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.PreserveColumnRowFlagsArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool begin_row_is_absolute = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_begin_row_is_absolute(), target);
  }

  // required bool begin_column_is_absolute = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_begin_column_is_absolute(), target);
  }

  // optional bool end_row_is_absolute = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_end_row_is_absolute(), target);
  }

  // optional bool end_column_is_absolute = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_end_column_is_absolute(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.PreserveColumnRowFlagsArchive)
  return target;
}

size_t PreserveColumnRowFlagsArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.PreserveColumnRowFlagsArchive)
  size_t total_size = 0;

  if (_internal_has_begin_row_is_absolute()) {
    // required bool begin_row_is_absolute = 1;
    total_size += 1 + 1;
  }

  if (_internal_has_begin_column_is_absolute()) {
    // required bool begin_column_is_absolute = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t PreserveColumnRowFlagsArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.PreserveColumnRowFlagsArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bool begin_row_is_absolute = 1;
    total_size += 1 + 1;

    // required bool begin_column_is_absolute = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000cu) {
    // optional bool end_row_is_absolute = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool end_column_is_absolute = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PreserveColumnRowFlagsArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.PreserveColumnRowFlagsArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const PreserveColumnRowFlagsArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PreserveColumnRowFlagsArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.PreserveColumnRowFlagsArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.PreserveColumnRowFlagsArchive)
    MergeFrom(*source);
  }
}

void PreserveColumnRowFlagsArchive::MergeFrom(const PreserveColumnRowFlagsArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.PreserveColumnRowFlagsArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      begin_row_is_absolute_ = from.begin_row_is_absolute_;
    }
    if (cached_has_bits & 0x00000002u) {
      begin_column_is_absolute_ = from.begin_column_is_absolute_;
    }
    if (cached_has_bits & 0x00000004u) {
      end_row_is_absolute_ = from.end_row_is_absolute_;
    }
    if (cached_has_bits & 0x00000008u) {
      end_column_is_absolute_ = from.end_column_is_absolute_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PreserveColumnRowFlagsArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.PreserveColumnRowFlagsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PreserveColumnRowFlagsArchive::CopyFrom(const PreserveColumnRowFlagsArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.PreserveColumnRowFlagsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PreserveColumnRowFlagsArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void PreserveColumnRowFlagsArchive::InternalSwap(PreserveColumnRowFlagsArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PreserveColumnRowFlagsArchive, end_column_is_absolute_)
      + sizeof(PreserveColumnRowFlagsArchive::end_column_is_absolute_)
      - PROTOBUF_FIELD_OFFSET(PreserveColumnRowFlagsArchive, begin_row_is_absolute_)>(
          reinterpret_cast<char*>(&begin_row_is_absolute_),
          reinterpret_cast<char*>(&other->begin_row_is_absolute_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PreserveColumnRowFlagsArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[81]);
}

// ===================================================================

class CategoryReferenceArchive_CatRefUidList::_Internal {
 public:
};

void CategoryReferenceArchive_CatRefUidList::clear_uid() {
  uid_.Clear();
}
CategoryReferenceArchive_CatRefUidList::CategoryReferenceArchive_CatRefUidList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  uid_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.CategoryReferenceArchive.CatRefUidList)
}
CategoryReferenceArchive_CatRefUidList::CategoryReferenceArchive_CatRefUidList(const CategoryReferenceArchive_CatRefUidList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      uid_(from.uid_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSCE.CategoryReferenceArchive.CatRefUidList)
}

void CategoryReferenceArchive_CatRefUidList::SharedCtor() {
}

CategoryReferenceArchive_CatRefUidList::~CategoryReferenceArchive_CatRefUidList() {
  // @@protoc_insertion_point(destructor:TSCE.CategoryReferenceArchive.CatRefUidList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CategoryReferenceArchive_CatRefUidList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CategoryReferenceArchive_CatRefUidList::ArenaDtor(void* object) {
  CategoryReferenceArchive_CatRefUidList* _this = reinterpret_cast< CategoryReferenceArchive_CatRefUidList* >(object);
  (void)_this;
}
void CategoryReferenceArchive_CatRefUidList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CategoryReferenceArchive_CatRefUidList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CategoryReferenceArchive_CatRefUidList::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.CategoryReferenceArchive.CatRefUidList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uid_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CategoryReferenceArchive_CatRefUidList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSP.UUID uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_uid(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CategoryReferenceArchive_CatRefUidList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.CategoryReferenceArchive.CatRefUidList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSP.UUID uid = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_uid_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_uid(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.CategoryReferenceArchive.CatRefUidList)
  return target;
}

size_t CategoryReferenceArchive_CatRefUidList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.CategoryReferenceArchive.CatRefUidList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.UUID uid = 1;
  total_size += 1UL * this->_internal_uid_size();
  for (const auto& msg : this->uid_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CategoryReferenceArchive_CatRefUidList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.CategoryReferenceArchive.CatRefUidList)
  GOOGLE_DCHECK_NE(&from, this);
  const CategoryReferenceArchive_CatRefUidList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CategoryReferenceArchive_CatRefUidList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.CategoryReferenceArchive.CatRefUidList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.CategoryReferenceArchive.CatRefUidList)
    MergeFrom(*source);
  }
}

void CategoryReferenceArchive_CatRefUidList::MergeFrom(const CategoryReferenceArchive_CatRefUidList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.CategoryReferenceArchive.CatRefUidList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  uid_.MergeFrom(from.uid_);
}

void CategoryReferenceArchive_CatRefUidList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.CategoryReferenceArchive.CatRefUidList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CategoryReferenceArchive_CatRefUidList::CopyFrom(const CategoryReferenceArchive_CatRefUidList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.CategoryReferenceArchive.CatRefUidList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CategoryReferenceArchive_CatRefUidList::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(uid_)) return false;
  return true;
}

void CategoryReferenceArchive_CatRefUidList::InternalSwap(CategoryReferenceArchive_CatRefUidList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  uid_.InternalSwap(&other->uid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CategoryReferenceArchive_CatRefUidList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[82]);
}

// ===================================================================

class CategoryReferenceArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CategoryReferenceArchive>()._has_bits_);
  static const ::TSP::UUID& group_by_uid(const CategoryReferenceArchive* msg);
  static void set_has_group_by_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUID& column_uid(const CategoryReferenceArchive* msg);
  static void set_has_column_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_aggregate_type(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_group_level(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::TSCE::CategoryReferenceArchive_CatRefUidList& group_uids(const CategoryReferenceArchive* msg);
  static void set_has_group_uids(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSCE::PreserveColumnRowFlagsArchive& preserve_flags(const CategoryReferenceArchive* msg);
  static void set_has_preserve_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_relative_column(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::TSP::UUID& relative_group_uid(const CategoryReferenceArchive* msg);
  static void set_has_relative_group_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSP::UUID& absolute_group_uid(const CategoryReferenceArchive* msg);
  static void set_has_absolute_group_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000000c3) ^ 0x000000c3) != 0;
  }
};

const ::TSP::UUID&
CategoryReferenceArchive::_Internal::group_by_uid(const CategoryReferenceArchive* msg) {
  return *msg->group_by_uid_;
}
const ::TSP::UUID&
CategoryReferenceArchive::_Internal::column_uid(const CategoryReferenceArchive* msg) {
  return *msg->column_uid_;
}
const ::TSCE::CategoryReferenceArchive_CatRefUidList&
CategoryReferenceArchive::_Internal::group_uids(const CategoryReferenceArchive* msg) {
  return *msg->group_uids_;
}
const ::TSCE::PreserveColumnRowFlagsArchive&
CategoryReferenceArchive::_Internal::preserve_flags(const CategoryReferenceArchive* msg) {
  return *msg->preserve_flags_;
}
const ::TSP::UUID&
CategoryReferenceArchive::_Internal::relative_group_uid(const CategoryReferenceArchive* msg) {
  return *msg->relative_group_uid_;
}
const ::TSP::UUID&
CategoryReferenceArchive::_Internal::absolute_group_uid(const CategoryReferenceArchive* msg) {
  return *msg->absolute_group_uid_;
}
void CategoryReferenceArchive::clear_group_by_uid() {
  if (group_by_uid_ != nullptr) group_by_uid_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CategoryReferenceArchive::clear_column_uid() {
  if (column_uid_ != nullptr) column_uid_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CategoryReferenceArchive::clear_relative_group_uid() {
  if (relative_group_uid_ != nullptr) relative_group_uid_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void CategoryReferenceArchive::clear_absolute_group_uid() {
  if (absolute_group_uid_ != nullptr) absolute_group_uid_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
CategoryReferenceArchive::CategoryReferenceArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.CategoryReferenceArchive)
}
CategoryReferenceArchive::CategoryReferenceArchive(const CategoryReferenceArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_group_by_uid()) {
    group_by_uid_ = new ::TSP::UUID(*from.group_by_uid_);
  } else {
    group_by_uid_ = nullptr;
  }
  if (from._internal_has_column_uid()) {
    column_uid_ = new ::TSP::UUID(*from.column_uid_);
  } else {
    column_uid_ = nullptr;
  }
  if (from._internal_has_group_uids()) {
    group_uids_ = new ::TSCE::CategoryReferenceArchive_CatRefUidList(*from.group_uids_);
  } else {
    group_uids_ = nullptr;
  }
  if (from._internal_has_preserve_flags()) {
    preserve_flags_ = new ::TSCE::PreserveColumnRowFlagsArchive(*from.preserve_flags_);
  } else {
    preserve_flags_ = nullptr;
  }
  if (from._internal_has_relative_group_uid()) {
    relative_group_uid_ = new ::TSP::UUID(*from.relative_group_uid_);
  } else {
    relative_group_uid_ = nullptr;
  }
  if (from._internal_has_absolute_group_uid()) {
    absolute_group_uid_ = new ::TSP::UUID(*from.absolute_group_uid_);
  } else {
    absolute_group_uid_ = nullptr;
  }
  ::memcpy(&aggregate_type_, &from.aggregate_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&relative_column_) -
    reinterpret_cast<char*>(&aggregate_type_)) + sizeof(relative_column_));
  // @@protoc_insertion_point(copy_constructor:TSCE.CategoryReferenceArchive)
}

void CategoryReferenceArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&group_by_uid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&relative_column_) -
    reinterpret_cast<char*>(&group_by_uid_)) + sizeof(relative_column_));
}

CategoryReferenceArchive::~CategoryReferenceArchive() {
  // @@protoc_insertion_point(destructor:TSCE.CategoryReferenceArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CategoryReferenceArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete group_by_uid_;
  if (this != internal_default_instance()) delete column_uid_;
  if (this != internal_default_instance()) delete group_uids_;
  if (this != internal_default_instance()) delete preserve_flags_;
  if (this != internal_default_instance()) delete relative_group_uid_;
  if (this != internal_default_instance()) delete absolute_group_uid_;
}

void CategoryReferenceArchive::ArenaDtor(void* object) {
  CategoryReferenceArchive* _this = reinterpret_cast< CategoryReferenceArchive* >(object);
  (void)_this;
}
void CategoryReferenceArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CategoryReferenceArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CategoryReferenceArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.CategoryReferenceArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(group_by_uid_ != nullptr);
      group_by_uid_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(column_uid_ != nullptr);
      column_uid_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(group_uids_ != nullptr);
      group_uids_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(preserve_flags_ != nullptr);
      preserve_flags_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(relative_group_uid_ != nullptr);
      relative_group_uid_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(absolute_group_uid_ != nullptr);
      absolute_group_uid_->Clear();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&aggregate_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&group_level_) -
        reinterpret_cast<char*>(&aggregate_type_)) + sizeof(group_level_));
  }
  relative_column_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CategoryReferenceArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.UUID group_by_uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_group_by_uid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.UUID column_uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_column_uid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSCE.CategoryAggType aggregate_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSCE::CategoryAggType_IsValid(val))) {
            _internal_set_aggregate_type(static_cast<::TSCE::CategoryAggType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required sint32 group_level = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_group_level(&has_bits);
          group_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCE.CategoryReferenceArchive.CatRefUidList group_uids = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_group_uids(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCE.PreserveColumnRowFlagsArchive preserve_flags = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_preserve_flags(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 relative_column = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_relative_column(&has_bits);
          relative_column_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.UUID relative_group_uid = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_relative_group_uid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.UUID absolute_group_uid = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_absolute_group_uid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CategoryReferenceArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.CategoryReferenceArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSP.UUID group_by_uid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::group_by_uid(this), target, stream);
  }

  // required .TSP.UUID column_uid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::column_uid(this), target, stream);
  }

  // required .TSCE.CategoryAggType aggregate_type = 3;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_aggregate_type(), target);
  }

  // required sint32 group_level = 4;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(4, this->_internal_group_level(), target);
  }

  // optional .TSCE.CategoryReferenceArchive.CatRefUidList group_uids = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::group_uids(this), target, stream);
  }

  // optional .TSCE.PreserveColumnRowFlagsArchive preserve_flags = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::preserve_flags(this), target, stream);
  }

  // optional int32 relative_column = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_relative_column(), target);
  }

  // optional .TSP.UUID relative_group_uid = 9;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::relative_group_uid(this), target, stream);
  }

  // optional .TSP.UUID absolute_group_uid = 10;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::absolute_group_uid(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.CategoryReferenceArchive)
  return target;
}

size_t CategoryReferenceArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.CategoryReferenceArchive)
  size_t total_size = 0;

  if (_internal_has_group_by_uid()) {
    // required .TSP.UUID group_by_uid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *group_by_uid_);
  }

  if (_internal_has_column_uid()) {
    // required .TSP.UUID column_uid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *column_uid_);
  }

  if (_internal_has_aggregate_type()) {
    // required .TSCE.CategoryAggType aggregate_type = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_aggregate_type());
  }

  if (_internal_has_group_level()) {
    // required sint32 group_level = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_group_level());
  }

  return total_size;
}
size_t CategoryReferenceArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.CategoryReferenceArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x000000c3) ^ 0x000000c3) == 0) {  // All required fields are present.
    // required .TSP.UUID group_by_uid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *group_by_uid_);

    // required .TSP.UUID column_uid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *column_uid_);

    // required .TSCE.CategoryAggType aggregate_type = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_aggregate_type());

    // required sint32 group_level = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_group_level());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003cu) {
    // optional .TSCE.CategoryReferenceArchive.CatRefUidList group_uids = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *group_uids_);
    }

    // optional .TSCE.PreserveColumnRowFlagsArchive preserve_flags = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *preserve_flags_);
    }

    // optional .TSP.UUID relative_group_uid = 9;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *relative_group_uid_);
    }

    // optional .TSP.UUID absolute_group_uid = 10;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *absolute_group_uid_);
    }

  }
  // optional int32 relative_column = 8;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_relative_column());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CategoryReferenceArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.CategoryReferenceArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const CategoryReferenceArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CategoryReferenceArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.CategoryReferenceArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.CategoryReferenceArchive)
    MergeFrom(*source);
  }
}

void CategoryReferenceArchive::MergeFrom(const CategoryReferenceArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.CategoryReferenceArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_group_by_uid()->::TSP::UUID::MergeFrom(from._internal_group_by_uid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_column_uid()->::TSP::UUID::MergeFrom(from._internal_column_uid());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_group_uids()->::TSCE::CategoryReferenceArchive_CatRefUidList::MergeFrom(from._internal_group_uids());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_preserve_flags()->::TSCE::PreserveColumnRowFlagsArchive::MergeFrom(from._internal_preserve_flags());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_relative_group_uid()->::TSP::UUID::MergeFrom(from._internal_relative_group_uid());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_absolute_group_uid()->::TSP::UUID::MergeFrom(from._internal_absolute_group_uid());
    }
    if (cached_has_bits & 0x00000040u) {
      aggregate_type_ = from.aggregate_type_;
    }
    if (cached_has_bits & 0x00000080u) {
      group_level_ = from.group_level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_relative_column(from._internal_relative_column());
  }
}

void CategoryReferenceArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.CategoryReferenceArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CategoryReferenceArchive::CopyFrom(const CategoryReferenceArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.CategoryReferenceArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CategoryReferenceArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_group_by_uid()) {
    if (!group_by_uid_->IsInitialized()) return false;
  }
  if (_internal_has_column_uid()) {
    if (!column_uid_->IsInitialized()) return false;
  }
  if (_internal_has_group_uids()) {
    if (!group_uids_->IsInitialized()) return false;
  }
  if (_internal_has_preserve_flags()) {
    if (!preserve_flags_->IsInitialized()) return false;
  }
  if (_internal_has_relative_group_uid()) {
    if (!relative_group_uid_->IsInitialized()) return false;
  }
  if (_internal_has_absolute_group_uid()) {
    if (!absolute_group_uid_->IsInitialized()) return false;
  }
  return true;
}

void CategoryReferenceArchive::InternalSwap(CategoryReferenceArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CategoryReferenceArchive, relative_column_)
      + sizeof(CategoryReferenceArchive::relative_column_)
      - PROTOBUF_FIELD_OFFSET(CategoryReferenceArchive, group_by_uid_)>(
          reinterpret_cast<char*>(&group_by_uid_),
          reinterpret_cast<char*>(&other->group_by_uid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CategoryReferenceArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[83]);
}

// ===================================================================

class ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive>()._has_bits_);
  static void set_has_row_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_column_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_row_is_sticky(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_column_is_sticky(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.ASTNodeArrayArchive.ASTLocalCellReferenceNodeArchive)
}
ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive(const ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&row_handle_, &from.row_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&column_is_sticky_) -
    reinterpret_cast<char*>(&row_handle_)) + sizeof(column_is_sticky_));
  // @@protoc_insertion_point(copy_constructor:TSCE.ASTNodeArrayArchive.ASTLocalCellReferenceNodeArchive)
}

void ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&row_handle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&column_is_sticky_) -
    reinterpret_cast<char*>(&row_handle_)) + sizeof(column_is_sticky_));
}

ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::~ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive() {
  // @@protoc_insertion_point(destructor:TSCE.ASTNodeArrayArchive.ASTLocalCellReferenceNodeArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::ArenaDtor(void* object) {
  ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive* _this = reinterpret_cast< ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive* >(object);
  (void)_this;
}
void ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.ASTNodeArrayArchive.ASTLocalCellReferenceNodeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&row_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&column_is_sticky_) -
        reinterpret_cast<char*>(&row_handle_)) + sizeof(column_is_sticky_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 row_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_row_handle(&has_bits);
          row_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 column_handle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_column_handle(&has_bits);
          column_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 row_is_sticky = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_row_is_sticky(&has_bits);
          row_is_sticky_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 column_is_sticky = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_column_is_sticky(&has_bits);
          column_is_sticky_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.ASTNodeArrayArchive.ASTLocalCellReferenceNodeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 row_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_row_handle(), target);
  }

  // required uint32 column_handle = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_column_handle(), target);
  }

  // required uint32 row_is_sticky = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_row_is_sticky(), target);
  }

  // required uint32 column_is_sticky = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_column_is_sticky(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.ASTNodeArrayArchive.ASTLocalCellReferenceNodeArchive)
  return target;
}

size_t ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.ASTNodeArrayArchive.ASTLocalCellReferenceNodeArchive)
  size_t total_size = 0;

  if (_internal_has_row_handle()) {
    // required uint32 row_handle = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_row_handle());
  }

  if (_internal_has_column_handle()) {
    // required uint32 column_handle = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_column_handle());
  }

  if (_internal_has_row_is_sticky()) {
    // required uint32 row_is_sticky = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_row_is_sticky());
  }

  if (_internal_has_column_is_sticky()) {
    // required uint32 column_is_sticky = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_column_is_sticky());
  }

  return total_size;
}
size_t ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.ASTNodeArrayArchive.ASTLocalCellReferenceNodeArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required uint32 row_handle = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_row_handle());

    // required uint32 column_handle = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_column_handle());

    // required uint32 row_is_sticky = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_row_is_sticky());

    // required uint32 column_is_sticky = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_column_is_sticky());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.ASTNodeArrayArchive.ASTLocalCellReferenceNodeArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.ASTNodeArrayArchive.ASTLocalCellReferenceNodeArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.ASTNodeArrayArchive.ASTLocalCellReferenceNodeArchive)
    MergeFrom(*source);
  }
}

void ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::MergeFrom(const ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.ASTNodeArrayArchive.ASTLocalCellReferenceNodeArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      row_handle_ = from.row_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      column_handle_ = from.column_handle_;
    }
    if (cached_has_bits & 0x00000004u) {
      row_is_sticky_ = from.row_is_sticky_;
    }
    if (cached_has_bits & 0x00000008u) {
      column_is_sticky_ = from.column_is_sticky_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.ASTNodeArrayArchive.ASTLocalCellReferenceNodeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::CopyFrom(const ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.ASTNodeArrayArchive.ASTLocalCellReferenceNodeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::InternalSwap(ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive, column_is_sticky_)
      + sizeof(ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::column_is_sticky_)
      - PROTOBUF_FIELD_OFFSET(ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive, row_handle_)>(
          reinterpret_cast<char*>(&row_handle_),
          reinterpret_cast<char*>(&other->row_handle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[84]);
}

// ===================================================================

class ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive>()._has_bits_);
  static void set_has_row_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_column_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_row_is_sticky(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_column_is_sticky(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::TSP::CFUUIDArchive& table_id(const ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive* msg);
  static void set_has_table_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_ast_reference_whitespace_after_sheet_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ast_reference_whitespace_before_table_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ast_reference_whitespace_after_table_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ast_reference_whitespace_before_cell_address(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000001f0) ^ 0x000001f0) != 0;
  }
};

const ::TSP::CFUUIDArchive&
ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::_Internal::table_id(const ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive* msg) {
  return *msg->table_id_;
}
void ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::clear_table_id() {
  if (table_id_ != nullptr) table_id_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive)
}
ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive(const ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ast_reference_whitespace_after_sheet_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ast_reference_whitespace_after_sheet_name()) {
    ast_reference_whitespace_after_sheet_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ast_reference_whitespace_after_sheet_name(), 
      GetArena());
  }
  ast_reference_whitespace_before_table_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ast_reference_whitespace_before_table_name()) {
    ast_reference_whitespace_before_table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ast_reference_whitespace_before_table_name(), 
      GetArena());
  }
  ast_reference_whitespace_after_table_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ast_reference_whitespace_after_table_name()) {
    ast_reference_whitespace_after_table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ast_reference_whitespace_after_table_name(), 
      GetArena());
  }
  ast_reference_whitespace_before_cell_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ast_reference_whitespace_before_cell_address()) {
    ast_reference_whitespace_before_cell_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ast_reference_whitespace_before_cell_address(), 
      GetArena());
  }
  if (from._internal_has_table_id()) {
    table_id_ = new ::TSP::CFUUIDArchive(*from.table_id_);
  } else {
    table_id_ = nullptr;
  }
  ::memcpy(&row_handle_, &from.row_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&column_is_sticky_) -
    reinterpret_cast<char*>(&row_handle_)) + sizeof(column_is_sticky_));
  // @@protoc_insertion_point(copy_constructor:TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive)
}

void ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::SharedCtor() {
ast_reference_whitespace_after_sheet_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
ast_reference_whitespace_before_table_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
ast_reference_whitespace_after_table_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
ast_reference_whitespace_before_cell_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&table_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&column_is_sticky_) -
    reinterpret_cast<char*>(&table_id_)) + sizeof(column_is_sticky_));
}

ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::~ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive() {
  // @@protoc_insertion_point(destructor:TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ast_reference_whitespace_after_sheet_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ast_reference_whitespace_before_table_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ast_reference_whitespace_after_table_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ast_reference_whitespace_before_cell_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete table_id_;
}

void ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::ArenaDtor(void* object) {
  ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive* _this = reinterpret_cast< ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive* >(object);
  (void)_this;
}
void ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      ast_reference_whitespace_after_sheet_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ast_reference_whitespace_before_table_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      ast_reference_whitespace_after_table_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      ast_reference_whitespace_before_cell_address_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(table_id_ != nullptr);
      table_id_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&row_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&row_is_sticky_) -
        reinterpret_cast<char*>(&row_handle_)) + sizeof(row_is_sticky_));
  }
  column_is_sticky_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 row_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_row_handle(&has_bits);
          row_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 column_handle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_column_handle(&has_bits);
          column_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 row_is_sticky = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_row_is_sticky(&has_bits);
          row_is_sticky_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 column_is_sticky = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_column_is_sticky(&has_bits);
          column_is_sticky_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.CFUUIDArchive table_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string AST_reference_whitespace_after_sheet_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_ast_reference_whitespace_after_sheet_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive.AST_reference_whitespace_after_sheet_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string AST_reference_whitespace_before_table_name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_ast_reference_whitespace_before_table_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive.AST_reference_whitespace_before_table_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string AST_reference_whitespace_after_table_name = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_ast_reference_whitespace_after_table_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive.AST_reference_whitespace_after_table_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string AST_reference_whitespace_before_cell_address = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_ast_reference_whitespace_before_cell_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive.AST_reference_whitespace_before_cell_address");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 row_handle = 1;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_row_handle(), target);
  }

  // required uint32 column_handle = 2;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_column_handle(), target);
  }

  // required uint32 row_is_sticky = 3;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_row_is_sticky(), target);
  }

  // required uint32 column_is_sticky = 4;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_column_is_sticky(), target);
  }

  // required .TSP.CFUUIDArchive table_id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::table_id(this), target, stream);
  }

  // optional string AST_reference_whitespace_after_sheet_name = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ast_reference_whitespace_after_sheet_name().data(), static_cast<int>(this->_internal_ast_reference_whitespace_after_sheet_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive.AST_reference_whitespace_after_sheet_name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_ast_reference_whitespace_after_sheet_name(), target);
  }

  // optional string AST_reference_whitespace_before_table_name = 7;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ast_reference_whitespace_before_table_name().data(), static_cast<int>(this->_internal_ast_reference_whitespace_before_table_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive.AST_reference_whitespace_before_table_name");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_ast_reference_whitespace_before_table_name(), target);
  }

  // optional string AST_reference_whitespace_after_table_name = 8;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ast_reference_whitespace_after_table_name().data(), static_cast<int>(this->_internal_ast_reference_whitespace_after_table_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive.AST_reference_whitespace_after_table_name");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_ast_reference_whitespace_after_table_name(), target);
  }

  // optional string AST_reference_whitespace_before_cell_address = 9;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ast_reference_whitespace_before_cell_address().data(), static_cast<int>(this->_internal_ast_reference_whitespace_before_cell_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive.AST_reference_whitespace_before_cell_address");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_ast_reference_whitespace_before_cell_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive)
  return target;
}

size_t ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive)
  size_t total_size = 0;

  if (_internal_has_table_id()) {
    // required .TSP.CFUUIDArchive table_id = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *table_id_);
  }

  if (_internal_has_row_handle()) {
    // required uint32 row_handle = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_row_handle());
  }

  if (_internal_has_column_handle()) {
    // required uint32 column_handle = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_column_handle());
  }

  if (_internal_has_row_is_sticky()) {
    // required uint32 row_is_sticky = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_row_is_sticky());
  }

  if (_internal_has_column_is_sticky()) {
    // required uint32 column_is_sticky = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_column_is_sticky());
  }

  return total_size;
}
size_t ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x000001f0) ^ 0x000001f0) == 0) {  // All required fields are present.
    // required .TSP.CFUUIDArchive table_id = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *table_id_);

    // required uint32 row_handle = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_row_handle());

    // required uint32 column_handle = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_column_handle());

    // required uint32 row_is_sticky = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_row_is_sticky());

    // required uint32 column_is_sticky = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_column_is_sticky());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string AST_reference_whitespace_after_sheet_name = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ast_reference_whitespace_after_sheet_name());
    }

    // optional string AST_reference_whitespace_before_table_name = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ast_reference_whitespace_before_table_name());
    }

    // optional string AST_reference_whitespace_after_table_name = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ast_reference_whitespace_after_table_name());
    }

    // optional string AST_reference_whitespace_before_cell_address = 9;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ast_reference_whitespace_before_cell_address());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive)
    MergeFrom(*source);
  }
}

void ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::MergeFrom(const ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_ast_reference_whitespace_after_sheet_name(from._internal_ast_reference_whitespace_after_sheet_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_ast_reference_whitespace_before_table_name(from._internal_ast_reference_whitespace_before_table_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_ast_reference_whitespace_after_table_name(from._internal_ast_reference_whitespace_after_table_name());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_ast_reference_whitespace_before_cell_address(from._internal_ast_reference_whitespace_before_cell_address());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_table_id()->::TSP::CFUUIDArchive::MergeFrom(from._internal_table_id());
    }
    if (cached_has_bits & 0x00000020u) {
      row_handle_ = from.row_handle_;
    }
    if (cached_has_bits & 0x00000040u) {
      column_handle_ = from.column_handle_;
    }
    if (cached_has_bits & 0x00000080u) {
      row_is_sticky_ = from.row_is_sticky_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_column_is_sticky(from._internal_column_is_sticky());
  }
}

void ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::CopyFrom(const ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::InternalSwap(ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ast_reference_whitespace_after_sheet_name_.Swap(&other->ast_reference_whitespace_after_sheet_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ast_reference_whitespace_before_table_name_.Swap(&other->ast_reference_whitespace_before_table_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ast_reference_whitespace_after_table_name_.Swap(&other->ast_reference_whitespace_after_table_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ast_reference_whitespace_before_cell_address_.Swap(&other->ast_reference_whitespace_before_cell_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive, column_is_sticky_)
      + sizeof(ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::column_is_sticky_)
      - PROTOBUF_FIELD_OFFSET(ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive, table_id_)>(
          reinterpret_cast<char*>(&table_id_),
          reinterpret_cast<char*>(&other->table_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[85]);
}

// ===================================================================

class ASTNodeArrayArchive_ASTColumnCoordinateArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ASTNodeArrayArchive_ASTColumnCoordinateArchive>()._has_bits_);
  static void set_has_column(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_absolute(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

ASTNodeArrayArchive_ASTColumnCoordinateArchive::ASTNodeArrayArchive_ASTColumnCoordinateArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.ASTNodeArrayArchive.ASTColumnCoordinateArchive)
}
ASTNodeArrayArchive_ASTColumnCoordinateArchive::ASTNodeArrayArchive_ASTColumnCoordinateArchive(const ASTNodeArrayArchive_ASTColumnCoordinateArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&column_, &from.column_,
    static_cast<size_t>(reinterpret_cast<char*>(&absolute_) -
    reinterpret_cast<char*>(&column_)) + sizeof(absolute_));
  // @@protoc_insertion_point(copy_constructor:TSCE.ASTNodeArrayArchive.ASTColumnCoordinateArchive)
}

void ASTNodeArrayArchive_ASTColumnCoordinateArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&column_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&absolute_) -
    reinterpret_cast<char*>(&column_)) + sizeof(absolute_));
}

ASTNodeArrayArchive_ASTColumnCoordinateArchive::~ASTNodeArrayArchive_ASTColumnCoordinateArchive() {
  // @@protoc_insertion_point(destructor:TSCE.ASTNodeArrayArchive.ASTColumnCoordinateArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ASTNodeArrayArchive_ASTColumnCoordinateArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ASTNodeArrayArchive_ASTColumnCoordinateArchive::ArenaDtor(void* object) {
  ASTNodeArrayArchive_ASTColumnCoordinateArchive* _this = reinterpret_cast< ASTNodeArrayArchive_ASTColumnCoordinateArchive* >(object);
  (void)_this;
}
void ASTNodeArrayArchive_ASTColumnCoordinateArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ASTNodeArrayArchive_ASTColumnCoordinateArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ASTNodeArrayArchive_ASTColumnCoordinateArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.ASTNodeArrayArchive.ASTColumnCoordinateArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&column_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&absolute_) -
        reinterpret_cast<char*>(&column_)) + sizeof(absolute_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ASTNodeArrayArchive_ASTColumnCoordinateArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required sint32 column = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_column(&has_bits);
          column_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool absolute = 2 [default = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_absolute(&has_bits);
          absolute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ASTNodeArrayArchive_ASTColumnCoordinateArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.ASTNodeArrayArchive.ASTColumnCoordinateArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required sint32 column = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(1, this->_internal_column(), target);
  }

  // optional bool absolute = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_absolute(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.ASTNodeArrayArchive.ASTColumnCoordinateArchive)
  return target;
}

size_t ASTNodeArrayArchive_ASTColumnCoordinateArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.ASTNodeArrayArchive.ASTColumnCoordinateArchive)
  size_t total_size = 0;

  // required sint32 column = 1;
  if (_internal_has_column()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_column());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool absolute = 2 [default = false];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ASTNodeArrayArchive_ASTColumnCoordinateArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.ASTNodeArrayArchive.ASTColumnCoordinateArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ASTNodeArrayArchive_ASTColumnCoordinateArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ASTNodeArrayArchive_ASTColumnCoordinateArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.ASTNodeArrayArchive.ASTColumnCoordinateArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.ASTNodeArrayArchive.ASTColumnCoordinateArchive)
    MergeFrom(*source);
  }
}

void ASTNodeArrayArchive_ASTColumnCoordinateArchive::MergeFrom(const ASTNodeArrayArchive_ASTColumnCoordinateArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.ASTNodeArrayArchive.ASTColumnCoordinateArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      column_ = from.column_;
    }
    if (cached_has_bits & 0x00000002u) {
      absolute_ = from.absolute_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ASTNodeArrayArchive_ASTColumnCoordinateArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.ASTNodeArrayArchive.ASTColumnCoordinateArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ASTNodeArrayArchive_ASTColumnCoordinateArchive::CopyFrom(const ASTNodeArrayArchive_ASTColumnCoordinateArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.ASTNodeArrayArchive.ASTColumnCoordinateArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ASTNodeArrayArchive_ASTColumnCoordinateArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ASTNodeArrayArchive_ASTColumnCoordinateArchive::InternalSwap(ASTNodeArrayArchive_ASTColumnCoordinateArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ASTNodeArrayArchive_ASTColumnCoordinateArchive, absolute_)
      + sizeof(ASTNodeArrayArchive_ASTColumnCoordinateArchive::absolute_)
      - PROTOBUF_FIELD_OFFSET(ASTNodeArrayArchive_ASTColumnCoordinateArchive, column_)>(
          reinterpret_cast<char*>(&column_),
          reinterpret_cast<char*>(&other->column_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ASTNodeArrayArchive_ASTColumnCoordinateArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[86]);
}

// ===================================================================

class ASTNodeArrayArchive_ASTRowCoordinateArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ASTNodeArrayArchive_ASTRowCoordinateArchive>()._has_bits_);
  static void set_has_row(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_absolute(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

ASTNodeArrayArchive_ASTRowCoordinateArchive::ASTNodeArrayArchive_ASTRowCoordinateArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.ASTNodeArrayArchive.ASTRowCoordinateArchive)
}
ASTNodeArrayArchive_ASTRowCoordinateArchive::ASTNodeArrayArchive_ASTRowCoordinateArchive(const ASTNodeArrayArchive_ASTRowCoordinateArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&row_, &from.row_,
    static_cast<size_t>(reinterpret_cast<char*>(&absolute_) -
    reinterpret_cast<char*>(&row_)) + sizeof(absolute_));
  // @@protoc_insertion_point(copy_constructor:TSCE.ASTNodeArrayArchive.ASTRowCoordinateArchive)
}

void ASTNodeArrayArchive_ASTRowCoordinateArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&row_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&absolute_) -
    reinterpret_cast<char*>(&row_)) + sizeof(absolute_));
}

ASTNodeArrayArchive_ASTRowCoordinateArchive::~ASTNodeArrayArchive_ASTRowCoordinateArchive() {
  // @@protoc_insertion_point(destructor:TSCE.ASTNodeArrayArchive.ASTRowCoordinateArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ASTNodeArrayArchive_ASTRowCoordinateArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ASTNodeArrayArchive_ASTRowCoordinateArchive::ArenaDtor(void* object) {
  ASTNodeArrayArchive_ASTRowCoordinateArchive* _this = reinterpret_cast< ASTNodeArrayArchive_ASTRowCoordinateArchive* >(object);
  (void)_this;
}
void ASTNodeArrayArchive_ASTRowCoordinateArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ASTNodeArrayArchive_ASTRowCoordinateArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ASTNodeArrayArchive_ASTRowCoordinateArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.ASTNodeArrayArchive.ASTRowCoordinateArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&row_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&absolute_) -
        reinterpret_cast<char*>(&row_)) + sizeof(absolute_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ASTNodeArrayArchive_ASTRowCoordinateArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required sint32 row = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_row(&has_bits);
          row_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool absolute = 2 [default = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_absolute(&has_bits);
          absolute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ASTNodeArrayArchive_ASTRowCoordinateArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.ASTNodeArrayArchive.ASTRowCoordinateArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required sint32 row = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(1, this->_internal_row(), target);
  }

  // optional bool absolute = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_absolute(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.ASTNodeArrayArchive.ASTRowCoordinateArchive)
  return target;
}

size_t ASTNodeArrayArchive_ASTRowCoordinateArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.ASTNodeArrayArchive.ASTRowCoordinateArchive)
  size_t total_size = 0;

  // required sint32 row = 1;
  if (_internal_has_row()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_row());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool absolute = 2 [default = false];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ASTNodeArrayArchive_ASTRowCoordinateArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.ASTNodeArrayArchive.ASTRowCoordinateArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ASTNodeArrayArchive_ASTRowCoordinateArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ASTNodeArrayArchive_ASTRowCoordinateArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.ASTNodeArrayArchive.ASTRowCoordinateArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.ASTNodeArrayArchive.ASTRowCoordinateArchive)
    MergeFrom(*source);
  }
}

void ASTNodeArrayArchive_ASTRowCoordinateArchive::MergeFrom(const ASTNodeArrayArchive_ASTRowCoordinateArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.ASTNodeArrayArchive.ASTRowCoordinateArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      row_ = from.row_;
    }
    if (cached_has_bits & 0x00000002u) {
      absolute_ = from.absolute_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ASTNodeArrayArchive_ASTRowCoordinateArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.ASTNodeArrayArchive.ASTRowCoordinateArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ASTNodeArrayArchive_ASTRowCoordinateArchive::CopyFrom(const ASTNodeArrayArchive_ASTRowCoordinateArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.ASTNodeArrayArchive.ASTRowCoordinateArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ASTNodeArrayArchive_ASTRowCoordinateArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ASTNodeArrayArchive_ASTRowCoordinateArchive::InternalSwap(ASTNodeArrayArchive_ASTRowCoordinateArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ASTNodeArrayArchive_ASTRowCoordinateArchive, absolute_)
      + sizeof(ASTNodeArrayArchive_ASTRowCoordinateArchive::absolute_)
      - PROTOBUF_FIELD_OFFSET(ASTNodeArrayArchive_ASTRowCoordinateArchive, row_)>(
          reinterpret_cast<char*>(&row_),
          reinterpret_cast<char*>(&other->row_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ASTNodeArrayArchive_ASTRowCoordinateArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[87]);
}

// ===================================================================

class ASTNodeArrayArchive_ASTUidList::_Internal {
 public:
};

void ASTNodeArrayArchive_ASTUidList::clear_uid() {
  uid_.Clear();
}
ASTNodeArrayArchive_ASTUidList::ASTNodeArrayArchive_ASTUidList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  uid_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.ASTNodeArrayArchive.ASTUidList)
}
ASTNodeArrayArchive_ASTUidList::ASTNodeArrayArchive_ASTUidList(const ASTNodeArrayArchive_ASTUidList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      uid_(from.uid_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSCE.ASTNodeArrayArchive.ASTUidList)
}

void ASTNodeArrayArchive_ASTUidList::SharedCtor() {
}

ASTNodeArrayArchive_ASTUidList::~ASTNodeArrayArchive_ASTUidList() {
  // @@protoc_insertion_point(destructor:TSCE.ASTNodeArrayArchive.ASTUidList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ASTNodeArrayArchive_ASTUidList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ASTNodeArrayArchive_ASTUidList::ArenaDtor(void* object) {
  ASTNodeArrayArchive_ASTUidList* _this = reinterpret_cast< ASTNodeArrayArchive_ASTUidList* >(object);
  (void)_this;
}
void ASTNodeArrayArchive_ASTUidList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ASTNodeArrayArchive_ASTUidList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ASTNodeArrayArchive_ASTUidList::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.ASTNodeArrayArchive.ASTUidList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uid_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ASTNodeArrayArchive_ASTUidList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSP.UUID uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_uid(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ASTNodeArrayArchive_ASTUidList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.ASTNodeArrayArchive.ASTUidList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSP.UUID uid = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_uid_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_uid(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.ASTNodeArrayArchive.ASTUidList)
  return target;
}

size_t ASTNodeArrayArchive_ASTUidList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.ASTNodeArrayArchive.ASTUidList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.UUID uid = 1;
  total_size += 1UL * this->_internal_uid_size();
  for (const auto& msg : this->uid_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ASTNodeArrayArchive_ASTUidList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.ASTNodeArrayArchive.ASTUidList)
  GOOGLE_DCHECK_NE(&from, this);
  const ASTNodeArrayArchive_ASTUidList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ASTNodeArrayArchive_ASTUidList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.ASTNodeArrayArchive.ASTUidList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.ASTNodeArrayArchive.ASTUidList)
    MergeFrom(*source);
  }
}

void ASTNodeArrayArchive_ASTUidList::MergeFrom(const ASTNodeArrayArchive_ASTUidList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.ASTNodeArrayArchive.ASTUidList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  uid_.MergeFrom(from.uid_);
}

void ASTNodeArrayArchive_ASTUidList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.ASTNodeArrayArchive.ASTUidList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ASTNodeArrayArchive_ASTUidList::CopyFrom(const ASTNodeArrayArchive_ASTUidList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.ASTNodeArrayArchive.ASTUidList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ASTNodeArrayArchive_ASTUidList::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(uid_)) return false;
  return true;
}

void ASTNodeArrayArchive_ASTUidList::InternalSwap(ASTNodeArrayArchive_ASTUidList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  uid_.InternalSwap(&other->uid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ASTNodeArrayArchive_ASTUidList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[88]);
}

// ===================================================================

class ASTNodeArrayArchive_ASTUidTract::_Internal {
 public:
  using HasBits = decltype(std::declval<ASTNodeArrayArchive_ASTUidTract>()._has_bits_);
  static const ::TSCE::ASTNodeArrayArchive_ASTUidList& columnuids(const ASTNodeArrayArchive_ASTUidTract* msg);
  static void set_has_columnuids(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSCE::ASTNodeArrayArchive_ASTUidList& rowuids(const ASTNodeArrayArchive_ASTUidTract* msg);
  static void set_has_rowuids(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_range_ref(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_purpose(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_preserve_rectangular(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSCE::ASTNodeArrayArchive_ASTUidList&
ASTNodeArrayArchive_ASTUidTract::_Internal::columnuids(const ASTNodeArrayArchive_ASTUidTract* msg) {
  return *msg->columnuids_;
}
const ::TSCE::ASTNodeArrayArchive_ASTUidList&
ASTNodeArrayArchive_ASTUidTract::_Internal::rowuids(const ASTNodeArrayArchive_ASTUidTract* msg) {
  return *msg->rowuids_;
}
ASTNodeArrayArchive_ASTUidTract::ASTNodeArrayArchive_ASTUidTract(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.ASTNodeArrayArchive.ASTUidTract)
}
ASTNodeArrayArchive_ASTUidTract::ASTNodeArrayArchive_ASTUidTract(const ASTNodeArrayArchive_ASTUidTract& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_columnuids()) {
    columnuids_ = new ::TSCE::ASTNodeArrayArchive_ASTUidList(*from.columnuids_);
  } else {
    columnuids_ = nullptr;
  }
  if (from._internal_has_rowuids()) {
    rowuids_ = new ::TSCE::ASTNodeArrayArchive_ASTUidList(*from.rowuids_);
  } else {
    rowuids_ = nullptr;
  }
  ::memcpy(&is_range_ref_, &from.is_range_ref_,
    static_cast<size_t>(reinterpret_cast<char*>(&preserve_rectangular_) -
    reinterpret_cast<char*>(&is_range_ref_)) + sizeof(preserve_rectangular_));
  // @@protoc_insertion_point(copy_constructor:TSCE.ASTNodeArrayArchive.ASTUidTract)
}

void ASTNodeArrayArchive_ASTUidTract::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&columnuids_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&purpose_) -
    reinterpret_cast<char*>(&columnuids_)) + sizeof(purpose_));
preserve_rectangular_ = true;
}

ASTNodeArrayArchive_ASTUidTract::~ASTNodeArrayArchive_ASTUidTract() {
  // @@protoc_insertion_point(destructor:TSCE.ASTNodeArrayArchive.ASTUidTract)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ASTNodeArrayArchive_ASTUidTract::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete columnuids_;
  if (this != internal_default_instance()) delete rowuids_;
}

void ASTNodeArrayArchive_ASTUidTract::ArenaDtor(void* object) {
  ASTNodeArrayArchive_ASTUidTract* _this = reinterpret_cast< ASTNodeArrayArchive_ASTUidTract* >(object);
  (void)_this;
}
void ASTNodeArrayArchive_ASTUidTract::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ASTNodeArrayArchive_ASTUidTract::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ASTNodeArrayArchive_ASTUidTract::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.ASTNodeArrayArchive.ASTUidTract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(columnuids_ != nullptr);
      columnuids_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(rowuids_ != nullptr);
      rowuids_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&is_range_ref_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&purpose_) -
        reinterpret_cast<char*>(&is_range_ref_)) + sizeof(purpose_));
    preserve_rectangular_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ASTNodeArrayArchive_ASTUidTract::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCE.ASTNodeArrayArchive.ASTUidList columnUids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_columnuids(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSCE.ASTNodeArrayArchive.ASTUidList rowUids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_rowuids(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_range_ref = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_is_range_ref(&has_bits);
          is_range_ref_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCE.ASTNodeArrayArchive.ASTUidTractPurpose purpose = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSCE::ASTNodeArrayArchive_ASTUidTractPurpose_IsValid(val))) {
            _internal_set_purpose(static_cast<::TSCE::ASTNodeArrayArchive_ASTUidTractPurpose>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool preserve_rectangular = 5 [default = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_preserve_rectangular(&has_bits);
          preserve_rectangular_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ASTNodeArrayArchive_ASTUidTract::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.ASTNodeArrayArchive.ASTUidTract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSCE.ASTNodeArrayArchive.ASTUidList columnUids = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::columnuids(this), target, stream);
  }

  // required .TSCE.ASTNodeArrayArchive.ASTUidList rowUids = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::rowuids(this), target, stream);
  }

  // optional bool is_range_ref = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_range_ref(), target);
  }

  // optional .TSCE.ASTNodeArrayArchive.ASTUidTractPurpose purpose = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_purpose(), target);
  }

  // optional bool preserve_rectangular = 5 [default = true];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_preserve_rectangular(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.ASTNodeArrayArchive.ASTUidTract)
  return target;
}

size_t ASTNodeArrayArchive_ASTUidTract::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.ASTNodeArrayArchive.ASTUidTract)
  size_t total_size = 0;

  if (_internal_has_columnuids()) {
    // required .TSCE.ASTNodeArrayArchive.ASTUidList columnUids = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *columnuids_);
  }

  if (_internal_has_rowuids()) {
    // required .TSCE.ASTNodeArrayArchive.ASTUidList rowUids = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rowuids_);
  }

  return total_size;
}
size_t ASTNodeArrayArchive_ASTUidTract::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.ASTNodeArrayArchive.ASTUidTract)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSCE.ASTNodeArrayArchive.ASTUidList columnUids = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *columnuids_);

    // required .TSCE.ASTNodeArrayArchive.ASTUidList rowUids = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rowuids_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001cu) {
    // optional bool is_range_ref = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional .TSCE.ASTNodeArrayArchive.ASTUidTractPurpose purpose = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_purpose());
    }

    // optional bool preserve_rectangular = 5 [default = true];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ASTNodeArrayArchive_ASTUidTract::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.ASTNodeArrayArchive.ASTUidTract)
  GOOGLE_DCHECK_NE(&from, this);
  const ASTNodeArrayArchive_ASTUidTract* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ASTNodeArrayArchive_ASTUidTract>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.ASTNodeArrayArchive.ASTUidTract)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.ASTNodeArrayArchive.ASTUidTract)
    MergeFrom(*source);
  }
}

void ASTNodeArrayArchive_ASTUidTract::MergeFrom(const ASTNodeArrayArchive_ASTUidTract& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.ASTNodeArrayArchive.ASTUidTract)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_columnuids()->::TSCE::ASTNodeArrayArchive_ASTUidList::MergeFrom(from._internal_columnuids());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_rowuids()->::TSCE::ASTNodeArrayArchive_ASTUidList::MergeFrom(from._internal_rowuids());
    }
    if (cached_has_bits & 0x00000004u) {
      is_range_ref_ = from.is_range_ref_;
    }
    if (cached_has_bits & 0x00000008u) {
      purpose_ = from.purpose_;
    }
    if (cached_has_bits & 0x00000010u) {
      preserve_rectangular_ = from.preserve_rectangular_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ASTNodeArrayArchive_ASTUidTract::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.ASTNodeArrayArchive.ASTUidTract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ASTNodeArrayArchive_ASTUidTract::CopyFrom(const ASTNodeArrayArchive_ASTUidTract& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.ASTNodeArrayArchive.ASTUidTract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ASTNodeArrayArchive_ASTUidTract::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_columnuids()) {
    if (!columnuids_->IsInitialized()) return false;
  }
  if (_internal_has_rowuids()) {
    if (!rowuids_->IsInitialized()) return false;
  }
  return true;
}

void ASTNodeArrayArchive_ASTUidTract::InternalSwap(ASTNodeArrayArchive_ASTUidTract* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ASTNodeArrayArchive_ASTUidTract, purpose_)
      + sizeof(ASTNodeArrayArchive_ASTUidTract::purpose_)
      - PROTOBUF_FIELD_OFFSET(ASTNodeArrayArchive_ASTUidTract, columnuids_)>(
          reinterpret_cast<char*>(&columnuids_),
          reinterpret_cast<char*>(&other->columnuids_));
  swap(preserve_rectangular_, other->preserve_rectangular_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ASTNodeArrayArchive_ASTUidTract::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[89]);
}

// ===================================================================

class ASTNodeArrayArchive_ASTStickyBits::_Internal {
 public:
  using HasBits = decltype(std::declval<ASTNodeArrayArchive_ASTStickyBits>()._has_bits_);
  static void set_has_begin_row_is_absolute(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_begin_column_is_absolute(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_end_row_is_absolute(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_end_column_is_absolute(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

ASTNodeArrayArchive_ASTStickyBits::ASTNodeArrayArchive_ASTStickyBits(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.ASTNodeArrayArchive.ASTStickyBits)
}
ASTNodeArrayArchive_ASTStickyBits::ASTNodeArrayArchive_ASTStickyBits(const ASTNodeArrayArchive_ASTStickyBits& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&begin_row_is_absolute_, &from.begin_row_is_absolute_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_column_is_absolute_) -
    reinterpret_cast<char*>(&begin_row_is_absolute_)) + sizeof(end_column_is_absolute_));
  // @@protoc_insertion_point(copy_constructor:TSCE.ASTNodeArrayArchive.ASTStickyBits)
}

void ASTNodeArrayArchive_ASTStickyBits::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&begin_row_is_absolute_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&end_column_is_absolute_) -
    reinterpret_cast<char*>(&begin_row_is_absolute_)) + sizeof(end_column_is_absolute_));
}

ASTNodeArrayArchive_ASTStickyBits::~ASTNodeArrayArchive_ASTStickyBits() {
  // @@protoc_insertion_point(destructor:TSCE.ASTNodeArrayArchive.ASTStickyBits)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ASTNodeArrayArchive_ASTStickyBits::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ASTNodeArrayArchive_ASTStickyBits::ArenaDtor(void* object) {
  ASTNodeArrayArchive_ASTStickyBits* _this = reinterpret_cast< ASTNodeArrayArchive_ASTStickyBits* >(object);
  (void)_this;
}
void ASTNodeArrayArchive_ASTStickyBits::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ASTNodeArrayArchive_ASTStickyBits::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ASTNodeArrayArchive_ASTStickyBits::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.ASTNodeArrayArchive.ASTStickyBits)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&begin_row_is_absolute_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_column_is_absolute_) -
      reinterpret_cast<char*>(&begin_row_is_absolute_)) + sizeof(end_column_is_absolute_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ASTNodeArrayArchive_ASTStickyBits::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bool begin_row_is_absolute = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_begin_row_is_absolute(&has_bits);
          begin_row_is_absolute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool begin_column_is_absolute = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_begin_column_is_absolute(&has_bits);
          begin_column_is_absolute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool end_row_is_absolute = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_end_row_is_absolute(&has_bits);
          end_row_is_absolute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool end_column_is_absolute = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_end_column_is_absolute(&has_bits);
          end_column_is_absolute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ASTNodeArrayArchive_ASTStickyBits::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.ASTNodeArrayArchive.ASTStickyBits)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool begin_row_is_absolute = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_begin_row_is_absolute(), target);
  }

  // required bool begin_column_is_absolute = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_begin_column_is_absolute(), target);
  }

  // required bool end_row_is_absolute = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_end_row_is_absolute(), target);
  }

  // required bool end_column_is_absolute = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_end_column_is_absolute(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.ASTNodeArrayArchive.ASTStickyBits)
  return target;
}

size_t ASTNodeArrayArchive_ASTStickyBits::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.ASTNodeArrayArchive.ASTStickyBits)
  size_t total_size = 0;

  if (_internal_has_begin_row_is_absolute()) {
    // required bool begin_row_is_absolute = 1;
    total_size += 1 + 1;
  }

  if (_internal_has_begin_column_is_absolute()) {
    // required bool begin_column_is_absolute = 2;
    total_size += 1 + 1;
  }

  if (_internal_has_end_row_is_absolute()) {
    // required bool end_row_is_absolute = 3;
    total_size += 1 + 1;
  }

  if (_internal_has_end_column_is_absolute()) {
    // required bool end_column_is_absolute = 4;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t ASTNodeArrayArchive_ASTStickyBits::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.ASTNodeArrayArchive.ASTStickyBits)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required bool begin_row_is_absolute = 1;
    total_size += 1 + 1;

    // required bool begin_column_is_absolute = 2;
    total_size += 1 + 1;

    // required bool end_row_is_absolute = 3;
    total_size += 1 + 1;

    // required bool end_column_is_absolute = 4;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ASTNodeArrayArchive_ASTStickyBits::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.ASTNodeArrayArchive.ASTStickyBits)
  GOOGLE_DCHECK_NE(&from, this);
  const ASTNodeArrayArchive_ASTStickyBits* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ASTNodeArrayArchive_ASTStickyBits>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.ASTNodeArrayArchive.ASTStickyBits)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.ASTNodeArrayArchive.ASTStickyBits)
    MergeFrom(*source);
  }
}

void ASTNodeArrayArchive_ASTStickyBits::MergeFrom(const ASTNodeArrayArchive_ASTStickyBits& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.ASTNodeArrayArchive.ASTStickyBits)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      begin_row_is_absolute_ = from.begin_row_is_absolute_;
    }
    if (cached_has_bits & 0x00000002u) {
      begin_column_is_absolute_ = from.begin_column_is_absolute_;
    }
    if (cached_has_bits & 0x00000004u) {
      end_row_is_absolute_ = from.end_row_is_absolute_;
    }
    if (cached_has_bits & 0x00000008u) {
      end_column_is_absolute_ = from.end_column_is_absolute_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ASTNodeArrayArchive_ASTStickyBits::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.ASTNodeArrayArchive.ASTStickyBits)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ASTNodeArrayArchive_ASTStickyBits::CopyFrom(const ASTNodeArrayArchive_ASTStickyBits& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.ASTNodeArrayArchive.ASTStickyBits)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ASTNodeArrayArchive_ASTStickyBits::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ASTNodeArrayArchive_ASTStickyBits::InternalSwap(ASTNodeArrayArchive_ASTStickyBits* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ASTNodeArrayArchive_ASTStickyBits, end_column_is_absolute_)
      + sizeof(ASTNodeArrayArchive_ASTStickyBits::end_column_is_absolute_)
      - PROTOBUF_FIELD_OFFSET(ASTNodeArrayArchive_ASTStickyBits, begin_row_is_absolute_)>(
          reinterpret_cast<char*>(&begin_row_is_absolute_),
          reinterpret_cast<char*>(&other->begin_row_is_absolute_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ASTNodeArrayArchive_ASTStickyBits::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[90]);
}

// ===================================================================

class ASTNodeArrayArchive_ASTUidTractList::_Internal {
 public:
  using HasBits = decltype(std::declval<ASTNodeArrayArchive_ASTUidTractList>()._has_bits_);
  static const ::TSCE::ASTNodeArrayArchive_ASTStickyBits& sticky_bits(const ASTNodeArrayArchive_ASTUidTractList* msg);
  static void set_has_sticky_bits(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSCE::ASTNodeArrayArchive_ASTStickyBits&
ASTNodeArrayArchive_ASTUidTractList::_Internal::sticky_bits(const ASTNodeArrayArchive_ASTUidTractList* msg) {
  return *msg->sticky_bits_;
}
ASTNodeArrayArchive_ASTUidTractList::ASTNodeArrayArchive_ASTUidTractList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tract_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.ASTNodeArrayArchive.ASTUidTractList)
}
ASTNodeArrayArchive_ASTUidTractList::ASTNodeArrayArchive_ASTUidTractList(const ASTNodeArrayArchive_ASTUidTractList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      tract_(from.tract_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_sticky_bits()) {
    sticky_bits_ = new ::TSCE::ASTNodeArrayArchive_ASTStickyBits(*from.sticky_bits_);
  } else {
    sticky_bits_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSCE.ASTNodeArrayArchive.ASTUidTractList)
}

void ASTNodeArrayArchive_ASTUidTractList::SharedCtor() {
sticky_bits_ = nullptr;
}

ASTNodeArrayArchive_ASTUidTractList::~ASTNodeArrayArchive_ASTUidTractList() {
  // @@protoc_insertion_point(destructor:TSCE.ASTNodeArrayArchive.ASTUidTractList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ASTNodeArrayArchive_ASTUidTractList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete sticky_bits_;
}

void ASTNodeArrayArchive_ASTUidTractList::ArenaDtor(void* object) {
  ASTNodeArrayArchive_ASTUidTractList* _this = reinterpret_cast< ASTNodeArrayArchive_ASTUidTractList* >(object);
  (void)_this;
}
void ASTNodeArrayArchive_ASTUidTractList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ASTNodeArrayArchive_ASTUidTractList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ASTNodeArrayArchive_ASTUidTractList::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.ASTNodeArrayArchive.ASTUidTractList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tract_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(sticky_bits_ != nullptr);
    sticky_bits_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ASTNodeArrayArchive_ASTUidTractList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSCE.ASTNodeArrayArchive.ASTUidTract tract = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tract(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // required .TSCE.ASTNodeArrayArchive.ASTStickyBits sticky_bits = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_sticky_bits(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ASTNodeArrayArchive_ASTUidTractList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.ASTNodeArrayArchive.ASTUidTractList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSCE.ASTNodeArrayArchive.ASTUidTract tract = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tract_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_tract(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // required .TSCE.ASTNodeArrayArchive.ASTStickyBits sticky_bits = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::sticky_bits(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.ASTNodeArrayArchive.ASTUidTractList)
  return target;
}

size_t ASTNodeArrayArchive_ASTUidTractList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.ASTNodeArrayArchive.ASTUidTractList)
  size_t total_size = 0;

  // required .TSCE.ASTNodeArrayArchive.ASTStickyBits sticky_bits = 2;
  if (_internal_has_sticky_bits()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sticky_bits_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.ASTNodeArrayArchive.ASTUidTract tract = 1;
  total_size += 1UL * this->_internal_tract_size();
  for (const auto& msg : this->tract_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ASTNodeArrayArchive_ASTUidTractList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.ASTNodeArrayArchive.ASTUidTractList)
  GOOGLE_DCHECK_NE(&from, this);
  const ASTNodeArrayArchive_ASTUidTractList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ASTNodeArrayArchive_ASTUidTractList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.ASTNodeArrayArchive.ASTUidTractList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.ASTNodeArrayArchive.ASTUidTractList)
    MergeFrom(*source);
  }
}

void ASTNodeArrayArchive_ASTUidTractList::MergeFrom(const ASTNodeArrayArchive_ASTUidTractList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.ASTNodeArrayArchive.ASTUidTractList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tract_.MergeFrom(from.tract_);
  if (from._internal_has_sticky_bits()) {
    _internal_mutable_sticky_bits()->::TSCE::ASTNodeArrayArchive_ASTStickyBits::MergeFrom(from._internal_sticky_bits());
  }
}

void ASTNodeArrayArchive_ASTUidTractList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.ASTNodeArrayArchive.ASTUidTractList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ASTNodeArrayArchive_ASTUidTractList::CopyFrom(const ASTNodeArrayArchive_ASTUidTractList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.ASTNodeArrayArchive.ASTUidTractList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ASTNodeArrayArchive_ASTUidTractList::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(tract_)) return false;
  if (_internal_has_sticky_bits()) {
    if (!sticky_bits_->IsInitialized()) return false;
  }
  return true;
}

void ASTNodeArrayArchive_ASTUidTractList::InternalSwap(ASTNodeArrayArchive_ASTUidTractList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tract_.InternalSwap(&other->tract_);
  swap(sticky_bits_, other->sticky_bits_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ASTNodeArrayArchive_ASTUidTractList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[91]);
}

// ===================================================================

class ASTNodeArrayArchive_ASTUidCoordinateArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ASTNodeArrayArchive_ASTUidCoordinateArchive>()._has_bits_);
  static const ::TSP::UUID& column_uid(const ASTNodeArrayArchive_ASTUidCoordinateArchive* msg);
  static void set_has_column_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUID& row_uid(const ASTNodeArrayArchive_ASTUidCoordinateArchive* msg);
  static void set_has_row_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_column_absolute(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_row_absolute(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

const ::TSP::UUID&
ASTNodeArrayArchive_ASTUidCoordinateArchive::_Internal::column_uid(const ASTNodeArrayArchive_ASTUidCoordinateArchive* msg) {
  return *msg->column_uid_;
}
const ::TSP::UUID&
ASTNodeArrayArchive_ASTUidCoordinateArchive::_Internal::row_uid(const ASTNodeArrayArchive_ASTUidCoordinateArchive* msg) {
  return *msg->row_uid_;
}
void ASTNodeArrayArchive_ASTUidCoordinateArchive::clear_column_uid() {
  if (column_uid_ != nullptr) column_uid_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void ASTNodeArrayArchive_ASTUidCoordinateArchive::clear_row_uid() {
  if (row_uid_ != nullptr) row_uid_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
ASTNodeArrayArchive_ASTUidCoordinateArchive::ASTNodeArrayArchive_ASTUidCoordinateArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.ASTNodeArrayArchive.ASTUidCoordinateArchive)
}
ASTNodeArrayArchive_ASTUidCoordinateArchive::ASTNodeArrayArchive_ASTUidCoordinateArchive(const ASTNodeArrayArchive_ASTUidCoordinateArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_column_uid()) {
    column_uid_ = new ::TSP::UUID(*from.column_uid_);
  } else {
    column_uid_ = nullptr;
  }
  if (from._internal_has_row_uid()) {
    row_uid_ = new ::TSP::UUID(*from.row_uid_);
  } else {
    row_uid_ = nullptr;
  }
  ::memcpy(&column_absolute_, &from.column_absolute_,
    static_cast<size_t>(reinterpret_cast<char*>(&row_absolute_) -
    reinterpret_cast<char*>(&column_absolute_)) + sizeof(row_absolute_));
  // @@protoc_insertion_point(copy_constructor:TSCE.ASTNodeArrayArchive.ASTUidCoordinateArchive)
}

void ASTNodeArrayArchive_ASTUidCoordinateArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&column_uid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&row_absolute_) -
    reinterpret_cast<char*>(&column_uid_)) + sizeof(row_absolute_));
}

ASTNodeArrayArchive_ASTUidCoordinateArchive::~ASTNodeArrayArchive_ASTUidCoordinateArchive() {
  // @@protoc_insertion_point(destructor:TSCE.ASTNodeArrayArchive.ASTUidCoordinateArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ASTNodeArrayArchive_ASTUidCoordinateArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete column_uid_;
  if (this != internal_default_instance()) delete row_uid_;
}

void ASTNodeArrayArchive_ASTUidCoordinateArchive::ArenaDtor(void* object) {
  ASTNodeArrayArchive_ASTUidCoordinateArchive* _this = reinterpret_cast< ASTNodeArrayArchive_ASTUidCoordinateArchive* >(object);
  (void)_this;
}
void ASTNodeArrayArchive_ASTUidCoordinateArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ASTNodeArrayArchive_ASTUidCoordinateArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ASTNodeArrayArchive_ASTUidCoordinateArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.ASTNodeArrayArchive.ASTUidCoordinateArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(column_uid_ != nullptr);
      column_uid_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(row_uid_ != nullptr);
      row_uid_->Clear();
    }
  }
  ::memset(&column_absolute_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&row_absolute_) -
      reinterpret_cast<char*>(&column_absolute_)) + sizeof(row_absolute_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ASTNodeArrayArchive_ASTUidCoordinateArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.UUID column_uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_column_uid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.UUID row_uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_row_uid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool column_absolute = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_column_absolute(&has_bits);
          column_absolute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool row_absolute = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_row_absolute(&has_bits);
          row_absolute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ASTNodeArrayArchive_ASTUidCoordinateArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.ASTNodeArrayArchive.ASTUidCoordinateArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSP.UUID column_uid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::column_uid(this), target, stream);
  }

  // required .TSP.UUID row_uid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::row_uid(this), target, stream);
  }

  // required bool column_absolute = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_column_absolute(), target);
  }

  // required bool row_absolute = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_row_absolute(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.ASTNodeArrayArchive.ASTUidCoordinateArchive)
  return target;
}

size_t ASTNodeArrayArchive_ASTUidCoordinateArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.ASTNodeArrayArchive.ASTUidCoordinateArchive)
  size_t total_size = 0;

  if (_internal_has_column_uid()) {
    // required .TSP.UUID column_uid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *column_uid_);
  }

  if (_internal_has_row_uid()) {
    // required .TSP.UUID row_uid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *row_uid_);
  }

  if (_internal_has_column_absolute()) {
    // required bool column_absolute = 3;
    total_size += 1 + 1;
  }

  if (_internal_has_row_absolute()) {
    // required bool row_absolute = 4;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t ASTNodeArrayArchive_ASTUidCoordinateArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.ASTNodeArrayArchive.ASTUidCoordinateArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .TSP.UUID column_uid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *column_uid_);

    // required .TSP.UUID row_uid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *row_uid_);

    // required bool column_absolute = 3;
    total_size += 1 + 1;

    // required bool row_absolute = 4;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ASTNodeArrayArchive_ASTUidCoordinateArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.ASTNodeArrayArchive.ASTUidCoordinateArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ASTNodeArrayArchive_ASTUidCoordinateArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ASTNodeArrayArchive_ASTUidCoordinateArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.ASTNodeArrayArchive.ASTUidCoordinateArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.ASTNodeArrayArchive.ASTUidCoordinateArchive)
    MergeFrom(*source);
  }
}

void ASTNodeArrayArchive_ASTUidCoordinateArchive::MergeFrom(const ASTNodeArrayArchive_ASTUidCoordinateArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.ASTNodeArrayArchive.ASTUidCoordinateArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_column_uid()->::TSP::UUID::MergeFrom(from._internal_column_uid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_row_uid()->::TSP::UUID::MergeFrom(from._internal_row_uid());
    }
    if (cached_has_bits & 0x00000004u) {
      column_absolute_ = from.column_absolute_;
    }
    if (cached_has_bits & 0x00000008u) {
      row_absolute_ = from.row_absolute_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ASTNodeArrayArchive_ASTUidCoordinateArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.ASTNodeArrayArchive.ASTUidCoordinateArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ASTNodeArrayArchive_ASTUidCoordinateArchive::CopyFrom(const ASTNodeArrayArchive_ASTUidCoordinateArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.ASTNodeArrayArchive.ASTUidCoordinateArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ASTNodeArrayArchive_ASTUidCoordinateArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_column_uid()) {
    if (!column_uid_->IsInitialized()) return false;
  }
  if (_internal_has_row_uid()) {
    if (!row_uid_->IsInitialized()) return false;
  }
  return true;
}

void ASTNodeArrayArchive_ASTUidCoordinateArchive::InternalSwap(ASTNodeArrayArchive_ASTUidCoordinateArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ASTNodeArrayArchive_ASTUidCoordinateArchive, row_absolute_)
      + sizeof(ASTNodeArrayArchive_ASTUidCoordinateArchive::row_absolute_)
      - PROTOBUF_FIELD_OFFSET(ASTNodeArrayArchive_ASTUidCoordinateArchive, column_uid_)>(
          reinterpret_cast<char*>(&column_uid_),
          reinterpret_cast<char*>(&other->column_uid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ASTNodeArrayArchive_ASTUidCoordinateArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[92]);
}

// ===================================================================

class ASTNodeArrayArchive_ASTCategoryReferenceArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ASTNodeArrayArchive_ASTCategoryReferenceArchive>()._has_bits_);
  static const ::TSCE::CategoryReferenceArchive& category_ref(const ASTNodeArrayArchive_ASTCategoryReferenceArchive* msg);
  static void set_has_category_ref(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSCE::CategoryReferenceArchive&
ASTNodeArrayArchive_ASTCategoryReferenceArchive::_Internal::category_ref(const ASTNodeArrayArchive_ASTCategoryReferenceArchive* msg) {
  return *msg->category_ref_;
}
ASTNodeArrayArchive_ASTCategoryReferenceArchive::ASTNodeArrayArchive_ASTCategoryReferenceArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.ASTNodeArrayArchive.ASTCategoryReferenceArchive)
}
ASTNodeArrayArchive_ASTCategoryReferenceArchive::ASTNodeArrayArchive_ASTCategoryReferenceArchive(const ASTNodeArrayArchive_ASTCategoryReferenceArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_category_ref()) {
    category_ref_ = new ::TSCE::CategoryReferenceArchive(*from.category_ref_);
  } else {
    category_ref_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSCE.ASTNodeArrayArchive.ASTCategoryReferenceArchive)
}

void ASTNodeArrayArchive_ASTCategoryReferenceArchive::SharedCtor() {
category_ref_ = nullptr;
}

ASTNodeArrayArchive_ASTCategoryReferenceArchive::~ASTNodeArrayArchive_ASTCategoryReferenceArchive() {
  // @@protoc_insertion_point(destructor:TSCE.ASTNodeArrayArchive.ASTCategoryReferenceArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ASTNodeArrayArchive_ASTCategoryReferenceArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete category_ref_;
}

void ASTNodeArrayArchive_ASTCategoryReferenceArchive::ArenaDtor(void* object) {
  ASTNodeArrayArchive_ASTCategoryReferenceArchive* _this = reinterpret_cast< ASTNodeArrayArchive_ASTCategoryReferenceArchive* >(object);
  (void)_this;
}
void ASTNodeArrayArchive_ASTCategoryReferenceArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ASTNodeArrayArchive_ASTCategoryReferenceArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ASTNodeArrayArchive_ASTCategoryReferenceArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.ASTNodeArrayArchive.ASTCategoryReferenceArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(category_ref_ != nullptr);
    category_ref_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ASTNodeArrayArchive_ASTCategoryReferenceArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCE.CategoryReferenceArchive category_ref = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_category_ref(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ASTNodeArrayArchive_ASTCategoryReferenceArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.ASTNodeArrayArchive.ASTCategoryReferenceArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSCE.CategoryReferenceArchive category_ref = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::category_ref(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.ASTNodeArrayArchive.ASTCategoryReferenceArchive)
  return target;
}

size_t ASTNodeArrayArchive_ASTCategoryReferenceArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.ASTNodeArrayArchive.ASTCategoryReferenceArchive)
  size_t total_size = 0;

  // required .TSCE.CategoryReferenceArchive category_ref = 1;
  if (_internal_has_category_ref()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *category_ref_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ASTNodeArrayArchive_ASTCategoryReferenceArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.ASTNodeArrayArchive.ASTCategoryReferenceArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ASTNodeArrayArchive_ASTCategoryReferenceArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ASTNodeArrayArchive_ASTCategoryReferenceArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.ASTNodeArrayArchive.ASTCategoryReferenceArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.ASTNodeArrayArchive.ASTCategoryReferenceArchive)
    MergeFrom(*source);
  }
}

void ASTNodeArrayArchive_ASTCategoryReferenceArchive::MergeFrom(const ASTNodeArrayArchive_ASTCategoryReferenceArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.ASTNodeArrayArchive.ASTCategoryReferenceArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_category_ref()) {
    _internal_mutable_category_ref()->::TSCE::CategoryReferenceArchive::MergeFrom(from._internal_category_ref());
  }
}

void ASTNodeArrayArchive_ASTCategoryReferenceArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.ASTNodeArrayArchive.ASTCategoryReferenceArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ASTNodeArrayArchive_ASTCategoryReferenceArchive::CopyFrom(const ASTNodeArrayArchive_ASTCategoryReferenceArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.ASTNodeArrayArchive.ASTCategoryReferenceArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ASTNodeArrayArchive_ASTCategoryReferenceArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_category_ref()) {
    if (!category_ref_->IsInitialized()) return false;
  }
  return true;
}

void ASTNodeArrayArchive_ASTCategoryReferenceArchive::InternalSwap(ASTNodeArrayArchive_ASTCategoryReferenceArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(category_ref_, other->category_ref_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ASTNodeArrayArchive_ASTCategoryReferenceArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[93]);
}

// ===================================================================

class ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive>()._has_bits_);
  static void set_has_range_begin(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_range_end(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive::ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.ASTNodeArrayArchive.ASTColonTractArchive.ASTColonTractRelativeRangeArchive)
}
ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive::ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive(const ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&range_begin_, &from.range_begin_,
    static_cast<size_t>(reinterpret_cast<char*>(&range_end_) -
    reinterpret_cast<char*>(&range_begin_)) + sizeof(range_end_));
  // @@protoc_insertion_point(copy_constructor:TSCE.ASTNodeArrayArchive.ASTColonTractArchive.ASTColonTractRelativeRangeArchive)
}

void ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&range_begin_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&range_end_) -
    reinterpret_cast<char*>(&range_begin_)) + sizeof(range_end_));
}

ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive::~ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive() {
  // @@protoc_insertion_point(destructor:TSCE.ASTNodeArrayArchive.ASTColonTractArchive.ASTColonTractRelativeRangeArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive::ArenaDtor(void* object) {
  ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive* _this = reinterpret_cast< ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive* >(object);
  (void)_this;
}
void ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.ASTNodeArrayArchive.ASTColonTractArchive.ASTColonTractRelativeRangeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&range_begin_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&range_end_) -
        reinterpret_cast<char*>(&range_begin_)) + sizeof(range_end_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 range_begin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_range_begin(&has_bits);
          range_begin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 range_end = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_range_end(&has_bits);
          range_end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.ASTNodeArrayArchive.ASTColonTractArchive.ASTColonTractRelativeRangeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 range_begin = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_range_begin(), target);
  }

  // optional int32 range_end = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_range_end(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.ASTNodeArrayArchive.ASTColonTractArchive.ASTColonTractRelativeRangeArchive)
  return target;
}

size_t ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.ASTNodeArrayArchive.ASTColonTractArchive.ASTColonTractRelativeRangeArchive)
  size_t total_size = 0;

  // required int32 range_begin = 1;
  if (_internal_has_range_begin()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_range_begin());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 range_end = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_range_end());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.ASTNodeArrayArchive.ASTColonTractArchive.ASTColonTractRelativeRangeArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.ASTNodeArrayArchive.ASTColonTractArchive.ASTColonTractRelativeRangeArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.ASTNodeArrayArchive.ASTColonTractArchive.ASTColonTractRelativeRangeArchive)
    MergeFrom(*source);
  }
}

void ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive::MergeFrom(const ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.ASTNodeArrayArchive.ASTColonTractArchive.ASTColonTractRelativeRangeArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      range_begin_ = from.range_begin_;
    }
    if (cached_has_bits & 0x00000002u) {
      range_end_ = from.range_end_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.ASTNodeArrayArchive.ASTColonTractArchive.ASTColonTractRelativeRangeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive::CopyFrom(const ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.ASTNodeArrayArchive.ASTColonTractArchive.ASTColonTractRelativeRangeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive::InternalSwap(ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive, range_end_)
      + sizeof(ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive::range_end_)
      - PROTOBUF_FIELD_OFFSET(ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive, range_begin_)>(
          reinterpret_cast<char*>(&range_begin_),
          reinterpret_cast<char*>(&other->range_begin_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[94]);
}

// ===================================================================

class ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive>()._has_bits_);
  static void set_has_range_begin(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_range_end(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive::ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.ASTNodeArrayArchive.ASTColonTractArchive.ASTColonTractAbsoluteRangeArchive)
}
ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive::ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive(const ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&range_begin_, &from.range_begin_,
    static_cast<size_t>(reinterpret_cast<char*>(&range_end_) -
    reinterpret_cast<char*>(&range_begin_)) + sizeof(range_end_));
  // @@protoc_insertion_point(copy_constructor:TSCE.ASTNodeArrayArchive.ASTColonTractArchive.ASTColonTractAbsoluteRangeArchive)
}

void ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&range_begin_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&range_end_) -
    reinterpret_cast<char*>(&range_begin_)) + sizeof(range_end_));
}

ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive::~ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive() {
  // @@protoc_insertion_point(destructor:TSCE.ASTNodeArrayArchive.ASTColonTractArchive.ASTColonTractAbsoluteRangeArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive::ArenaDtor(void* object) {
  ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive* _this = reinterpret_cast< ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive* >(object);
  (void)_this;
}
void ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.ASTNodeArrayArchive.ASTColonTractArchive.ASTColonTractAbsoluteRangeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&range_begin_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&range_end_) -
        reinterpret_cast<char*>(&range_begin_)) + sizeof(range_end_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 range_begin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_range_begin(&has_bits);
          range_begin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 range_end = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_range_end(&has_bits);
          range_end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.ASTNodeArrayArchive.ASTColonTractArchive.ASTColonTractAbsoluteRangeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 range_begin = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_range_begin(), target);
  }

  // optional uint32 range_end = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_range_end(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.ASTNodeArrayArchive.ASTColonTractArchive.ASTColonTractAbsoluteRangeArchive)
  return target;
}

size_t ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.ASTNodeArrayArchive.ASTColonTractArchive.ASTColonTractAbsoluteRangeArchive)
  size_t total_size = 0;

  // required uint32 range_begin = 1;
  if (_internal_has_range_begin()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_range_begin());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 range_end = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_range_end());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.ASTNodeArrayArchive.ASTColonTractArchive.ASTColonTractAbsoluteRangeArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.ASTNodeArrayArchive.ASTColonTractArchive.ASTColonTractAbsoluteRangeArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.ASTNodeArrayArchive.ASTColonTractArchive.ASTColonTractAbsoluteRangeArchive)
    MergeFrom(*source);
  }
}

void ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive::MergeFrom(const ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.ASTNodeArrayArchive.ASTColonTractArchive.ASTColonTractAbsoluteRangeArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      range_begin_ = from.range_begin_;
    }
    if (cached_has_bits & 0x00000002u) {
      range_end_ = from.range_end_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.ASTNodeArrayArchive.ASTColonTractArchive.ASTColonTractAbsoluteRangeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive::CopyFrom(const ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.ASTNodeArrayArchive.ASTColonTractArchive.ASTColonTractAbsoluteRangeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive::InternalSwap(ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive, range_end_)
      + sizeof(ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive::range_end_)
      - PROTOBUF_FIELD_OFFSET(ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive, range_begin_)>(
          reinterpret_cast<char*>(&range_begin_),
          reinterpret_cast<char*>(&other->range_begin_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[95]);
}

// ===================================================================

class ASTNodeArrayArchive_ASTColonTractArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ASTNodeArrayArchive_ASTColonTractArchive>()._has_bits_);
  static void set_has_preserve_rectangular(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ASTNodeArrayArchive_ASTColonTractArchive::ASTNodeArrayArchive_ASTColonTractArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  relative_column_(arena),
  relative_row_(arena),
  absolute_column_(arena),
  absolute_row_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.ASTNodeArrayArchive.ASTColonTractArchive)
}
ASTNodeArrayArchive_ASTColonTractArchive::ASTNodeArrayArchive_ASTColonTractArchive(const ASTNodeArrayArchive_ASTColonTractArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      relative_column_(from.relative_column_),
      relative_row_(from.relative_row_),
      absolute_column_(from.absolute_column_),
      absolute_row_(from.absolute_row_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  preserve_rectangular_ = from.preserve_rectangular_;
  // @@protoc_insertion_point(copy_constructor:TSCE.ASTNodeArrayArchive.ASTColonTractArchive)
}

void ASTNodeArrayArchive_ASTColonTractArchive::SharedCtor() {
preserve_rectangular_ = true;
}

ASTNodeArrayArchive_ASTColonTractArchive::~ASTNodeArrayArchive_ASTColonTractArchive() {
  // @@protoc_insertion_point(destructor:TSCE.ASTNodeArrayArchive.ASTColonTractArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ASTNodeArrayArchive_ASTColonTractArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ASTNodeArrayArchive_ASTColonTractArchive::ArenaDtor(void* object) {
  ASTNodeArrayArchive_ASTColonTractArchive* _this = reinterpret_cast< ASTNodeArrayArchive_ASTColonTractArchive* >(object);
  (void)_this;
}
void ASTNodeArrayArchive_ASTColonTractArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ASTNodeArrayArchive_ASTColonTractArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ASTNodeArrayArchive_ASTColonTractArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.ASTNodeArrayArchive.ASTColonTractArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  relative_column_.Clear();
  relative_row_.Clear();
  absolute_column_.Clear();
  absolute_row_.Clear();
  preserve_rectangular_ = true;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ASTNodeArrayArchive_ASTColonTractArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSCE.ASTNodeArrayArchive.ASTColonTractArchive.ASTColonTractRelativeRangeArchive relative_column = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_relative_column(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSCE.ASTNodeArrayArchive.ASTColonTractArchive.ASTColonTractRelativeRangeArchive relative_row = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_relative_row(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSCE.ASTNodeArrayArchive.ASTColonTractArchive.ASTColonTractAbsoluteRangeArchive absolute_column = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_absolute_column(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSCE.ASTNodeArrayArchive.ASTColonTractArchive.ASTColonTractAbsoluteRangeArchive absolute_row = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_absolute_row(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool preserve_rectangular = 5 [default = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_preserve_rectangular(&has_bits);
          preserve_rectangular_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ASTNodeArrayArchive_ASTColonTractArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.ASTNodeArrayArchive.ASTColonTractArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSCE.ASTNodeArrayArchive.ASTColonTractArchive.ASTColonTractRelativeRangeArchive relative_column = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_relative_column_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_relative_column(i), target, stream);
  }

  // repeated .TSCE.ASTNodeArrayArchive.ASTColonTractArchive.ASTColonTractRelativeRangeArchive relative_row = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_relative_row_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_relative_row(i), target, stream);
  }

  // repeated .TSCE.ASTNodeArrayArchive.ASTColonTractArchive.ASTColonTractAbsoluteRangeArchive absolute_column = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_absolute_column_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_absolute_column(i), target, stream);
  }

  // repeated .TSCE.ASTNodeArrayArchive.ASTColonTractArchive.ASTColonTractAbsoluteRangeArchive absolute_row = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_absolute_row_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_absolute_row(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool preserve_rectangular = 5 [default = true];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_preserve_rectangular(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.ASTNodeArrayArchive.ASTColonTractArchive)
  return target;
}

size_t ASTNodeArrayArchive_ASTColonTractArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.ASTNodeArrayArchive.ASTColonTractArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.ASTNodeArrayArchive.ASTColonTractArchive.ASTColonTractRelativeRangeArchive relative_column = 1;
  total_size += 1UL * this->_internal_relative_column_size();
  for (const auto& msg : this->relative_column_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSCE.ASTNodeArrayArchive.ASTColonTractArchive.ASTColonTractRelativeRangeArchive relative_row = 2;
  total_size += 1UL * this->_internal_relative_row_size();
  for (const auto& msg : this->relative_row_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSCE.ASTNodeArrayArchive.ASTColonTractArchive.ASTColonTractAbsoluteRangeArchive absolute_column = 3;
  total_size += 1UL * this->_internal_absolute_column_size();
  for (const auto& msg : this->absolute_column_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSCE.ASTNodeArrayArchive.ASTColonTractArchive.ASTColonTractAbsoluteRangeArchive absolute_row = 4;
  total_size += 1UL * this->_internal_absolute_row_size();
  for (const auto& msg : this->absolute_row_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional bool preserve_rectangular = 5 [default = true];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ASTNodeArrayArchive_ASTColonTractArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.ASTNodeArrayArchive.ASTColonTractArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ASTNodeArrayArchive_ASTColonTractArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ASTNodeArrayArchive_ASTColonTractArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.ASTNodeArrayArchive.ASTColonTractArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.ASTNodeArrayArchive.ASTColonTractArchive)
    MergeFrom(*source);
  }
}

void ASTNodeArrayArchive_ASTColonTractArchive::MergeFrom(const ASTNodeArrayArchive_ASTColonTractArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.ASTNodeArrayArchive.ASTColonTractArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  relative_column_.MergeFrom(from.relative_column_);
  relative_row_.MergeFrom(from.relative_row_);
  absolute_column_.MergeFrom(from.absolute_column_);
  absolute_row_.MergeFrom(from.absolute_row_);
  if (from._internal_has_preserve_rectangular()) {
    _internal_set_preserve_rectangular(from._internal_preserve_rectangular());
  }
}

void ASTNodeArrayArchive_ASTColonTractArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.ASTNodeArrayArchive.ASTColonTractArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ASTNodeArrayArchive_ASTColonTractArchive::CopyFrom(const ASTNodeArrayArchive_ASTColonTractArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.ASTNodeArrayArchive.ASTColonTractArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ASTNodeArrayArchive_ASTColonTractArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(relative_column_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(relative_row_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(absolute_column_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(absolute_row_)) return false;
  return true;
}

void ASTNodeArrayArchive_ASTColonTractArchive::InternalSwap(ASTNodeArrayArchive_ASTColonTractArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  relative_column_.InternalSwap(&other->relative_column_);
  relative_row_.InternalSwap(&other->relative_row_);
  absolute_column_.InternalSwap(&other->absolute_column_);
  absolute_row_.InternalSwap(&other->absolute_row_);
  swap(preserve_rectangular_, other->preserve_rectangular_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ASTNodeArrayArchive_ASTColonTractArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[96]);
}

// ===================================================================

class ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive>()._has_bits_);
  static const ::TSP::CFUUIDArchive& table_id(const ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive* msg);
  static void set_has_table_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_ast_reference_whitespace_after_sheet_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ast_reference_whitespace_before_table_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ast_reference_whitespace_after_table_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ast_reference_whitespace_before_cell_address(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000010) ^ 0x00000010) != 0;
  }
};

const ::TSP::CFUUIDArchive&
ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::_Internal::table_id(const ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive* msg) {
  return *msg->table_id_;
}
void ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::clear_table_id() {
  if (table_id_ != nullptr) table_id_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive)
}
ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive(const ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ast_reference_whitespace_after_sheet_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ast_reference_whitespace_after_sheet_name()) {
    ast_reference_whitespace_after_sheet_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ast_reference_whitespace_after_sheet_name(), 
      GetArena());
  }
  ast_reference_whitespace_before_table_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ast_reference_whitespace_before_table_name()) {
    ast_reference_whitespace_before_table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ast_reference_whitespace_before_table_name(), 
      GetArena());
  }
  ast_reference_whitespace_after_table_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ast_reference_whitespace_after_table_name()) {
    ast_reference_whitespace_after_table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ast_reference_whitespace_after_table_name(), 
      GetArena());
  }
  ast_reference_whitespace_before_cell_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ast_reference_whitespace_before_cell_address()) {
    ast_reference_whitespace_before_cell_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ast_reference_whitespace_before_cell_address(), 
      GetArena());
  }
  if (from._internal_has_table_id()) {
    table_id_ = new ::TSP::CFUUIDArchive(*from.table_id_);
  } else {
    table_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive)
}

void ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::SharedCtor() {
ast_reference_whitespace_after_sheet_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
ast_reference_whitespace_before_table_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
ast_reference_whitespace_after_table_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
ast_reference_whitespace_before_cell_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
table_id_ = nullptr;
}

ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::~ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive() {
  // @@protoc_insertion_point(destructor:TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ast_reference_whitespace_after_sheet_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ast_reference_whitespace_before_table_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ast_reference_whitespace_after_table_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ast_reference_whitespace_before_cell_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete table_id_;
}

void ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::ArenaDtor(void* object) {
  ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive* _this = reinterpret_cast< ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive* >(object);
  (void)_this;
}
void ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      ast_reference_whitespace_after_sheet_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ast_reference_whitespace_before_table_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      ast_reference_whitespace_after_table_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      ast_reference_whitespace_before_cell_address_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(table_id_ != nullptr);
      table_id_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.CFUUIDArchive table_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string AST_reference_whitespace_after_sheet_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_ast_reference_whitespace_after_sheet_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive.AST_reference_whitespace_after_sheet_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string AST_reference_whitespace_before_table_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_ast_reference_whitespace_before_table_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive.AST_reference_whitespace_before_table_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string AST_reference_whitespace_after_table_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_ast_reference_whitespace_after_table_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive.AST_reference_whitespace_after_table_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string AST_reference_whitespace_before_cell_address = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_ast_reference_whitespace_before_cell_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive.AST_reference_whitespace_before_cell_address");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSP.CFUUIDArchive table_id = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::table_id(this), target, stream);
  }

  // optional string AST_reference_whitespace_after_sheet_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ast_reference_whitespace_after_sheet_name().data(), static_cast<int>(this->_internal_ast_reference_whitespace_after_sheet_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive.AST_reference_whitespace_after_sheet_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ast_reference_whitespace_after_sheet_name(), target);
  }

  // optional string AST_reference_whitespace_before_table_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ast_reference_whitespace_before_table_name().data(), static_cast<int>(this->_internal_ast_reference_whitespace_before_table_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive.AST_reference_whitespace_before_table_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_ast_reference_whitespace_before_table_name(), target);
  }

  // optional string AST_reference_whitespace_after_table_name = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ast_reference_whitespace_after_table_name().data(), static_cast<int>(this->_internal_ast_reference_whitespace_after_table_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive.AST_reference_whitespace_after_table_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_ast_reference_whitespace_after_table_name(), target);
  }

  // optional string AST_reference_whitespace_before_cell_address = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ast_reference_whitespace_before_cell_address().data(), static_cast<int>(this->_internal_ast_reference_whitespace_before_cell_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive.AST_reference_whitespace_before_cell_address");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_ast_reference_whitespace_before_cell_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive)
  return target;
}

size_t ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive)
  size_t total_size = 0;

  // required .TSP.CFUUIDArchive table_id = 1;
  if (_internal_has_table_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *table_id_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string AST_reference_whitespace_after_sheet_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ast_reference_whitespace_after_sheet_name());
    }

    // optional string AST_reference_whitespace_before_table_name = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ast_reference_whitespace_before_table_name());
    }

    // optional string AST_reference_whitespace_after_table_name = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ast_reference_whitespace_after_table_name());
    }

    // optional string AST_reference_whitespace_before_cell_address = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ast_reference_whitespace_before_cell_address());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive)
    MergeFrom(*source);
  }
}

void ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::MergeFrom(const ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_ast_reference_whitespace_after_sheet_name(from._internal_ast_reference_whitespace_after_sheet_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_ast_reference_whitespace_before_table_name(from._internal_ast_reference_whitespace_before_table_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_ast_reference_whitespace_after_table_name(from._internal_ast_reference_whitespace_after_table_name());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_ast_reference_whitespace_before_cell_address(from._internal_ast_reference_whitespace_before_cell_address());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_table_id()->::TSP::CFUUIDArchive::MergeFrom(from._internal_table_id());
    }
  }
}

void ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::CopyFrom(const ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::InternalSwap(ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ast_reference_whitespace_after_sheet_name_.Swap(&other->ast_reference_whitespace_after_sheet_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ast_reference_whitespace_before_table_name_.Swap(&other->ast_reference_whitespace_before_table_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ast_reference_whitespace_after_table_name_.Swap(&other->ast_reference_whitespace_after_table_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ast_reference_whitespace_before_cell_address_.Swap(&other->ast_reference_whitespace_before_cell_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(table_id_, other->table_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[97]);
}

// ===================================================================

class ASTNodeArrayArchive_ASTLetNodeWhitespace::_Internal {
 public:
  using HasBits = decltype(std::declval<ASTNodeArrayArchive_ASTLetNodeWhitespace>()._has_bits_);
  static void set_has_ast_let_whitespace_after_let(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ast_let_whitespace_after_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ast_let_whitespace_after_equals(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ast_let_whitespace_after_delimiter(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

ASTNodeArrayArchive_ASTLetNodeWhitespace::ASTNodeArrayArchive_ASTLetNodeWhitespace(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.ASTNodeArrayArchive.ASTLetNodeWhitespace)
}
ASTNodeArrayArchive_ASTLetNodeWhitespace::ASTNodeArrayArchive_ASTLetNodeWhitespace(const ASTNodeArrayArchive_ASTLetNodeWhitespace& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ast_let_whitespace_after_let_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ast_let_whitespace_after_let()) {
    ast_let_whitespace_after_let_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ast_let_whitespace_after_let(), 
      GetArena());
  }
  ast_let_whitespace_after_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ast_let_whitespace_after_identifier()) {
    ast_let_whitespace_after_identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ast_let_whitespace_after_identifier(), 
      GetArena());
  }
  ast_let_whitespace_after_equals_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ast_let_whitespace_after_equals()) {
    ast_let_whitespace_after_equals_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ast_let_whitespace_after_equals(), 
      GetArena());
  }
  ast_let_whitespace_after_delimiter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ast_let_whitespace_after_delimiter()) {
    ast_let_whitespace_after_delimiter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ast_let_whitespace_after_delimiter(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:TSCE.ASTNodeArrayArchive.ASTLetNodeWhitespace)
}

void ASTNodeArrayArchive_ASTLetNodeWhitespace::SharedCtor() {
ast_let_whitespace_after_let_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
ast_let_whitespace_after_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
ast_let_whitespace_after_equals_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
ast_let_whitespace_after_delimiter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ASTNodeArrayArchive_ASTLetNodeWhitespace::~ASTNodeArrayArchive_ASTLetNodeWhitespace() {
  // @@protoc_insertion_point(destructor:TSCE.ASTNodeArrayArchive.ASTLetNodeWhitespace)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ASTNodeArrayArchive_ASTLetNodeWhitespace::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ast_let_whitespace_after_let_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ast_let_whitespace_after_identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ast_let_whitespace_after_equals_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ast_let_whitespace_after_delimiter_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ASTNodeArrayArchive_ASTLetNodeWhitespace::ArenaDtor(void* object) {
  ASTNodeArrayArchive_ASTLetNodeWhitespace* _this = reinterpret_cast< ASTNodeArrayArchive_ASTLetNodeWhitespace* >(object);
  (void)_this;
}
void ASTNodeArrayArchive_ASTLetNodeWhitespace::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ASTNodeArrayArchive_ASTLetNodeWhitespace::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ASTNodeArrayArchive_ASTLetNodeWhitespace::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.ASTNodeArrayArchive.ASTLetNodeWhitespace)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      ast_let_whitespace_after_let_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ast_let_whitespace_after_identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      ast_let_whitespace_after_equals_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      ast_let_whitespace_after_delimiter_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ASTNodeArrayArchive_ASTLetNodeWhitespace::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string AST_let_whitespace_after_let = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_ast_let_whitespace_after_let();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSCE.ASTNodeArrayArchive.ASTLetNodeWhitespace.AST_let_whitespace_after_let");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string AST_let_whitespace_after_identifier = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_ast_let_whitespace_after_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSCE.ASTNodeArrayArchive.ASTLetNodeWhitespace.AST_let_whitespace_after_identifier");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string AST_let_whitespace_after_equals = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_ast_let_whitespace_after_equals();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSCE.ASTNodeArrayArchive.ASTLetNodeWhitespace.AST_let_whitespace_after_equals");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string AST_let_whitespace_after_delimiter = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_ast_let_whitespace_after_delimiter();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSCE.ASTNodeArrayArchive.ASTLetNodeWhitespace.AST_let_whitespace_after_delimiter");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ASTNodeArrayArchive_ASTLetNodeWhitespace::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.ASTNodeArrayArchive.ASTLetNodeWhitespace)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string AST_let_whitespace_after_let = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ast_let_whitespace_after_let().data(), static_cast<int>(this->_internal_ast_let_whitespace_after_let().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCE.ASTNodeArrayArchive.ASTLetNodeWhitespace.AST_let_whitespace_after_let");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ast_let_whitespace_after_let(), target);
  }

  // optional string AST_let_whitespace_after_identifier = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ast_let_whitespace_after_identifier().data(), static_cast<int>(this->_internal_ast_let_whitespace_after_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCE.ASTNodeArrayArchive.ASTLetNodeWhitespace.AST_let_whitespace_after_identifier");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ast_let_whitespace_after_identifier(), target);
  }

  // optional string AST_let_whitespace_after_equals = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ast_let_whitespace_after_equals().data(), static_cast<int>(this->_internal_ast_let_whitespace_after_equals().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCE.ASTNodeArrayArchive.ASTLetNodeWhitespace.AST_let_whitespace_after_equals");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_ast_let_whitespace_after_equals(), target);
  }

  // optional string AST_let_whitespace_after_delimiter = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ast_let_whitespace_after_delimiter().data(), static_cast<int>(this->_internal_ast_let_whitespace_after_delimiter().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCE.ASTNodeArrayArchive.ASTLetNodeWhitespace.AST_let_whitespace_after_delimiter");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_ast_let_whitespace_after_delimiter(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.ASTNodeArrayArchive.ASTLetNodeWhitespace)
  return target;
}

size_t ASTNodeArrayArchive_ASTLetNodeWhitespace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.ASTNodeArrayArchive.ASTLetNodeWhitespace)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string AST_let_whitespace_after_let = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ast_let_whitespace_after_let());
    }

    // optional string AST_let_whitespace_after_identifier = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ast_let_whitespace_after_identifier());
    }

    // optional string AST_let_whitespace_after_equals = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ast_let_whitespace_after_equals());
    }

    // optional string AST_let_whitespace_after_delimiter = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ast_let_whitespace_after_delimiter());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ASTNodeArrayArchive_ASTLetNodeWhitespace::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.ASTNodeArrayArchive.ASTLetNodeWhitespace)
  GOOGLE_DCHECK_NE(&from, this);
  const ASTNodeArrayArchive_ASTLetNodeWhitespace* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ASTNodeArrayArchive_ASTLetNodeWhitespace>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.ASTNodeArrayArchive.ASTLetNodeWhitespace)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.ASTNodeArrayArchive.ASTLetNodeWhitespace)
    MergeFrom(*source);
  }
}

void ASTNodeArrayArchive_ASTLetNodeWhitespace::MergeFrom(const ASTNodeArrayArchive_ASTLetNodeWhitespace& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.ASTNodeArrayArchive.ASTLetNodeWhitespace)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_ast_let_whitespace_after_let(from._internal_ast_let_whitespace_after_let());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_ast_let_whitespace_after_identifier(from._internal_ast_let_whitespace_after_identifier());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_ast_let_whitespace_after_equals(from._internal_ast_let_whitespace_after_equals());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_ast_let_whitespace_after_delimiter(from._internal_ast_let_whitespace_after_delimiter());
    }
  }
}

void ASTNodeArrayArchive_ASTLetNodeWhitespace::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.ASTNodeArrayArchive.ASTLetNodeWhitespace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ASTNodeArrayArchive_ASTLetNodeWhitespace::CopyFrom(const ASTNodeArrayArchive_ASTLetNodeWhitespace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.ASTNodeArrayArchive.ASTLetNodeWhitespace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ASTNodeArrayArchive_ASTLetNodeWhitespace::IsInitialized() const {
  return true;
}

void ASTNodeArrayArchive_ASTLetNodeWhitespace::InternalSwap(ASTNodeArrayArchive_ASTLetNodeWhitespace* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ast_let_whitespace_after_let_.Swap(&other->ast_let_whitespace_after_let_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ast_let_whitespace_after_identifier_.Swap(&other->ast_let_whitespace_after_identifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ast_let_whitespace_after_equals_.Swap(&other->ast_let_whitespace_after_equals_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ast_let_whitespace_after_delimiter_.Swap(&other->ast_let_whitespace_after_delimiter_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ASTNodeArrayArchive_ASTLetNodeWhitespace::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[98]);
}

// ===================================================================

class ASTNodeArrayArchive_ASTNodeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ASTNodeArrayArchive_ASTNodeArchive>()._has_bits_);
  static void set_has_ast_node_type(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static void set_has_ast_function_node_index(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_ast_function_node_numargs(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_ast_number_node_number(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_ast_boolean_node_boolean(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_ast_string_node_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ast_date_node_datenum(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_ast_date_node_suppress_date_format(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_ast_date_node_suppress_time_format(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_ast_date_node_date_time_format(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ast_duration_node_unitnum(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_ast_duration_node_unit(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_ast_duration_node_style(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_ast_duration_node_duration_unit_largest(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_ast_duration_node_duration_unit_smallest(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_ast_duration_node_use_automatic_units(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_ast_token_node_boolean(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_ast_array_node_numcol(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_ast_array_node_numrow(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_ast_list_node_numargs(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static const ::TSCE::ASTNodeArrayArchive& ast_thunk_node_array(const ASTNodeArrayArchive_ASTNodeArchive* msg);
  static void set_has_ast_thunk_node_array(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSCE::ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive& ast_local_cell_reference_node_reference(const ASTNodeArrayArchive_ASTNodeArchive* msg);
  static void set_has_ast_local_cell_reference_node_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSCE::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive& ast_cross_table_cell_reference_node_reference(const ASTNodeArrayArchive_ASTNodeArchive* msg);
  static void set_has_ast_cross_table_cell_reference_node_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_ast_unknown_function_node_string(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ast_unknown_function_node_numargs(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_ast_whitespace(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSCE::ASTNodeArrayArchive_ASTColumnCoordinateArchive& ast_column(const ASTNodeArrayArchive_ASTNodeArchive* msg);
  static void set_has_ast_column(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::TSCE::ASTNodeArrayArchive_ASTRowCoordinateArchive& ast_row(const ASTNodeArrayArchive_ASTNodeArchive* msg);
  static void set_has_ast_row(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::TSCE::ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive& ast_cross_table_reference_extra_info(const ASTNodeArrayArchive_ASTNodeArchive* msg);
  static void set_has_ast_cross_table_reference_extra_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::TSCE::ASTNodeArrayArchive_ASTUidCoordinateArchive& ast_uid_coordinate(const ASTNodeArrayArchive_ASTNodeArchive* msg);
  static void set_has_ast_uid_coordinate(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::TSCE::ASTNodeArrayArchive_ASTStickyBits& ast_sticky_bits(const ASTNodeArrayArchive_ASTNodeArchive* msg);
  static void set_has_ast_sticky_bits(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::TSCE::ASTNodeArrayArchive_ASTStickyBits& ast_frozen_sticky_bits(const ASTNodeArrayArchive_ASTNodeArchive* msg);
  static void set_has_ast_frozen_sticky_bits(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_ast_let_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSCE::ASTNodeArrayArchive& ast_let_e2(const ASTNodeArrayArchive_ASTNodeArchive* msg);
  static void set_has_ast_let_e2(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::TSCE::ASTNodeArrayArchive_ASTLetNodeWhitespace& ast_let_whitespace(const ASTNodeArrayArchive_ASTNodeArchive* msg);
  static void set_has_ast_let_whitespace(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_ast_symbol(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static const ::TSCE::ASTNodeArrayArchive_ASTUidTractList& ast_tract_list(const ASTNodeArrayArchive_ASTNodeArchive* msg);
  static void set_has_ast_tract_list(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::TSCE::ASTNodeArrayArchive_ASTCategoryReferenceArchive& ast_category_ref(const ASTNodeArrayArchive_ASTNodeArchive* msg);
  static void set_has_ast_category_ref(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::TSCE::ASTNodeArrayArchive_ASTColonTractArchive& ast_colon_tract(const ASTNodeArrayArchive_ASTNodeArchive* msg);
  static void set_has_ast_colon_tract(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_ast_number_node_decimal_low(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has_ast_number_node_decimal_high(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[1] & 0x00000100) ^ 0x00000100) != 0;
  }
};

const ::TSCE::ASTNodeArrayArchive&
ASTNodeArrayArchive_ASTNodeArchive::_Internal::ast_thunk_node_array(const ASTNodeArrayArchive_ASTNodeArchive* msg) {
  return *msg->ast_thunk_node_array_;
}
const ::TSCE::ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive&
ASTNodeArrayArchive_ASTNodeArchive::_Internal::ast_local_cell_reference_node_reference(const ASTNodeArrayArchive_ASTNodeArchive* msg) {
  return *msg->ast_local_cell_reference_node_reference_;
}
const ::TSCE::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive&
ASTNodeArrayArchive_ASTNodeArchive::_Internal::ast_cross_table_cell_reference_node_reference(const ASTNodeArrayArchive_ASTNodeArchive* msg) {
  return *msg->ast_cross_table_cell_reference_node_reference_;
}
const ::TSCE::ASTNodeArrayArchive_ASTColumnCoordinateArchive&
ASTNodeArrayArchive_ASTNodeArchive::_Internal::ast_column(const ASTNodeArrayArchive_ASTNodeArchive* msg) {
  return *msg->ast_column_;
}
const ::TSCE::ASTNodeArrayArchive_ASTRowCoordinateArchive&
ASTNodeArrayArchive_ASTNodeArchive::_Internal::ast_row(const ASTNodeArrayArchive_ASTNodeArchive* msg) {
  return *msg->ast_row_;
}
const ::TSCE::ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive&
ASTNodeArrayArchive_ASTNodeArchive::_Internal::ast_cross_table_reference_extra_info(const ASTNodeArrayArchive_ASTNodeArchive* msg) {
  return *msg->ast_cross_table_reference_extra_info_;
}
const ::TSCE::ASTNodeArrayArchive_ASTUidCoordinateArchive&
ASTNodeArrayArchive_ASTNodeArchive::_Internal::ast_uid_coordinate(const ASTNodeArrayArchive_ASTNodeArchive* msg) {
  return *msg->ast_uid_coordinate_;
}
const ::TSCE::ASTNodeArrayArchive_ASTStickyBits&
ASTNodeArrayArchive_ASTNodeArchive::_Internal::ast_sticky_bits(const ASTNodeArrayArchive_ASTNodeArchive* msg) {
  return *msg->ast_sticky_bits_;
}
const ::TSCE::ASTNodeArrayArchive_ASTStickyBits&
ASTNodeArrayArchive_ASTNodeArchive::_Internal::ast_frozen_sticky_bits(const ASTNodeArrayArchive_ASTNodeArchive* msg) {
  return *msg->ast_frozen_sticky_bits_;
}
const ::TSCE::ASTNodeArrayArchive&
ASTNodeArrayArchive_ASTNodeArchive::_Internal::ast_let_e2(const ASTNodeArrayArchive_ASTNodeArchive* msg) {
  return *msg->ast_let_e2_;
}
const ::TSCE::ASTNodeArrayArchive_ASTLetNodeWhitespace&
ASTNodeArrayArchive_ASTNodeArchive::_Internal::ast_let_whitespace(const ASTNodeArrayArchive_ASTNodeArchive* msg) {
  return *msg->ast_let_whitespace_;
}
const ::TSCE::ASTNodeArrayArchive_ASTUidTractList&
ASTNodeArrayArchive_ASTNodeArchive::_Internal::ast_tract_list(const ASTNodeArrayArchive_ASTNodeArchive* msg) {
  return *msg->ast_tract_list_;
}
const ::TSCE::ASTNodeArrayArchive_ASTCategoryReferenceArchive&
ASTNodeArrayArchive_ASTNodeArchive::_Internal::ast_category_ref(const ASTNodeArrayArchive_ASTNodeArchive* msg) {
  return *msg->ast_category_ref_;
}
const ::TSCE::ASTNodeArrayArchive_ASTColonTractArchive&
ASTNodeArrayArchive_ASTNodeArchive::_Internal::ast_colon_tract(const ASTNodeArrayArchive_ASTNodeArchive* msg) {
  return *msg->ast_colon_tract_;
}
ASTNodeArrayArchive_ASTNodeArchive::ASTNodeArrayArchive_ASTNodeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.ASTNodeArrayArchive.ASTNodeArchive)
}
ASTNodeArrayArchive_ASTNodeArchive::ASTNodeArrayArchive_ASTNodeArchive(const ASTNodeArrayArchive_ASTNodeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ast_string_node_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ast_string_node_string()) {
    ast_string_node_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ast_string_node_string(), 
      GetArena());
  }
  ast_unknown_function_node_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ast_unknown_function_node_string()) {
    ast_unknown_function_node_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ast_unknown_function_node_string(), 
      GetArena());
  }
  ast_date_node_date_time_format_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ast_date_node_date_time_format()) {
    ast_date_node_date_time_format_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ast_date_node_date_time_format(), 
      GetArena());
  }
  ast_whitespace_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ast_whitespace()) {
    ast_whitespace_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ast_whitespace(), 
      GetArena());
  }
  ast_let_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ast_let_identifier()) {
    ast_let_identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ast_let_identifier(), 
      GetArena());
  }
  if (from._internal_has_ast_thunk_node_array()) {
    ast_thunk_node_array_ = new ::TSCE::ASTNodeArrayArchive(*from.ast_thunk_node_array_);
  } else {
    ast_thunk_node_array_ = nullptr;
  }
  if (from._internal_has_ast_local_cell_reference_node_reference()) {
    ast_local_cell_reference_node_reference_ = new ::TSCE::ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive(*from.ast_local_cell_reference_node_reference_);
  } else {
    ast_local_cell_reference_node_reference_ = nullptr;
  }
  if (from._internal_has_ast_cross_table_cell_reference_node_reference()) {
    ast_cross_table_cell_reference_node_reference_ = new ::TSCE::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive(*from.ast_cross_table_cell_reference_node_reference_);
  } else {
    ast_cross_table_cell_reference_node_reference_ = nullptr;
  }
  if (from._internal_has_ast_column()) {
    ast_column_ = new ::TSCE::ASTNodeArrayArchive_ASTColumnCoordinateArchive(*from.ast_column_);
  } else {
    ast_column_ = nullptr;
  }
  if (from._internal_has_ast_row()) {
    ast_row_ = new ::TSCE::ASTNodeArrayArchive_ASTRowCoordinateArchive(*from.ast_row_);
  } else {
    ast_row_ = nullptr;
  }
  if (from._internal_has_ast_cross_table_reference_extra_info()) {
    ast_cross_table_reference_extra_info_ = new ::TSCE::ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive(*from.ast_cross_table_reference_extra_info_);
  } else {
    ast_cross_table_reference_extra_info_ = nullptr;
  }
  if (from._internal_has_ast_uid_coordinate()) {
    ast_uid_coordinate_ = new ::TSCE::ASTNodeArrayArchive_ASTUidCoordinateArchive(*from.ast_uid_coordinate_);
  } else {
    ast_uid_coordinate_ = nullptr;
  }
  if (from._internal_has_ast_sticky_bits()) {
    ast_sticky_bits_ = new ::TSCE::ASTNodeArrayArchive_ASTStickyBits(*from.ast_sticky_bits_);
  } else {
    ast_sticky_bits_ = nullptr;
  }
  if (from._internal_has_ast_let_e2()) {
    ast_let_e2_ = new ::TSCE::ASTNodeArrayArchive(*from.ast_let_e2_);
  } else {
    ast_let_e2_ = nullptr;
  }
  if (from._internal_has_ast_let_whitespace()) {
    ast_let_whitespace_ = new ::TSCE::ASTNodeArrayArchive_ASTLetNodeWhitespace(*from.ast_let_whitespace_);
  } else {
    ast_let_whitespace_ = nullptr;
  }
  if (from._internal_has_ast_tract_list()) {
    ast_tract_list_ = new ::TSCE::ASTNodeArrayArchive_ASTUidTractList(*from.ast_tract_list_);
  } else {
    ast_tract_list_ = nullptr;
  }
  if (from._internal_has_ast_category_ref()) {
    ast_category_ref_ = new ::TSCE::ASTNodeArrayArchive_ASTCategoryReferenceArchive(*from.ast_category_ref_);
  } else {
    ast_category_ref_ = nullptr;
  }
  if (from._internal_has_ast_colon_tract()) {
    ast_colon_tract_ = new ::TSCE::ASTNodeArrayArchive_ASTColonTractArchive(*from.ast_colon_tract_);
  } else {
    ast_colon_tract_ = nullptr;
  }
  if (from._internal_has_ast_frozen_sticky_bits()) {
    ast_frozen_sticky_bits_ = new ::TSCE::ASTNodeArrayArchive_ASTStickyBits(*from.ast_frozen_sticky_bits_);
  } else {
    ast_frozen_sticky_bits_ = nullptr;
  }
  ::memcpy(&ast_function_node_index_, &from.ast_function_node_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&ast_node_type_) -
    reinterpret_cast<char*>(&ast_function_node_index_)) + sizeof(ast_node_type_));
  // @@protoc_insertion_point(copy_constructor:TSCE.ASTNodeArrayArchive.ASTNodeArchive)
}

void ASTNodeArrayArchive_ASTNodeArchive::SharedCtor() {
ast_string_node_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
ast_unknown_function_node_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
ast_date_node_date_time_format_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
ast_whitespace_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
ast_let_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ast_thunk_node_array_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ast_number_node_decimal_high_) -
    reinterpret_cast<char*>(&ast_thunk_node_array_)) + sizeof(ast_number_node_decimal_high_));
ast_node_type_ = 1;
}

ASTNodeArrayArchive_ASTNodeArchive::~ASTNodeArrayArchive_ASTNodeArchive() {
  // @@protoc_insertion_point(destructor:TSCE.ASTNodeArrayArchive.ASTNodeArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ASTNodeArrayArchive_ASTNodeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ast_string_node_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ast_unknown_function_node_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ast_date_node_date_time_format_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ast_whitespace_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ast_let_identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ast_thunk_node_array_;
  if (this != internal_default_instance()) delete ast_local_cell_reference_node_reference_;
  if (this != internal_default_instance()) delete ast_cross_table_cell_reference_node_reference_;
  if (this != internal_default_instance()) delete ast_column_;
  if (this != internal_default_instance()) delete ast_row_;
  if (this != internal_default_instance()) delete ast_cross_table_reference_extra_info_;
  if (this != internal_default_instance()) delete ast_uid_coordinate_;
  if (this != internal_default_instance()) delete ast_sticky_bits_;
  if (this != internal_default_instance()) delete ast_let_e2_;
  if (this != internal_default_instance()) delete ast_let_whitespace_;
  if (this != internal_default_instance()) delete ast_tract_list_;
  if (this != internal_default_instance()) delete ast_category_ref_;
  if (this != internal_default_instance()) delete ast_colon_tract_;
  if (this != internal_default_instance()) delete ast_frozen_sticky_bits_;
}

void ASTNodeArrayArchive_ASTNodeArchive::ArenaDtor(void* object) {
  ASTNodeArrayArchive_ASTNodeArchive* _this = reinterpret_cast< ASTNodeArrayArchive_ASTNodeArchive* >(object);
  (void)_this;
}
void ASTNodeArrayArchive_ASTNodeArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ASTNodeArrayArchive_ASTNodeArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ASTNodeArrayArchive_ASTNodeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.ASTNodeArrayArchive.ASTNodeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      ast_string_node_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ast_unknown_function_node_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      ast_date_node_date_time_format_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      ast_whitespace_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      ast_let_identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(ast_thunk_node_array_ != nullptr);
      ast_thunk_node_array_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(ast_local_cell_reference_node_reference_ != nullptr);
      ast_local_cell_reference_node_reference_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(ast_cross_table_cell_reference_node_reference_ != nullptr);
      ast_cross_table_cell_reference_node_reference_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(ast_column_ != nullptr);
      ast_column_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(ast_row_ != nullptr);
      ast_row_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(ast_cross_table_reference_extra_info_ != nullptr);
      ast_cross_table_reference_extra_info_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(ast_uid_coordinate_ != nullptr);
      ast_uid_coordinate_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(ast_sticky_bits_ != nullptr);
      ast_sticky_bits_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(ast_let_e2_ != nullptr);
      ast_let_e2_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(ast_let_whitespace_ != nullptr);
      ast_let_whitespace_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(ast_tract_list_ != nullptr);
      ast_tract_list_->Clear();
    }
  }
  if (cached_has_bits & 0x00070000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(ast_category_ref_ != nullptr);
      ast_category_ref_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(ast_colon_tract_ != nullptr);
      ast_colon_tract_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(ast_frozen_sticky_bits_ != nullptr);
      ast_frozen_sticky_bits_->Clear();
    }
  }
  if (cached_has_bits & 0x00f80000u) {
    ::memset(&ast_function_node_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ast_duration_node_unitnum_) -
        reinterpret_cast<char*>(&ast_function_node_index_)) + sizeof(ast_duration_node_unitnum_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&ast_duration_node_unit_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ast_date_node_suppress_date_format_) -
        reinterpret_cast<char*>(&ast_duration_node_unit_)) + sizeof(ast_date_node_suppress_date_format_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&ast_date_node_suppress_time_format_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ast_number_node_decimal_high_) -
        reinterpret_cast<char*>(&ast_date_node_suppress_time_format_)) + sizeof(ast_number_node_decimal_high_));
  }
  ast_node_type_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ASTNodeArrayArchive_ASTNodeArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCE.ASTNodeArrayArchive.ASTNodeType AST_node_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSCE::ASTNodeArrayArchive_ASTNodeType_IsValid(val))) {
            _internal_set_ast_node_type(static_cast<::TSCE::ASTNodeArrayArchive_ASTNodeType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 AST_function_node_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_ast_function_node_index(&_has_bits_);
          ast_function_node_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 AST_function_node_numArgs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_ast_function_node_numargs(&_has_bits_);
          ast_function_node_numargs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double AST_number_node_number = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_ast_number_node_number(&_has_bits_);
          ast_number_node_number_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool AST_boolean_node_boolean = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_ast_boolean_node_boolean(&_has_bits_);
          ast_boolean_node_boolean_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string AST_string_node_string = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_ast_string_node_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_string_node_string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double AST_date_node_dateNum = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_ast_date_node_datenum(&_has_bits_);
          ast_date_node_datenum_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double AST_duration_node_unitNum = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_ast_duration_node_unitnum(&_has_bits_);
          ast_duration_node_unitnum_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int32 AST_duration_node_unit = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_ast_duration_node_unit(&_has_bits_);
          ast_duration_node_unit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool AST_token_node_boolean = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_ast_token_node_boolean(&_has_bits_);
          ast_token_node_boolean_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 AST_array_node_numCol = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_ast_array_node_numcol(&_has_bits_);
          ast_array_node_numcol_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 AST_array_node_numRow = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_ast_array_node_numrow(&_has_bits_);
          ast_array_node_numrow_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 AST_list_node_numArgs = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_ast_list_node_numargs(&_has_bits_);
          ast_list_node_numargs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCE.ASTNodeArrayArchive AST_thunk_node_array = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_ast_thunk_node_array(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCE.ASTNodeArrayArchive.ASTLocalCellReferenceNodeArchive AST_local_cell_reference_node_reference = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_ast_local_cell_reference_node_reference(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive AST_cross_table_cell_reference_node_reference = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_ast_cross_table_cell_reference_node_reference(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string AST_unknown_function_node_string = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_ast_unknown_function_node_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_unknown_function_node_string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 AST_unknown_function_node_numArgs = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_ast_unknown_function_node_numargs(&_has_bits_);
          ast_unknown_function_node_numargs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool AST_date_node_suppress_date_format = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_ast_date_node_suppress_date_format(&_has_bits_);
          ast_date_node_suppress_date_format_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool AST_date_node_suppress_time_format = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_ast_date_node_suppress_time_format(&_has_bits_);
          ast_date_node_suppress_time_format_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string AST_date_node_date_time_format = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          auto str = _internal_mutable_ast_date_node_date_time_format();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_date_node_date_time_format");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 AST_duration_node_style = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_ast_duration_node_style(&_has_bits_);
          ast_duration_node_style_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 AST_duration_node_duration_unit_largest = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_ast_duration_node_duration_unit_largest(&_has_bits_);
          ast_duration_node_duration_unit_largest_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 AST_duration_node_duration_unit_smallest = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_ast_duration_node_duration_unit_smallest(&_has_bits_);
          ast_duration_node_duration_unit_smallest_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string AST_whitespace = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          auto str = _internal_mutable_ast_whitespace();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_whitespace");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCE.ASTNodeArrayArchive.ASTColumnCoordinateArchive AST_column = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_ast_column(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCE.ASTNodeArrayArchive.ASTRowCoordinateArchive AST_row = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_ast_row(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive AST_cross_table_reference_extra_info = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_ast_cross_table_reference_extra_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool AST_duration_node_use_automatic_units = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_ast_duration_node_use_automatic_units(&_has_bits_);
          ast_duration_node_use_automatic_units_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCE.ASTNodeArrayArchive.ASTUidCoordinateArchive AST_uid_coordinate = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_ast_uid_coordinate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCE.ASTNodeArrayArchive.ASTStickyBits AST_sticky_bits = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ast_sticky_bits(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string AST_let_identifier = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_ast_let_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_let_identifier");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCE.ASTNodeArrayArchive AST_let_e2 = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ast_let_e2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCE.ASTNodeArrayArchive.ASTLetNodeWhitespace AST_let_whitespace = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_ast_let_whitespace(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 AST_symbol = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_ast_symbol(&_has_bits_);
          ast_symbol_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCE.ASTNodeArrayArchive.ASTUidTractList AST_tract_list = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_ast_tract_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCE.ASTNodeArrayArchive.ASTCategoryReferenceArchive AST_category_ref = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_ast_category_ref(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCE.ASTNodeArrayArchive.ASTColonTractArchive AST_colon_tract = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_ast_colon_tract(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCE.ASTNodeArrayArchive.ASTStickyBits AST_frozen_sticky_bits = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_ast_frozen_sticky_bits(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 AST_number_node_decimal_low = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_ast_number_node_decimal_low(&_has_bits_);
          ast_number_node_decimal_low_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 AST_number_node_decimal_high = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_ast_number_node_decimal_high(&_has_bits_);
          ast_number_node_decimal_high_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ASTNodeArrayArchive_ASTNodeArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.ASTNodeArrayArchive.ASTNodeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[1];
  // required .TSCE.ASTNodeArrayArchive.ASTNodeType AST_node_type = 1;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_ast_node_type(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 AST_function_node_index = 2;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_ast_function_node_index(), target);
  }

  // optional uint32 AST_function_node_numArgs = 3;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_ast_function_node_numargs(), target);
  }

  // optional double AST_number_node_number = 4;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_ast_number_node_number(), target);
  }

  // optional bool AST_boolean_node_boolean = 5;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_ast_boolean_node_boolean(), target);
  }

  // optional string AST_string_node_string = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ast_string_node_string().data(), static_cast<int>(this->_internal_ast_string_node_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_string_node_string");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_ast_string_node_string(), target);
  }

  // optional double AST_date_node_dateNum = 7;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_ast_date_node_datenum(), target);
  }

  // optional double AST_duration_node_unitNum = 8;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_ast_duration_node_unitnum(), target);
  }

  // optional int32 AST_duration_node_unit = 9;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_ast_duration_node_unit(), target);
  }

  // optional bool AST_token_node_boolean = 10;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_ast_token_node_boolean(), target);
  }

  // optional uint32 AST_array_node_numCol = 11;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_ast_array_node_numcol(), target);
  }

  // optional uint32 AST_array_node_numRow = 12;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_ast_array_node_numrow(), target);
  }

  // optional uint32 AST_list_node_numArgs = 13;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_ast_list_node_numargs(), target);
  }

  // optional .TSCE.ASTNodeArrayArchive AST_thunk_node_array = 14;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::ast_thunk_node_array(this), target, stream);
  }

  // optional .TSCE.ASTNodeArrayArchive.ASTLocalCellReferenceNodeArchive AST_local_cell_reference_node_reference = 15;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::ast_local_cell_reference_node_reference(this), target, stream);
  }

  // optional .TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive AST_cross_table_cell_reference_node_reference = 16;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::ast_cross_table_cell_reference_node_reference(this), target, stream);
  }

  // optional string AST_unknown_function_node_string = 17;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ast_unknown_function_node_string().data(), static_cast<int>(this->_internal_ast_unknown_function_node_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_unknown_function_node_string");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_ast_unknown_function_node_string(), target);
  }

  // optional uint32 AST_unknown_function_node_numArgs = 18;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_ast_unknown_function_node_numargs(), target);
  }

  // optional bool AST_date_node_suppress_date_format = 19;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(19, this->_internal_ast_date_node_suppress_date_format(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool AST_date_node_suppress_time_format = 20;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(20, this->_internal_ast_date_node_suppress_time_format(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string AST_date_node_date_time_format = 21;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ast_date_node_date_time_format().data(), static_cast<int>(this->_internal_ast_date_node_date_time_format().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_date_node_date_time_format");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_ast_date_node_date_time_format(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 AST_duration_node_style = 22;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(22, this->_internal_ast_duration_node_style(), target);
  }

  // optional uint32 AST_duration_node_duration_unit_largest = 23;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(23, this->_internal_ast_duration_node_duration_unit_largest(), target);
  }

  // optional uint32 AST_duration_node_duration_unit_smallest = 24;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(24, this->_internal_ast_duration_node_duration_unit_smallest(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string AST_whitespace = 25;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ast_whitespace().data(), static_cast<int>(this->_internal_ast_whitespace().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_whitespace");
    target = stream->WriteStringMaybeAliased(
        25, this->_internal_ast_whitespace(), target);
  }

  // optional .TSCE.ASTNodeArrayArchive.ASTColumnCoordinateArchive AST_column = 26;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        26, _Internal::ast_column(this), target, stream);
  }

  // optional .TSCE.ASTNodeArrayArchive.ASTRowCoordinateArchive AST_row = 27;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        27, _Internal::ast_row(this), target, stream);
  }

  // optional .TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive AST_cross_table_reference_extra_info = 28;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        28, _Internal::ast_cross_table_reference_extra_info(this), target, stream);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool AST_duration_node_use_automatic_units = 29;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(29, this->_internal_ast_duration_node_use_automatic_units(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .TSCE.ASTNodeArrayArchive.ASTUidCoordinateArchive AST_uid_coordinate = 30;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        30, _Internal::ast_uid_coordinate(this), target, stream);
  }

  // optional .TSCE.ASTNodeArrayArchive.ASTStickyBits AST_sticky_bits = 33;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        33, _Internal::ast_sticky_bits(this), target, stream);
  }

  // optional string AST_let_identifier = 34;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ast_let_identifier().data(), static_cast<int>(this->_internal_ast_let_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_let_identifier");
    target = stream->WriteStringMaybeAliased(
        34, this->_internal_ast_let_identifier(), target);
  }

  // optional .TSCE.ASTNodeArrayArchive AST_let_e2 = 35;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        35, _Internal::ast_let_e2(this), target, stream);
  }

  // optional .TSCE.ASTNodeArrayArchive.ASTLetNodeWhitespace AST_let_whitespace = 36;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        36, _Internal::ast_let_whitespace(this), target, stream);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 AST_symbol = 37;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(37, this->_internal_ast_symbol(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .TSCE.ASTNodeArrayArchive.ASTUidTractList AST_tract_list = 38;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        38, _Internal::ast_tract_list(this), target, stream);
  }

  // optional .TSCE.ASTNodeArrayArchive.ASTCategoryReferenceArchive AST_category_ref = 39;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        39, _Internal::ast_category_ref(this), target, stream);
  }

  // optional .TSCE.ASTNodeArrayArchive.ASTColonTractArchive AST_colon_tract = 40;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        40, _Internal::ast_colon_tract(this), target, stream);
  }

  // optional .TSCE.ASTNodeArrayArchive.ASTStickyBits AST_frozen_sticky_bits = 41;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        41, _Internal::ast_frozen_sticky_bits(this), target, stream);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint64 AST_number_node_decimal_low = 42;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(42, this->_internal_ast_number_node_decimal_low(), target);
  }

  // optional uint64 AST_number_node_decimal_high = 43;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(43, this->_internal_ast_number_node_decimal_high(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.ASTNodeArrayArchive.ASTNodeArchive)
  return target;
}

size_t ASTNodeArrayArchive_ASTNodeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.ASTNodeArrayArchive.ASTNodeArchive)
  size_t total_size = 0;

  // required .TSCE.ASTNodeArrayArchive.ASTNodeType AST_node_type = 1;
  if (_internal_has_ast_node_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_ast_node_type());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string AST_string_node_string = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ast_string_node_string());
    }

    // optional string AST_unknown_function_node_string = 17;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ast_unknown_function_node_string());
    }

    // optional string AST_date_node_date_time_format = 21;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ast_date_node_date_time_format());
    }

    // optional string AST_whitespace = 25;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ast_whitespace());
    }

    // optional string AST_let_identifier = 34;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ast_let_identifier());
    }

    // optional .TSCE.ASTNodeArrayArchive AST_thunk_node_array = 14;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ast_thunk_node_array_);
    }

    // optional .TSCE.ASTNodeArrayArchive.ASTLocalCellReferenceNodeArchive AST_local_cell_reference_node_reference = 15;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ast_local_cell_reference_node_reference_);
    }

    // optional .TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive AST_cross_table_cell_reference_node_reference = 16;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ast_cross_table_cell_reference_node_reference_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .TSCE.ASTNodeArrayArchive.ASTColumnCoordinateArchive AST_column = 26;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ast_column_);
    }

    // optional .TSCE.ASTNodeArrayArchive.ASTRowCoordinateArchive AST_row = 27;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ast_row_);
    }

    // optional .TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive AST_cross_table_reference_extra_info = 28;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ast_cross_table_reference_extra_info_);
    }

    // optional .TSCE.ASTNodeArrayArchive.ASTUidCoordinateArchive AST_uid_coordinate = 30;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ast_uid_coordinate_);
    }

    // optional .TSCE.ASTNodeArrayArchive.ASTStickyBits AST_sticky_bits = 33;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ast_sticky_bits_);
    }

    // optional .TSCE.ASTNodeArrayArchive AST_let_e2 = 35;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ast_let_e2_);
    }

    // optional .TSCE.ASTNodeArrayArchive.ASTLetNodeWhitespace AST_let_whitespace = 36;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ast_let_whitespace_);
    }

    // optional .TSCE.ASTNodeArrayArchive.ASTUidTractList AST_tract_list = 38;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ast_tract_list_);
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .TSCE.ASTNodeArrayArchive.ASTCategoryReferenceArchive AST_category_ref = 39;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ast_category_ref_);
    }

    // optional .TSCE.ASTNodeArrayArchive.ASTColonTractArchive AST_colon_tract = 40;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ast_colon_tract_);
    }

    // optional .TSCE.ASTNodeArrayArchive.ASTStickyBits AST_frozen_sticky_bits = 41;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ast_frozen_sticky_bits_);
    }

    // optional uint32 AST_function_node_index = 2;
    if (cached_has_bits & 0x00080000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ast_function_node_index());
    }

    // optional uint32 AST_function_node_numArgs = 3;
    if (cached_has_bits & 0x00100000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ast_function_node_numargs());
    }

    // optional double AST_number_node_number = 4;
    if (cached_has_bits & 0x00200000u) {
      total_size += 1 + 8;
    }

    // optional double AST_date_node_dateNum = 7;
    if (cached_has_bits & 0x00400000u) {
      total_size += 1 + 8;
    }

    // optional double AST_duration_node_unitNum = 8;
    if (cached_has_bits & 0x00800000u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional int32 AST_duration_node_unit = 9;
    if (cached_has_bits & 0x01000000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_ast_duration_node_unit());
    }

    // optional bool AST_token_node_boolean = 10;
    if (cached_has_bits & 0x02000000u) {
      total_size += 1 + 1;
    }

    // optional uint32 AST_array_node_numCol = 11;
    if (cached_has_bits & 0x04000000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ast_array_node_numcol());
    }

    // optional uint32 AST_array_node_numRow = 12;
    if (cached_has_bits & 0x08000000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ast_array_node_numrow());
    }

    // optional uint32 AST_list_node_numArgs = 13;
    if (cached_has_bits & 0x10000000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ast_list_node_numargs());
    }

    // optional uint32 AST_unknown_function_node_numArgs = 18;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ast_unknown_function_node_numargs());
    }

    // optional bool AST_boolean_node_boolean = 5;
    if (cached_has_bits & 0x40000000u) {
      total_size += 1 + 1;
    }

    // optional bool AST_date_node_suppress_date_format = 19;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + 1;
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool AST_date_node_suppress_time_format = 20;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 1;
    }

    // optional bool AST_duration_node_use_automatic_units = 29;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 1;
    }

    // optional uint32 AST_duration_node_style = 22;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ast_duration_node_style());
    }

    // optional uint32 AST_duration_node_duration_unit_largest = 23;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ast_duration_node_duration_unit_largest());
    }

    // optional uint32 AST_duration_node_duration_unit_smallest = 24;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ast_duration_node_duration_unit_smallest());
    }

    // optional uint64 AST_number_node_decimal_low = 42;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_ast_number_node_decimal_low());
    }

    // optional uint32 AST_symbol = 37;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ast_symbol());
    }

    // optional uint64 AST_number_node_decimal_high = 43;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_ast_number_node_decimal_high());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ASTNodeArrayArchive_ASTNodeArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.ASTNodeArrayArchive.ASTNodeArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ASTNodeArrayArchive_ASTNodeArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ASTNodeArrayArchive_ASTNodeArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.ASTNodeArrayArchive.ASTNodeArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.ASTNodeArrayArchive.ASTNodeArchive)
    MergeFrom(*source);
  }
}

void ASTNodeArrayArchive_ASTNodeArchive::MergeFrom(const ASTNodeArrayArchive_ASTNodeArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.ASTNodeArrayArchive.ASTNodeArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_ast_string_node_string(from._internal_ast_string_node_string());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_ast_unknown_function_node_string(from._internal_ast_unknown_function_node_string());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_ast_date_node_date_time_format(from._internal_ast_date_node_date_time_format());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_ast_whitespace(from._internal_ast_whitespace());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_ast_let_identifier(from._internal_ast_let_identifier());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_ast_thunk_node_array()->::TSCE::ASTNodeArrayArchive::MergeFrom(from._internal_ast_thunk_node_array());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_ast_local_cell_reference_node_reference()->::TSCE::ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::MergeFrom(from._internal_ast_local_cell_reference_node_reference());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_ast_cross_table_cell_reference_node_reference()->::TSCE::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::MergeFrom(from._internal_ast_cross_table_cell_reference_node_reference());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_ast_column()->::TSCE::ASTNodeArrayArchive_ASTColumnCoordinateArchive::MergeFrom(from._internal_ast_column());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_ast_row()->::TSCE::ASTNodeArrayArchive_ASTRowCoordinateArchive::MergeFrom(from._internal_ast_row());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_ast_cross_table_reference_extra_info()->::TSCE::ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::MergeFrom(from._internal_ast_cross_table_reference_extra_info());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_ast_uid_coordinate()->::TSCE::ASTNodeArrayArchive_ASTUidCoordinateArchive::MergeFrom(from._internal_ast_uid_coordinate());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_mutable_ast_sticky_bits()->::TSCE::ASTNodeArrayArchive_ASTStickyBits::MergeFrom(from._internal_ast_sticky_bits());
    }
    if (cached_has_bits & 0x00002000u) {
      _internal_mutable_ast_let_e2()->::TSCE::ASTNodeArrayArchive::MergeFrom(from._internal_ast_let_e2());
    }
    if (cached_has_bits & 0x00004000u) {
      _internal_mutable_ast_let_whitespace()->::TSCE::ASTNodeArrayArchive_ASTLetNodeWhitespace::MergeFrom(from._internal_ast_let_whitespace());
    }
    if (cached_has_bits & 0x00008000u) {
      _internal_mutable_ast_tract_list()->::TSCE::ASTNodeArrayArchive_ASTUidTractList::MergeFrom(from._internal_ast_tract_list());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _internal_mutable_ast_category_ref()->::TSCE::ASTNodeArrayArchive_ASTCategoryReferenceArchive::MergeFrom(from._internal_ast_category_ref());
    }
    if (cached_has_bits & 0x00020000u) {
      _internal_mutable_ast_colon_tract()->::TSCE::ASTNodeArrayArchive_ASTColonTractArchive::MergeFrom(from._internal_ast_colon_tract());
    }
    if (cached_has_bits & 0x00040000u) {
      _internal_mutable_ast_frozen_sticky_bits()->::TSCE::ASTNodeArrayArchive_ASTStickyBits::MergeFrom(from._internal_ast_frozen_sticky_bits());
    }
    if (cached_has_bits & 0x00080000u) {
      ast_function_node_index_ = from.ast_function_node_index_;
    }
    if (cached_has_bits & 0x00100000u) {
      ast_function_node_numargs_ = from.ast_function_node_numargs_;
    }
    if (cached_has_bits & 0x00200000u) {
      ast_number_node_number_ = from.ast_number_node_number_;
    }
    if (cached_has_bits & 0x00400000u) {
      ast_date_node_datenum_ = from.ast_date_node_datenum_;
    }
    if (cached_has_bits & 0x00800000u) {
      ast_duration_node_unitnum_ = from.ast_duration_node_unitnum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      ast_duration_node_unit_ = from.ast_duration_node_unit_;
    }
    if (cached_has_bits & 0x02000000u) {
      ast_token_node_boolean_ = from.ast_token_node_boolean_;
    }
    if (cached_has_bits & 0x04000000u) {
      ast_array_node_numcol_ = from.ast_array_node_numcol_;
    }
    if (cached_has_bits & 0x08000000u) {
      ast_array_node_numrow_ = from.ast_array_node_numrow_;
    }
    if (cached_has_bits & 0x10000000u) {
      ast_list_node_numargs_ = from.ast_list_node_numargs_;
    }
    if (cached_has_bits & 0x20000000u) {
      ast_unknown_function_node_numargs_ = from.ast_unknown_function_node_numargs_;
    }
    if (cached_has_bits & 0x40000000u) {
      ast_boolean_node_boolean_ = from.ast_boolean_node_boolean_;
    }
    if (cached_has_bits & 0x80000000u) {
      ast_date_node_suppress_date_format_ = from.ast_date_node_suppress_date_format_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      ast_date_node_suppress_time_format_ = from.ast_date_node_suppress_time_format_;
    }
    if (cached_has_bits & 0x00000002u) {
      ast_duration_node_use_automatic_units_ = from.ast_duration_node_use_automatic_units_;
    }
    if (cached_has_bits & 0x00000004u) {
      ast_duration_node_style_ = from.ast_duration_node_style_;
    }
    if (cached_has_bits & 0x00000008u) {
      ast_duration_node_duration_unit_largest_ = from.ast_duration_node_duration_unit_largest_;
    }
    if (cached_has_bits & 0x00000010u) {
      ast_duration_node_duration_unit_smallest_ = from.ast_duration_node_duration_unit_smallest_;
    }
    if (cached_has_bits & 0x00000020u) {
      ast_number_node_decimal_low_ = from.ast_number_node_decimal_low_;
    }
    if (cached_has_bits & 0x00000040u) {
      ast_symbol_ = from.ast_symbol_;
    }
    if (cached_has_bits & 0x00000080u) {
      ast_number_node_decimal_high_ = from.ast_number_node_decimal_high_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_ast_node_type(from._internal_ast_node_type());
  }
}

void ASTNodeArrayArchive_ASTNodeArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.ASTNodeArrayArchive.ASTNodeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ASTNodeArrayArchive_ASTNodeArchive::CopyFrom(const ASTNodeArrayArchive_ASTNodeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.ASTNodeArrayArchive.ASTNodeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ASTNodeArrayArchive_ASTNodeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_ast_thunk_node_array()) {
    if (!ast_thunk_node_array_->IsInitialized()) return false;
  }
  if (_internal_has_ast_local_cell_reference_node_reference()) {
    if (!ast_local_cell_reference_node_reference_->IsInitialized()) return false;
  }
  if (_internal_has_ast_cross_table_cell_reference_node_reference()) {
    if (!ast_cross_table_cell_reference_node_reference_->IsInitialized()) return false;
  }
  if (_internal_has_ast_column()) {
    if (!ast_column_->IsInitialized()) return false;
  }
  if (_internal_has_ast_row()) {
    if (!ast_row_->IsInitialized()) return false;
  }
  if (_internal_has_ast_cross_table_reference_extra_info()) {
    if (!ast_cross_table_reference_extra_info_->IsInitialized()) return false;
  }
  if (_internal_has_ast_uid_coordinate()) {
    if (!ast_uid_coordinate_->IsInitialized()) return false;
  }
  if (_internal_has_ast_sticky_bits()) {
    if (!ast_sticky_bits_->IsInitialized()) return false;
  }
  if (_internal_has_ast_let_e2()) {
    if (!ast_let_e2_->IsInitialized()) return false;
  }
  if (_internal_has_ast_tract_list()) {
    if (!ast_tract_list_->IsInitialized()) return false;
  }
  if (_internal_has_ast_category_ref()) {
    if (!ast_category_ref_->IsInitialized()) return false;
  }
  if (_internal_has_ast_colon_tract()) {
    if (!ast_colon_tract_->IsInitialized()) return false;
  }
  if (_internal_has_ast_frozen_sticky_bits()) {
    if (!ast_frozen_sticky_bits_->IsInitialized()) return false;
  }
  return true;
}

void ASTNodeArrayArchive_ASTNodeArchive::InternalSwap(ASTNodeArrayArchive_ASTNodeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  ast_string_node_string_.Swap(&other->ast_string_node_string_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ast_unknown_function_node_string_.Swap(&other->ast_unknown_function_node_string_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ast_date_node_date_time_format_.Swap(&other->ast_date_node_date_time_format_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ast_whitespace_.Swap(&other->ast_whitespace_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ast_let_identifier_.Swap(&other->ast_let_identifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ASTNodeArrayArchive_ASTNodeArchive, ast_number_node_decimal_high_)
      + sizeof(ASTNodeArrayArchive_ASTNodeArchive::ast_number_node_decimal_high_)
      - PROTOBUF_FIELD_OFFSET(ASTNodeArrayArchive_ASTNodeArchive, ast_thunk_node_array_)>(
          reinterpret_cast<char*>(&ast_thunk_node_array_),
          reinterpret_cast<char*>(&other->ast_thunk_node_array_));
  swap(ast_node_type_, other->ast_node_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ASTNodeArrayArchive_ASTNodeArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[99]);
}

// ===================================================================

class ASTNodeArrayArchive::_Internal {
 public:
};

ASTNodeArrayArchive::ASTNodeArrayArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ast_node_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.ASTNodeArrayArchive)
}
ASTNodeArrayArchive::ASTNodeArrayArchive(const ASTNodeArrayArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ast_node_(from.ast_node_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSCE.ASTNodeArrayArchive)
}

void ASTNodeArrayArchive::SharedCtor() {
}

ASTNodeArrayArchive::~ASTNodeArrayArchive() {
  // @@protoc_insertion_point(destructor:TSCE.ASTNodeArrayArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ASTNodeArrayArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ASTNodeArrayArchive::ArenaDtor(void* object) {
  ASTNodeArrayArchive* _this = reinterpret_cast< ASTNodeArrayArchive* >(object);
  (void)_this;
}
void ASTNodeArrayArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ASTNodeArrayArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ASTNodeArrayArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.ASTNodeArrayArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ast_node_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ASTNodeArrayArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSCE.ASTNodeArrayArchive.ASTNodeArchive AST_node = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ast_node(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ASTNodeArrayArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.ASTNodeArrayArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSCE.ASTNodeArrayArchive.ASTNodeArchive AST_node = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ast_node_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_ast_node(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.ASTNodeArrayArchive)
  return target;
}

size_t ASTNodeArrayArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.ASTNodeArrayArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.ASTNodeArrayArchive.ASTNodeArchive AST_node = 1;
  total_size += 1UL * this->_internal_ast_node_size();
  for (const auto& msg : this->ast_node_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ASTNodeArrayArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.ASTNodeArrayArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ASTNodeArrayArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ASTNodeArrayArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.ASTNodeArrayArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.ASTNodeArrayArchive)
    MergeFrom(*source);
  }
}

void ASTNodeArrayArchive::MergeFrom(const ASTNodeArrayArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.ASTNodeArrayArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ast_node_.MergeFrom(from.ast_node_);
}

void ASTNodeArrayArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.ASTNodeArrayArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ASTNodeArrayArchive::CopyFrom(const ASTNodeArrayArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.ASTNodeArrayArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ASTNodeArrayArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(ast_node_)) return false;
  return true;
}

void ASTNodeArrayArchive::InternalSwap(ASTNodeArrayArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ast_node_.InternalSwap(&other->ast_node_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ASTNodeArrayArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[100]);
}

// ===================================================================

class FormulaTranslationFlagsArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<FormulaTranslationFlagsArchive>()._has_bits_);
  static void set_has_excel_import_translation(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_number_to_date_coercion_removal_translation(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_contains_uid_form_references(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_contains_frozen_references(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

FormulaTranslationFlagsArchive::FormulaTranslationFlagsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.FormulaTranslationFlagsArchive)
}
FormulaTranslationFlagsArchive::FormulaTranslationFlagsArchive(const FormulaTranslationFlagsArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&excel_import_translation_, &from.excel_import_translation_,
    static_cast<size_t>(reinterpret_cast<char*>(&contains_frozen_references_) -
    reinterpret_cast<char*>(&excel_import_translation_)) + sizeof(contains_frozen_references_));
  // @@protoc_insertion_point(copy_constructor:TSCE.FormulaTranslationFlagsArchive)
}

void FormulaTranslationFlagsArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&excel_import_translation_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&contains_frozen_references_) -
    reinterpret_cast<char*>(&excel_import_translation_)) + sizeof(contains_frozen_references_));
}

FormulaTranslationFlagsArchive::~FormulaTranslationFlagsArchive() {
  // @@protoc_insertion_point(destructor:TSCE.FormulaTranslationFlagsArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FormulaTranslationFlagsArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FormulaTranslationFlagsArchive::ArenaDtor(void* object) {
  FormulaTranslationFlagsArchive* _this = reinterpret_cast< FormulaTranslationFlagsArchive* >(object);
  (void)_this;
}
void FormulaTranslationFlagsArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FormulaTranslationFlagsArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FormulaTranslationFlagsArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.FormulaTranslationFlagsArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&excel_import_translation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&contains_frozen_references_) -
      reinterpret_cast<char*>(&excel_import_translation_)) + sizeof(contains_frozen_references_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FormulaTranslationFlagsArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool excel_import_translation = 1 [default = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_excel_import_translation(&has_bits);
          excel_import_translation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool number_to_date_coercion_removal_translation = 2 [default = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_number_to_date_coercion_removal_translation(&has_bits);
          number_to_date_coercion_removal_translation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool contains_uid_form_references = 3 [default = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_contains_uid_form_references(&has_bits);
          contains_uid_form_references_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool contains_frozen_references = 4 [default = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_contains_frozen_references(&has_bits);
          contains_frozen_references_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FormulaTranslationFlagsArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.FormulaTranslationFlagsArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool excel_import_translation = 1 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_excel_import_translation(), target);
  }

  // optional bool number_to_date_coercion_removal_translation = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_number_to_date_coercion_removal_translation(), target);
  }

  // optional bool contains_uid_form_references = 3 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_contains_uid_form_references(), target);
  }

  // optional bool contains_frozen_references = 4 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_contains_frozen_references(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.FormulaTranslationFlagsArchive)
  return target;
}

size_t FormulaTranslationFlagsArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.FormulaTranslationFlagsArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bool excel_import_translation = 1 [default = false];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool number_to_date_coercion_removal_translation = 2 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool contains_uid_form_references = 3 [default = false];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool contains_frozen_references = 4 [default = false];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FormulaTranslationFlagsArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.FormulaTranslationFlagsArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const FormulaTranslationFlagsArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FormulaTranslationFlagsArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.FormulaTranslationFlagsArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.FormulaTranslationFlagsArchive)
    MergeFrom(*source);
  }
}

void FormulaTranslationFlagsArchive::MergeFrom(const FormulaTranslationFlagsArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.FormulaTranslationFlagsArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      excel_import_translation_ = from.excel_import_translation_;
    }
    if (cached_has_bits & 0x00000002u) {
      number_to_date_coercion_removal_translation_ = from.number_to_date_coercion_removal_translation_;
    }
    if (cached_has_bits & 0x00000004u) {
      contains_uid_form_references_ = from.contains_uid_form_references_;
    }
    if (cached_has_bits & 0x00000008u) {
      contains_frozen_references_ = from.contains_frozen_references_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FormulaTranslationFlagsArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.FormulaTranslationFlagsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FormulaTranslationFlagsArchive::CopyFrom(const FormulaTranslationFlagsArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.FormulaTranslationFlagsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FormulaTranslationFlagsArchive::IsInitialized() const {
  return true;
}

void FormulaTranslationFlagsArchive::InternalSwap(FormulaTranslationFlagsArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FormulaTranslationFlagsArchive, contains_frozen_references_)
      + sizeof(FormulaTranslationFlagsArchive::contains_frozen_references_)
      - PROTOBUF_FIELD_OFFSET(FormulaTranslationFlagsArchive, excel_import_translation_)>(
          reinterpret_cast<char*>(&excel_import_translation_),
          reinterpret_cast<char*>(&other->excel_import_translation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FormulaTranslationFlagsArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[101]);
}

// ===================================================================

class FormulaArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<FormulaArchive>()._has_bits_);
  static const ::TSCE::ASTNodeArrayArchive& ast_node_array(const FormulaArchive* msg);
  static void set_has_ast_node_array(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_host_column(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_host_row(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_host_column_is_negative(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_host_row_is_negative(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::TSCE::FormulaTranslationFlagsArchive& translation_flags(const FormulaArchive* msg);
  static void set_has_translation_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::UUID& host_table_uid(const FormulaArchive* msg);
  static void set_has_host_table_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::UUID& host_column_uid(const FormulaArchive* msg);
  static void set_has_host_column_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::UUID& host_row_uid(const FormulaArchive* msg);
  static void set_has_host_row_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSCE::ASTNodeArrayArchive&
FormulaArchive::_Internal::ast_node_array(const FormulaArchive* msg) {
  return *msg->ast_node_array_;
}
const ::TSCE::FormulaTranslationFlagsArchive&
FormulaArchive::_Internal::translation_flags(const FormulaArchive* msg) {
  return *msg->translation_flags_;
}
const ::TSP::UUID&
FormulaArchive::_Internal::host_table_uid(const FormulaArchive* msg) {
  return *msg->host_table_uid_;
}
const ::TSP::UUID&
FormulaArchive::_Internal::host_column_uid(const FormulaArchive* msg) {
  return *msg->host_column_uid_;
}
const ::TSP::UUID&
FormulaArchive::_Internal::host_row_uid(const FormulaArchive* msg) {
  return *msg->host_row_uid_;
}
void FormulaArchive::clear_host_table_uid() {
  if (host_table_uid_ != nullptr) host_table_uid_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void FormulaArchive::clear_host_column_uid() {
  if (host_column_uid_ != nullptr) host_column_uid_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void FormulaArchive::clear_host_row_uid() {
  if (host_row_uid_ != nullptr) host_row_uid_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
FormulaArchive::FormulaArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.FormulaArchive)
}
FormulaArchive::FormulaArchive(const FormulaArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ast_node_array()) {
    ast_node_array_ = new ::TSCE::ASTNodeArrayArchive(*from.ast_node_array_);
  } else {
    ast_node_array_ = nullptr;
  }
  if (from._internal_has_translation_flags()) {
    translation_flags_ = new ::TSCE::FormulaTranslationFlagsArchive(*from.translation_flags_);
  } else {
    translation_flags_ = nullptr;
  }
  if (from._internal_has_host_table_uid()) {
    host_table_uid_ = new ::TSP::UUID(*from.host_table_uid_);
  } else {
    host_table_uid_ = nullptr;
  }
  if (from._internal_has_host_column_uid()) {
    host_column_uid_ = new ::TSP::UUID(*from.host_column_uid_);
  } else {
    host_column_uid_ = nullptr;
  }
  if (from._internal_has_host_row_uid()) {
    host_row_uid_ = new ::TSP::UUID(*from.host_row_uid_);
  } else {
    host_row_uid_ = nullptr;
  }
  ::memcpy(&host_column_, &from.host_column_,
    static_cast<size_t>(reinterpret_cast<char*>(&host_row_is_negative_) -
    reinterpret_cast<char*>(&host_column_)) + sizeof(host_row_is_negative_));
  // @@protoc_insertion_point(copy_constructor:TSCE.FormulaArchive)
}

void FormulaArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ast_node_array_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&host_row_is_negative_) -
    reinterpret_cast<char*>(&ast_node_array_)) + sizeof(host_row_is_negative_));
}

FormulaArchive::~FormulaArchive() {
  // @@protoc_insertion_point(destructor:TSCE.FormulaArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FormulaArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete ast_node_array_;
  if (this != internal_default_instance()) delete translation_flags_;
  if (this != internal_default_instance()) delete host_table_uid_;
  if (this != internal_default_instance()) delete host_column_uid_;
  if (this != internal_default_instance()) delete host_row_uid_;
}

void FormulaArchive::ArenaDtor(void* object) {
  FormulaArchive* _this = reinterpret_cast< FormulaArchive* >(object);
  (void)_this;
}
void FormulaArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FormulaArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FormulaArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.FormulaArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(ast_node_array_ != nullptr);
      ast_node_array_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(translation_flags_ != nullptr);
      translation_flags_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(host_table_uid_ != nullptr);
      host_table_uid_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(host_column_uid_ != nullptr);
      host_column_uid_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(host_row_uid_ != nullptr);
      host_row_uid_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&host_column_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&host_column_is_negative_) -
        reinterpret_cast<char*>(&host_column_)) + sizeof(host_column_is_negative_));
  }
  host_row_is_negative_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FormulaArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCE.ASTNodeArrayArchive AST_node_array = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ast_node_array(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 host_column = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_host_column(&has_bits);
          host_column_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 host_row = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_host_row(&has_bits);
          host_row_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool host_column_is_negative = 4 [default = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_host_column_is_negative(&has_bits);
          host_column_is_negative_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool host_row_is_negative = 5 [default = false];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_host_row_is_negative(&has_bits);
          host_row_is_negative_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCE.FormulaTranslationFlagsArchive translation_flags = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_translation_flags(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.UUID host_table_uid = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_host_table_uid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.UUID host_column_uid = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_host_column_uid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.UUID host_row_uid = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_host_row_uid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FormulaArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.FormulaArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSCE.ASTNodeArrayArchive AST_node_array = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::ast_node_array(this), target, stream);
  }

  // optional uint32 host_column = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_host_column(), target);
  }

  // optional uint32 host_row = 3;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_host_row(), target);
  }

  // optional bool host_column_is_negative = 4 [default = false];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_host_column_is_negative(), target);
  }

  // optional bool host_row_is_negative = 5 [default = false];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_host_row_is_negative(), target);
  }

  // optional .TSCE.FormulaTranslationFlagsArchive translation_flags = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::translation_flags(this), target, stream);
  }

  // optional .TSP.UUID host_table_uid = 7;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::host_table_uid(this), target, stream);
  }

  // optional .TSP.UUID host_column_uid = 8;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::host_column_uid(this), target, stream);
  }

  // optional .TSP.UUID host_row_uid = 9;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::host_row_uid(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.FormulaArchive)
  return target;
}

size_t FormulaArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.FormulaArchive)
  size_t total_size = 0;

  // required .TSCE.ASTNodeArrayArchive AST_node_array = 1;
  if (_internal_has_ast_node_array()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ast_node_array_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000feu) {
    // optional .TSCE.FormulaTranslationFlagsArchive translation_flags = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *translation_flags_);
    }

    // optional .TSP.UUID host_table_uid = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *host_table_uid_);
    }

    // optional .TSP.UUID host_column_uid = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *host_column_uid_);
    }

    // optional .TSP.UUID host_row_uid = 9;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *host_row_uid_);
    }

    // optional uint32 host_column = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_host_column());
    }

    // optional uint32 host_row = 3;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_host_row());
    }

    // optional bool host_column_is_negative = 4 [default = false];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  // optional bool host_row_is_negative = 5 [default = false];
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FormulaArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.FormulaArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const FormulaArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FormulaArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.FormulaArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.FormulaArchive)
    MergeFrom(*source);
  }
}

void FormulaArchive::MergeFrom(const FormulaArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.FormulaArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_ast_node_array()->::TSCE::ASTNodeArrayArchive::MergeFrom(from._internal_ast_node_array());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_translation_flags()->::TSCE::FormulaTranslationFlagsArchive::MergeFrom(from._internal_translation_flags());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_host_table_uid()->::TSP::UUID::MergeFrom(from._internal_host_table_uid());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_host_column_uid()->::TSP::UUID::MergeFrom(from._internal_host_column_uid());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_host_row_uid()->::TSP::UUID::MergeFrom(from._internal_host_row_uid());
    }
    if (cached_has_bits & 0x00000020u) {
      host_column_ = from.host_column_;
    }
    if (cached_has_bits & 0x00000040u) {
      host_row_ = from.host_row_;
    }
    if (cached_has_bits & 0x00000080u) {
      host_column_is_negative_ = from.host_column_is_negative_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_host_row_is_negative(from._internal_host_row_is_negative());
  }
}

void FormulaArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.FormulaArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FormulaArchive::CopyFrom(const FormulaArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.FormulaArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FormulaArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_ast_node_array()) {
    if (!ast_node_array_->IsInitialized()) return false;
  }
  if (_internal_has_host_table_uid()) {
    if (!host_table_uid_->IsInitialized()) return false;
  }
  if (_internal_has_host_column_uid()) {
    if (!host_column_uid_->IsInitialized()) return false;
  }
  if (_internal_has_host_row_uid()) {
    if (!host_row_uid_->IsInitialized()) return false;
  }
  return true;
}

void FormulaArchive::InternalSwap(FormulaArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FormulaArchive, host_row_is_negative_)
      + sizeof(FormulaArchive::host_row_is_negative_)
      - PROTOBUF_FIELD_OFFSET(FormulaArchive, ast_node_array_)>(
          reinterpret_cast<char*>(&ast_node_array_),
          reinterpret_cast<char*>(&other->ast_node_array_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FormulaArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[102]);
}

// ===================================================================

class FunctorArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<FunctorArchive>()._has_bits_);
  static const ::TSCE::FormulaArchive& formula(const FunctorArchive* msg);
  static void set_has_formula(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_num_args(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSCE::FormulaArchive&
FunctorArchive::_Internal::formula(const FunctorArchive* msg) {
  return *msg->formula_;
}
FunctorArchive::FunctorArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.FunctorArchive)
}
FunctorArchive::FunctorArchive(const FunctorArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_formula()) {
    formula_ = new ::TSCE::FormulaArchive(*from.formula_);
  } else {
    formula_ = nullptr;
  }
  num_args_ = from.num_args_;
  // @@protoc_insertion_point(copy_constructor:TSCE.FunctorArchive)
}

void FunctorArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&formula_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&num_args_) -
    reinterpret_cast<char*>(&formula_)) + sizeof(num_args_));
}

FunctorArchive::~FunctorArchive() {
  // @@protoc_insertion_point(destructor:TSCE.FunctorArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FunctorArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete formula_;
}

void FunctorArchive::ArenaDtor(void* object) {
  FunctorArchive* _this = reinterpret_cast< FunctorArchive* >(object);
  (void)_this;
}
void FunctorArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FunctorArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FunctorArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.FunctorArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(formula_ != nullptr);
    formula_->Clear();
  }
  num_args_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FunctorArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCE.FormulaArchive formula = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_formula(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 num_args = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_num_args(&has_bits);
          num_args_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FunctorArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.FunctorArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSCE.FormulaArchive formula = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::formula(this), target, stream);
  }

  // required uint32 num_args = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_num_args(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.FunctorArchive)
  return target;
}

size_t FunctorArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.FunctorArchive)
  size_t total_size = 0;

  if (_internal_has_formula()) {
    // required .TSCE.FormulaArchive formula = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *formula_);
  }

  if (_internal_has_num_args()) {
    // required uint32 num_args = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num_args());
  }

  return total_size;
}
size_t FunctorArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.FunctorArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSCE.FormulaArchive formula = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *formula_);

    // required uint32 num_args = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num_args());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FunctorArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.FunctorArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const FunctorArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FunctorArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.FunctorArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.FunctorArchive)
    MergeFrom(*source);
  }
}

void FunctorArchive::MergeFrom(const FunctorArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.FunctorArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_formula()->::TSCE::FormulaArchive::MergeFrom(from._internal_formula());
    }
    if (cached_has_bits & 0x00000002u) {
      num_args_ = from.num_args_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FunctorArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.FunctorArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FunctorArchive::CopyFrom(const FunctorArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.FunctorArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FunctorArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_formula()) {
    if (!formula_->IsInitialized()) return false;
  }
  return true;
}

void FunctorArchive::InternalSwap(FunctorArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FunctorArchive, num_args_)
      + sizeof(FunctorArchive::num_args_)
      - PROTOBUF_FIELD_OFFSET(FunctorArchive, formula_)>(
          reinterpret_cast<char*>(&formula_),
          reinterpret_cast<char*>(&other->formula_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FunctorArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[103]);
}

// ===================================================================

class FormatStructArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<FormatStructArchive>()._has_bits_);
  static void set_has_format_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_decimal_places(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_currency_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_negative_style(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_show_thousands_separator(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_use_accounting_style(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_duration_style(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_base(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_base_places(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_base_use_minus_sign(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_fraction_accuracy(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_suppress_date_format(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_suppress_time_format(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_date_time_format(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_duration_unit_largest(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_duration_unit_smallest(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000004) ^ 0x00000004) != 0;
  }
};

FormatStructArchive::FormatStructArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.FormatStructArchive)
}
FormatStructArchive::FormatStructArchive(const FormatStructArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  currency_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_currency_code()) {
    currency_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_currency_code(), 
      GetArena());
  }
  date_time_format_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_date_time_format()) {
    date_time_format_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_date_time_format(), 
      GetArena());
  }
  ::memcpy(&format_type_, &from.format_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&duration_unit_smallest_) -
    reinterpret_cast<char*>(&format_type_)) + sizeof(duration_unit_smallest_));
  // @@protoc_insertion_point(copy_constructor:TSCE.FormatStructArchive)
}

void FormatStructArchive::SharedCtor() {
currency_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
date_time_format_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&format_type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&duration_unit_smallest_) -
    reinterpret_cast<char*>(&format_type_)) + sizeof(duration_unit_smallest_));
}

FormatStructArchive::~FormatStructArchive() {
  // @@protoc_insertion_point(destructor:TSCE.FormatStructArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FormatStructArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  currency_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  date_time_format_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FormatStructArchive::ArenaDtor(void* object) {
  FormatStructArchive* _this = reinterpret_cast< FormatStructArchive* >(object);
  (void)_this;
}
void FormatStructArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FormatStructArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FormatStructArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.FormatStructArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      currency_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      date_time_format_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&format_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&show_thousands_separator_) -
        reinterpret_cast<char*>(&format_type_)) + sizeof(show_thousands_separator_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&use_accounting_style_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&duration_unit_smallest_) -
        reinterpret_cast<char*>(&use_accounting_style_)) + sizeof(duration_unit_smallest_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FormatStructArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 format_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_format_type(&has_bits);
          format_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 decimal_places = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_decimal_places(&has_bits);
          decimal_places_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string currency_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_currency_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSCE.FormatStructArchive.currency_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 negative_style = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_negative_style(&has_bits);
          negative_style_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool show_thousands_separator = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_show_thousands_separator(&has_bits);
          show_thousands_separator_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_accounting_style = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_use_accounting_style(&has_bits);
          use_accounting_style_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 duration_style = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_duration_style(&has_bits);
          duration_style_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 base = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_base(&has_bits);
          base_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 base_places = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_base_places(&has_bits);
          base_places_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool base_use_minus_sign = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_base_use_minus_sign(&has_bits);
          base_use_minus_sign_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 fraction_accuracy = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_fraction_accuracy(&has_bits);
          fraction_accuracy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool suppress_date_format = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_suppress_date_format(&has_bits);
          suppress_date_format_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool suppress_time_format = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_suppress_time_format(&has_bits);
          suppress_time_format_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string date_time_format = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_date_time_format();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSCE.FormatStructArchive.date_time_format");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 duration_unit_largest = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_duration_unit_largest(&has_bits);
          duration_unit_largest_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 duration_unit_smallest = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_duration_unit_smallest(&has_bits);
          duration_unit_smallest_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FormatStructArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.FormatStructArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 format_type = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_format_type(), target);
  }

  // optional uint32 decimal_places = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_decimal_places(), target);
  }

  // optional string currency_code = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_currency_code().data(), static_cast<int>(this->_internal_currency_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCE.FormatStructArchive.currency_code");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_currency_code(), target);
  }

  // optional uint32 negative_style = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_negative_style(), target);
  }

  // optional bool show_thousands_separator = 5;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_show_thousands_separator(), target);
  }

  // optional bool use_accounting_style = 6;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_use_accounting_style(), target);
  }

  // optional uint32 duration_style = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_duration_style(), target);
  }

  // optional uint32 base = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_base(), target);
  }

  // optional uint32 base_places = 9;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_base_places(), target);
  }

  // optional bool base_use_minus_sign = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_base_use_minus_sign(), target);
  }

  // optional uint32 fraction_accuracy = 11;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_fraction_accuracy(), target);
  }

  // optional bool suppress_date_format = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_suppress_date_format(), target);
  }

  // optional bool suppress_time_format = 13;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_suppress_time_format(), target);
  }

  // optional string date_time_format = 14;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_date_time_format().data(), static_cast<int>(this->_internal_date_time_format().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCE.FormatStructArchive.date_time_format");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_date_time_format(), target);
  }

  // optional uint32 duration_unit_largest = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_duration_unit_largest(), target);
  }

  // optional uint32 duration_unit_smallest = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_duration_unit_smallest(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.FormatStructArchive)
  return target;
}

size_t FormatStructArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.FormatStructArchive)
  size_t total_size = 0;

  // required uint32 format_type = 1;
  if (_internal_has_format_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_format_type());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string currency_code = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_currency_code());
    }

    // optional string date_time_format = 14;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_date_time_format());
    }

  }
  if (cached_has_bits & 0x000000f8u) {
    // optional uint32 decimal_places = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_decimal_places());
    }

    // optional uint32 negative_style = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_negative_style());
    }

    // optional uint32 duration_style = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_duration_style());
    }

    // optional uint32 base = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_base());
    }

    // optional bool show_thousands_separator = 5;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool use_accounting_style = 6;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool base_use_minus_sign = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool suppress_date_format = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional uint32 base_places = 9;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_base_places());
    }

    // optional uint32 fraction_accuracy = 11;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_fraction_accuracy());
    }

    // optional bool suppress_time_format = 13;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

    // optional uint32 duration_unit_largest = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_duration_unit_largest());
    }

    // optional uint32 duration_unit_smallest = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_duration_unit_smallest());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FormatStructArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.FormatStructArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const FormatStructArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FormatStructArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.FormatStructArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.FormatStructArchive)
    MergeFrom(*source);
  }
}

void FormatStructArchive::MergeFrom(const FormatStructArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.FormatStructArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_currency_code(from._internal_currency_code());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_date_time_format(from._internal_date_time_format());
    }
    if (cached_has_bits & 0x00000004u) {
      format_type_ = from.format_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      decimal_places_ = from.decimal_places_;
    }
    if (cached_has_bits & 0x00000010u) {
      negative_style_ = from.negative_style_;
    }
    if (cached_has_bits & 0x00000020u) {
      duration_style_ = from.duration_style_;
    }
    if (cached_has_bits & 0x00000040u) {
      base_ = from.base_;
    }
    if (cached_has_bits & 0x00000080u) {
      show_thousands_separator_ = from.show_thousands_separator_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      use_accounting_style_ = from.use_accounting_style_;
    }
    if (cached_has_bits & 0x00000200u) {
      base_use_minus_sign_ = from.base_use_minus_sign_;
    }
    if (cached_has_bits & 0x00000400u) {
      suppress_date_format_ = from.suppress_date_format_;
    }
    if (cached_has_bits & 0x00000800u) {
      base_places_ = from.base_places_;
    }
    if (cached_has_bits & 0x00001000u) {
      fraction_accuracy_ = from.fraction_accuracy_;
    }
    if (cached_has_bits & 0x00002000u) {
      suppress_time_format_ = from.suppress_time_format_;
    }
    if (cached_has_bits & 0x00004000u) {
      duration_unit_largest_ = from.duration_unit_largest_;
    }
    if (cached_has_bits & 0x00008000u) {
      duration_unit_smallest_ = from.duration_unit_smallest_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FormatStructArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.FormatStructArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FormatStructArchive::CopyFrom(const FormatStructArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.FormatStructArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FormatStructArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void FormatStructArchive::InternalSwap(FormatStructArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  currency_code_.Swap(&other->currency_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  date_time_format_.Swap(&other->date_time_format_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FormatStructArchive, duration_unit_smallest_)
      + sizeof(FormatStructArchive::duration_unit_smallest_)
      - PROTOBUF_FIELD_OFFSET(FormatStructArchive, format_type_)>(
          reinterpret_cast<char*>(&format_type_),
          reinterpret_cast<char*>(&other->format_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FormatStructArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[104]);
}

// ===================================================================

class RangeCoordinateArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<RangeCoordinateArchive>()._has_bits_);
  static void set_has_top_left_column(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_top_left_row(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_bottom_right_column(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_bottom_right_row(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

RangeCoordinateArchive::RangeCoordinateArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.RangeCoordinateArchive)
}
RangeCoordinateArchive::RangeCoordinateArchive(const RangeCoordinateArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&top_left_column_, &from.top_left_column_,
    static_cast<size_t>(reinterpret_cast<char*>(&bottom_right_row_) -
    reinterpret_cast<char*>(&top_left_column_)) + sizeof(bottom_right_row_));
  // @@protoc_insertion_point(copy_constructor:TSCE.RangeCoordinateArchive)
}

void RangeCoordinateArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&top_left_column_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&bottom_right_row_) -
    reinterpret_cast<char*>(&top_left_column_)) + sizeof(bottom_right_row_));
}

RangeCoordinateArchive::~RangeCoordinateArchive() {
  // @@protoc_insertion_point(destructor:TSCE.RangeCoordinateArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RangeCoordinateArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RangeCoordinateArchive::ArenaDtor(void* object) {
  RangeCoordinateArchive* _this = reinterpret_cast< RangeCoordinateArchive* >(object);
  (void)_this;
}
void RangeCoordinateArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RangeCoordinateArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RangeCoordinateArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.RangeCoordinateArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&top_left_column_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bottom_right_row_) -
        reinterpret_cast<char*>(&top_left_column_)) + sizeof(bottom_right_row_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RangeCoordinateArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 top_left_column = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_top_left_column(&has_bits);
          top_left_column_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 top_left_row = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_top_left_row(&has_bits);
          top_left_row_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 bottom_right_column = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_bottom_right_column(&has_bits);
          bottom_right_column_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 bottom_right_row = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_bottom_right_row(&has_bits);
          bottom_right_row_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RangeCoordinateArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.RangeCoordinateArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 top_left_column = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_top_left_column(), target);
  }

  // required uint32 top_left_row = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_top_left_row(), target);
  }

  // required uint32 bottom_right_column = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_bottom_right_column(), target);
  }

  // required uint32 bottom_right_row = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_bottom_right_row(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.RangeCoordinateArchive)
  return target;
}

size_t RangeCoordinateArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.RangeCoordinateArchive)
  size_t total_size = 0;

  if (_internal_has_top_left_column()) {
    // required uint32 top_left_column = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_top_left_column());
  }

  if (_internal_has_top_left_row()) {
    // required uint32 top_left_row = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_top_left_row());
  }

  if (_internal_has_bottom_right_column()) {
    // required uint32 bottom_right_column = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_bottom_right_column());
  }

  if (_internal_has_bottom_right_row()) {
    // required uint32 bottom_right_row = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_bottom_right_row());
  }

  return total_size;
}
size_t RangeCoordinateArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.RangeCoordinateArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required uint32 top_left_column = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_top_left_column());

    // required uint32 top_left_row = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_top_left_row());

    // required uint32 bottom_right_column = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_bottom_right_column());

    // required uint32 bottom_right_row = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_bottom_right_row());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RangeCoordinateArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.RangeCoordinateArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const RangeCoordinateArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RangeCoordinateArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.RangeCoordinateArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.RangeCoordinateArchive)
    MergeFrom(*source);
  }
}

void RangeCoordinateArchive::MergeFrom(const RangeCoordinateArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.RangeCoordinateArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      top_left_column_ = from.top_left_column_;
    }
    if (cached_has_bits & 0x00000002u) {
      top_left_row_ = from.top_left_row_;
    }
    if (cached_has_bits & 0x00000004u) {
      bottom_right_column_ = from.bottom_right_column_;
    }
    if (cached_has_bits & 0x00000008u) {
      bottom_right_row_ = from.bottom_right_row_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RangeCoordinateArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.RangeCoordinateArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RangeCoordinateArchive::CopyFrom(const RangeCoordinateArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.RangeCoordinateArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RangeCoordinateArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void RangeCoordinateArchive::InternalSwap(RangeCoordinateArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RangeCoordinateArchive, bottom_right_row_)
      + sizeof(RangeCoordinateArchive::bottom_right_row_)
      - PROTOBUF_FIELD_OFFSET(RangeCoordinateArchive, top_left_column_)>(
          reinterpret_cast<char*>(&top_left_column_),
          reinterpret_cast<char*>(&other->top_left_column_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RangeCoordinateArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[105]);
}

// ===================================================================

class TableTransposeInfoArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<TableTransposeInfoArchive>()._has_bits_);
  static void set_has_number_of_footer_rows(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSCE::RangeCoordinateArchive& body_range_for_transposed_table(const TableTransposeInfoArchive* msg);
  static void set_has_body_range_for_transposed_table(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSCE::RangeCoordinateArchive&
TableTransposeInfoArchive::_Internal::body_range_for_transposed_table(const TableTransposeInfoArchive* msg) {
  return *msg->body_range_for_transposed_table_;
}
TableTransposeInfoArchive::TableTransposeInfoArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.TableTransposeInfoArchive)
}
TableTransposeInfoArchive::TableTransposeInfoArchive(const TableTransposeInfoArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_body_range_for_transposed_table()) {
    body_range_for_transposed_table_ = new ::TSCE::RangeCoordinateArchive(*from.body_range_for_transposed_table_);
  } else {
    body_range_for_transposed_table_ = nullptr;
  }
  number_of_footer_rows_ = from.number_of_footer_rows_;
  // @@protoc_insertion_point(copy_constructor:TSCE.TableTransposeInfoArchive)
}

void TableTransposeInfoArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&body_range_for_transposed_table_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&number_of_footer_rows_) -
    reinterpret_cast<char*>(&body_range_for_transposed_table_)) + sizeof(number_of_footer_rows_));
}

TableTransposeInfoArchive::~TableTransposeInfoArchive() {
  // @@protoc_insertion_point(destructor:TSCE.TableTransposeInfoArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TableTransposeInfoArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete body_range_for_transposed_table_;
}

void TableTransposeInfoArchive::ArenaDtor(void* object) {
  TableTransposeInfoArchive* _this = reinterpret_cast< TableTransposeInfoArchive* >(object);
  (void)_this;
}
void TableTransposeInfoArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TableTransposeInfoArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TableTransposeInfoArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.TableTransposeInfoArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(body_range_for_transposed_table_ != nullptr);
    body_range_for_transposed_table_->Clear();
  }
  number_of_footer_rows_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TableTransposeInfoArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 number_of_footer_rows = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_number_of_footer_rows(&has_bits);
          number_of_footer_rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSCE.RangeCoordinateArchive body_range_for_transposed_table = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_body_range_for_transposed_table(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TableTransposeInfoArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.TableTransposeInfoArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 number_of_footer_rows = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_number_of_footer_rows(), target);
  }

  // required .TSCE.RangeCoordinateArchive body_range_for_transposed_table = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::body_range_for_transposed_table(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.TableTransposeInfoArchive)
  return target;
}

size_t TableTransposeInfoArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.TableTransposeInfoArchive)
  size_t total_size = 0;

  if (_internal_has_body_range_for_transposed_table()) {
    // required .TSCE.RangeCoordinateArchive body_range_for_transposed_table = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *body_range_for_transposed_table_);
  }

  if (_internal_has_number_of_footer_rows()) {
    // required uint32 number_of_footer_rows = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_number_of_footer_rows());
  }

  return total_size;
}
size_t TableTransposeInfoArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.TableTransposeInfoArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSCE.RangeCoordinateArchive body_range_for_transposed_table = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *body_range_for_transposed_table_);

    // required uint32 number_of_footer_rows = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_number_of_footer_rows());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TableTransposeInfoArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.TableTransposeInfoArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const TableTransposeInfoArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TableTransposeInfoArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.TableTransposeInfoArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.TableTransposeInfoArchive)
    MergeFrom(*source);
  }
}

void TableTransposeInfoArchive::MergeFrom(const TableTransposeInfoArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.TableTransposeInfoArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_body_range_for_transposed_table()->::TSCE::RangeCoordinateArchive::MergeFrom(from._internal_body_range_for_transposed_table());
    }
    if (cached_has_bits & 0x00000002u) {
      number_of_footer_rows_ = from.number_of_footer_rows_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TableTransposeInfoArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.TableTransposeInfoArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableTransposeInfoArchive::CopyFrom(const TableTransposeInfoArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.TableTransposeInfoArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableTransposeInfoArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_body_range_for_transposed_table()) {
    if (!body_range_for_transposed_table_->IsInitialized()) return false;
  }
  return true;
}

void TableTransposeInfoArchive::InternalSwap(TableTransposeInfoArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TableTransposeInfoArchive, number_of_footer_rows_)
      + sizeof(TableTransposeInfoArchive::number_of_footer_rows_)
      - PROTOBUF_FIELD_OFFSET(TableTransposeInfoArchive, body_range_for_transposed_table_)>(
          reinterpret_cast<char*>(&body_range_for_transposed_table_),
          reinterpret_cast<char*>(&other->body_range_for_transposed_table_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TableTransposeInfoArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[106]);
}

// ===================================================================

class MergeOriginMovedArchive::_Internal {
 public:
};

MergeOriginMovedArchive::MergeOriginMovedArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  src_column_(arena),
  src_row_(arena),
  dst_column_(arena),
  dst_row_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.MergeOriginMovedArchive)
}
MergeOriginMovedArchive::MergeOriginMovedArchive(const MergeOriginMovedArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      src_column_(from.src_column_),
      src_row_(from.src_row_),
      dst_column_(from.dst_column_),
      dst_row_(from.dst_row_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSCE.MergeOriginMovedArchive)
}

void MergeOriginMovedArchive::SharedCtor() {
}

MergeOriginMovedArchive::~MergeOriginMovedArchive() {
  // @@protoc_insertion_point(destructor:TSCE.MergeOriginMovedArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MergeOriginMovedArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MergeOriginMovedArchive::ArenaDtor(void* object) {
  MergeOriginMovedArchive* _this = reinterpret_cast< MergeOriginMovedArchive* >(object);
  (void)_this;
}
void MergeOriginMovedArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MergeOriginMovedArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MergeOriginMovedArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.MergeOriginMovedArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  src_column_.Clear();
  src_row_.Clear();
  dst_column_.Clear();
  dst_row_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MergeOriginMovedArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 src_column = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_src_column(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_src_column(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 src_row = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_src_row(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_src_row(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 dst_column = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_dst_column(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_dst_column(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 dst_row = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_dst_row(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_dst_row(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MergeOriginMovedArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.MergeOriginMovedArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 src_column = 1;
  for (int i = 0, n = this->_internal_src_column_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_src_column(i), target);
  }

  // repeated uint32 src_row = 2;
  for (int i = 0, n = this->_internal_src_row_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_src_row(i), target);
  }

  // repeated uint32 dst_column = 3;
  for (int i = 0, n = this->_internal_dst_column_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_dst_column(i), target);
  }

  // repeated uint32 dst_row = 4;
  for (int i = 0, n = this->_internal_dst_row_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_dst_row(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.MergeOriginMovedArchive)
  return target;
}

size_t MergeOriginMovedArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.MergeOriginMovedArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 src_column = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->src_column_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_src_column_size());
    total_size += data_size;
  }

  // repeated uint32 src_row = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->src_row_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_src_row_size());
    total_size += data_size;
  }

  // repeated uint32 dst_column = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->dst_column_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_dst_column_size());
    total_size += data_size;
  }

  // repeated uint32 dst_row = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->dst_row_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_dst_row_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MergeOriginMovedArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.MergeOriginMovedArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const MergeOriginMovedArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MergeOriginMovedArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.MergeOriginMovedArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.MergeOriginMovedArchive)
    MergeFrom(*source);
  }
}

void MergeOriginMovedArchive::MergeFrom(const MergeOriginMovedArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.MergeOriginMovedArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  src_column_.MergeFrom(from.src_column_);
  src_row_.MergeFrom(from.src_row_);
  dst_column_.MergeFrom(from.dst_column_);
  dst_row_.MergeFrom(from.dst_row_);
}

void MergeOriginMovedArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.MergeOriginMovedArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MergeOriginMovedArchive::CopyFrom(const MergeOriginMovedArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.MergeOriginMovedArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MergeOriginMovedArchive::IsInitialized() const {
  return true;
}

void MergeOriginMovedArchive::InternalSwap(MergeOriginMovedArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  src_column_.InternalSwap(&other->src_column_);
  src_row_.InternalSwap(&other->src_row_);
  dst_column_.InternalSwap(&other->dst_column_);
  dst_row_.InternalSwap(&other->dst_row_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MergeOriginMovedArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[107]);
}

// ===================================================================

class OwnerUIDMapperArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<OwnerUIDMapperArchive>()._has_bits_);
  static const ::TSP::UUID& table_uid(const OwnerUIDMapperArchive* msg);
  static void set_has_table_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUID& next_table_uid(const OwnerUIDMapperArchive* msg);
  static void set_has_next_table_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::UUID& hidden_state_for_rows_owner_uid(const OwnerUIDMapperArchive* msg);
  static void set_has_hidden_state_for_rows_owner_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::UUID& next_hidden_state_for_rows_owner_uid(const OwnerUIDMapperArchive* msg);
  static void set_has_next_hidden_state_for_rows_owner_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::UUID& hidden_state_for_columns_owner_uid(const OwnerUIDMapperArchive* msg);
  static void set_has_hidden_state_for_columns_owner_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSP::UUID& next_hidden_state_for_columns_owner_uid(const OwnerUIDMapperArchive* msg);
  static void set_has_next_hidden_state_for_columns_owner_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSP::UUID& conditional_style_owner_uid(const OwnerUIDMapperArchive* msg);
  static void set_has_conditional_style_owner_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSP::UUID& next_conditional_style_owner_uid(const OwnerUIDMapperArchive* msg);
  static void set_has_next_conditional_style_owner_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::TSP::UUID& sort_rule_reference_tracker_owner_uid(const OwnerUIDMapperArchive* msg);
  static void set_has_sort_rule_reference_tracker_owner_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::TSP::UUID& next_sort_rule_reference_tracker_owner_uid(const OwnerUIDMapperArchive* msg);
  static void set_has_next_sort_rule_reference_tracker_owner_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::TSP::UUID& merge_owner_uid(const OwnerUIDMapperArchive* msg);
  static void set_has_merge_owner_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::TSP::UUID& next_merge_owner_uid(const OwnerUIDMapperArchive* msg);
  static void set_has_next_merge_owner_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::TSP::UUID& category_owner_uid(const OwnerUIDMapperArchive* msg);
  static void set_has_category_owner_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::TSP::UUID& next_category_owner_uid(const OwnerUIDMapperArchive* msg);
  static void set_has_next_category_owner_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::TSP::UUID& category_aggregates_owner_uid(const OwnerUIDMapperArchive* msg);
  static void set_has_category_aggregates_owner_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::TSP::UUID& next_category_aggregates_owner_uid(const OwnerUIDMapperArchive* msg);
  static void set_has_next_category_aggregates_owner_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::TSP::UUID& group_by_uid(const OwnerUIDMapperArchive* msg);
  static void set_has_group_by_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::TSP::UUID& next_group_by_uid(const OwnerUIDMapperArchive* msg);
  static void set_has_next_group_by_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static const ::TSP::UUID& pencil_annotation_owner_uid(const OwnerUIDMapperArchive* msg);
  static void set_has_pencil_annotation_owner_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static const ::TSP::UUID& next_pencil_annotation_owner_uid(const OwnerUIDMapperArchive* msg);
  static void set_has_next_pencil_annotation_owner_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000fffff) ^ 0x000fffff) != 0;
  }
};

const ::TSP::UUID&
OwnerUIDMapperArchive::_Internal::table_uid(const OwnerUIDMapperArchive* msg) {
  return *msg->table_uid_;
}
const ::TSP::UUID&
OwnerUIDMapperArchive::_Internal::next_table_uid(const OwnerUIDMapperArchive* msg) {
  return *msg->next_table_uid_;
}
const ::TSP::UUID&
OwnerUIDMapperArchive::_Internal::hidden_state_for_rows_owner_uid(const OwnerUIDMapperArchive* msg) {
  return *msg->hidden_state_for_rows_owner_uid_;
}
const ::TSP::UUID&
OwnerUIDMapperArchive::_Internal::next_hidden_state_for_rows_owner_uid(const OwnerUIDMapperArchive* msg) {
  return *msg->next_hidden_state_for_rows_owner_uid_;
}
const ::TSP::UUID&
OwnerUIDMapperArchive::_Internal::hidden_state_for_columns_owner_uid(const OwnerUIDMapperArchive* msg) {
  return *msg->hidden_state_for_columns_owner_uid_;
}
const ::TSP::UUID&
OwnerUIDMapperArchive::_Internal::next_hidden_state_for_columns_owner_uid(const OwnerUIDMapperArchive* msg) {
  return *msg->next_hidden_state_for_columns_owner_uid_;
}
const ::TSP::UUID&
OwnerUIDMapperArchive::_Internal::conditional_style_owner_uid(const OwnerUIDMapperArchive* msg) {
  return *msg->conditional_style_owner_uid_;
}
const ::TSP::UUID&
OwnerUIDMapperArchive::_Internal::next_conditional_style_owner_uid(const OwnerUIDMapperArchive* msg) {
  return *msg->next_conditional_style_owner_uid_;
}
const ::TSP::UUID&
OwnerUIDMapperArchive::_Internal::sort_rule_reference_tracker_owner_uid(const OwnerUIDMapperArchive* msg) {
  return *msg->sort_rule_reference_tracker_owner_uid_;
}
const ::TSP::UUID&
OwnerUIDMapperArchive::_Internal::next_sort_rule_reference_tracker_owner_uid(const OwnerUIDMapperArchive* msg) {
  return *msg->next_sort_rule_reference_tracker_owner_uid_;
}
const ::TSP::UUID&
OwnerUIDMapperArchive::_Internal::merge_owner_uid(const OwnerUIDMapperArchive* msg) {
  return *msg->merge_owner_uid_;
}
const ::TSP::UUID&
OwnerUIDMapperArchive::_Internal::next_merge_owner_uid(const OwnerUIDMapperArchive* msg) {
  return *msg->next_merge_owner_uid_;
}
const ::TSP::UUID&
OwnerUIDMapperArchive::_Internal::category_owner_uid(const OwnerUIDMapperArchive* msg) {
  return *msg->category_owner_uid_;
}
const ::TSP::UUID&
OwnerUIDMapperArchive::_Internal::next_category_owner_uid(const OwnerUIDMapperArchive* msg) {
  return *msg->next_category_owner_uid_;
}
const ::TSP::UUID&
OwnerUIDMapperArchive::_Internal::category_aggregates_owner_uid(const OwnerUIDMapperArchive* msg) {
  return *msg->category_aggregates_owner_uid_;
}
const ::TSP::UUID&
OwnerUIDMapperArchive::_Internal::next_category_aggregates_owner_uid(const OwnerUIDMapperArchive* msg) {
  return *msg->next_category_aggregates_owner_uid_;
}
const ::TSP::UUID&
OwnerUIDMapperArchive::_Internal::group_by_uid(const OwnerUIDMapperArchive* msg) {
  return *msg->group_by_uid_;
}
const ::TSP::UUID&
OwnerUIDMapperArchive::_Internal::next_group_by_uid(const OwnerUIDMapperArchive* msg) {
  return *msg->next_group_by_uid_;
}
const ::TSP::UUID&
OwnerUIDMapperArchive::_Internal::pencil_annotation_owner_uid(const OwnerUIDMapperArchive* msg) {
  return *msg->pencil_annotation_owner_uid_;
}
const ::TSP::UUID&
OwnerUIDMapperArchive::_Internal::next_pencil_annotation_owner_uid(const OwnerUIDMapperArchive* msg) {
  return *msg->next_pencil_annotation_owner_uid_;
}
void OwnerUIDMapperArchive::clear_table_uid() {
  if (table_uid_ != nullptr) table_uid_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void OwnerUIDMapperArchive::clear_next_table_uid() {
  if (next_table_uid_ != nullptr) next_table_uid_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void OwnerUIDMapperArchive::clear_hidden_state_for_rows_owner_uid() {
  if (hidden_state_for_rows_owner_uid_ != nullptr) hidden_state_for_rows_owner_uid_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void OwnerUIDMapperArchive::clear_next_hidden_state_for_rows_owner_uid() {
  if (next_hidden_state_for_rows_owner_uid_ != nullptr) next_hidden_state_for_rows_owner_uid_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void OwnerUIDMapperArchive::clear_hidden_state_for_columns_owner_uid() {
  if (hidden_state_for_columns_owner_uid_ != nullptr) hidden_state_for_columns_owner_uid_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void OwnerUIDMapperArchive::clear_next_hidden_state_for_columns_owner_uid() {
  if (next_hidden_state_for_columns_owner_uid_ != nullptr) next_hidden_state_for_columns_owner_uid_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void OwnerUIDMapperArchive::clear_conditional_style_owner_uid() {
  if (conditional_style_owner_uid_ != nullptr) conditional_style_owner_uid_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
void OwnerUIDMapperArchive::clear_next_conditional_style_owner_uid() {
  if (next_conditional_style_owner_uid_ != nullptr) next_conditional_style_owner_uid_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
void OwnerUIDMapperArchive::clear_sort_rule_reference_tracker_owner_uid() {
  if (sort_rule_reference_tracker_owner_uid_ != nullptr) sort_rule_reference_tracker_owner_uid_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
void OwnerUIDMapperArchive::clear_next_sort_rule_reference_tracker_owner_uid() {
  if (next_sort_rule_reference_tracker_owner_uid_ != nullptr) next_sort_rule_reference_tracker_owner_uid_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
void OwnerUIDMapperArchive::clear_merge_owner_uid() {
  if (merge_owner_uid_ != nullptr) merge_owner_uid_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
void OwnerUIDMapperArchive::clear_next_merge_owner_uid() {
  if (next_merge_owner_uid_ != nullptr) next_merge_owner_uid_->Clear();
  _has_bits_[0] &= ~0x00000800u;
}
void OwnerUIDMapperArchive::clear_category_owner_uid() {
  if (category_owner_uid_ != nullptr) category_owner_uid_->Clear();
  _has_bits_[0] &= ~0x00001000u;
}
void OwnerUIDMapperArchive::clear_next_category_owner_uid() {
  if (next_category_owner_uid_ != nullptr) next_category_owner_uid_->Clear();
  _has_bits_[0] &= ~0x00002000u;
}
void OwnerUIDMapperArchive::clear_category_aggregates_owner_uid() {
  if (category_aggregates_owner_uid_ != nullptr) category_aggregates_owner_uid_->Clear();
  _has_bits_[0] &= ~0x00004000u;
}
void OwnerUIDMapperArchive::clear_next_category_aggregates_owner_uid() {
  if (next_category_aggregates_owner_uid_ != nullptr) next_category_aggregates_owner_uid_->Clear();
  _has_bits_[0] &= ~0x00008000u;
}
void OwnerUIDMapperArchive::clear_group_by_uid() {
  if (group_by_uid_ != nullptr) group_by_uid_->Clear();
  _has_bits_[0] &= ~0x00010000u;
}
void OwnerUIDMapperArchive::clear_next_group_by_uid() {
  if (next_group_by_uid_ != nullptr) next_group_by_uid_->Clear();
  _has_bits_[0] &= ~0x00020000u;
}
void OwnerUIDMapperArchive::clear_pencil_annotation_owner_uid() {
  if (pencil_annotation_owner_uid_ != nullptr) pencil_annotation_owner_uid_->Clear();
  _has_bits_[0] &= ~0x00040000u;
}
void OwnerUIDMapperArchive::clear_next_pencil_annotation_owner_uid() {
  if (next_pencil_annotation_owner_uid_ != nullptr) next_pencil_annotation_owner_uid_->Clear();
  _has_bits_[0] &= ~0x00080000u;
}
OwnerUIDMapperArchive::OwnerUIDMapperArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.OwnerUIDMapperArchive)
}
OwnerUIDMapperArchive::OwnerUIDMapperArchive(const OwnerUIDMapperArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_table_uid()) {
    table_uid_ = new ::TSP::UUID(*from.table_uid_);
  } else {
    table_uid_ = nullptr;
  }
  if (from._internal_has_next_table_uid()) {
    next_table_uid_ = new ::TSP::UUID(*from.next_table_uid_);
  } else {
    next_table_uid_ = nullptr;
  }
  if (from._internal_has_hidden_state_for_rows_owner_uid()) {
    hidden_state_for_rows_owner_uid_ = new ::TSP::UUID(*from.hidden_state_for_rows_owner_uid_);
  } else {
    hidden_state_for_rows_owner_uid_ = nullptr;
  }
  if (from._internal_has_next_hidden_state_for_rows_owner_uid()) {
    next_hidden_state_for_rows_owner_uid_ = new ::TSP::UUID(*from.next_hidden_state_for_rows_owner_uid_);
  } else {
    next_hidden_state_for_rows_owner_uid_ = nullptr;
  }
  if (from._internal_has_hidden_state_for_columns_owner_uid()) {
    hidden_state_for_columns_owner_uid_ = new ::TSP::UUID(*from.hidden_state_for_columns_owner_uid_);
  } else {
    hidden_state_for_columns_owner_uid_ = nullptr;
  }
  if (from._internal_has_next_hidden_state_for_columns_owner_uid()) {
    next_hidden_state_for_columns_owner_uid_ = new ::TSP::UUID(*from.next_hidden_state_for_columns_owner_uid_);
  } else {
    next_hidden_state_for_columns_owner_uid_ = nullptr;
  }
  if (from._internal_has_conditional_style_owner_uid()) {
    conditional_style_owner_uid_ = new ::TSP::UUID(*from.conditional_style_owner_uid_);
  } else {
    conditional_style_owner_uid_ = nullptr;
  }
  if (from._internal_has_next_conditional_style_owner_uid()) {
    next_conditional_style_owner_uid_ = new ::TSP::UUID(*from.next_conditional_style_owner_uid_);
  } else {
    next_conditional_style_owner_uid_ = nullptr;
  }
  if (from._internal_has_sort_rule_reference_tracker_owner_uid()) {
    sort_rule_reference_tracker_owner_uid_ = new ::TSP::UUID(*from.sort_rule_reference_tracker_owner_uid_);
  } else {
    sort_rule_reference_tracker_owner_uid_ = nullptr;
  }
  if (from._internal_has_next_sort_rule_reference_tracker_owner_uid()) {
    next_sort_rule_reference_tracker_owner_uid_ = new ::TSP::UUID(*from.next_sort_rule_reference_tracker_owner_uid_);
  } else {
    next_sort_rule_reference_tracker_owner_uid_ = nullptr;
  }
  if (from._internal_has_merge_owner_uid()) {
    merge_owner_uid_ = new ::TSP::UUID(*from.merge_owner_uid_);
  } else {
    merge_owner_uid_ = nullptr;
  }
  if (from._internal_has_next_merge_owner_uid()) {
    next_merge_owner_uid_ = new ::TSP::UUID(*from.next_merge_owner_uid_);
  } else {
    next_merge_owner_uid_ = nullptr;
  }
  if (from._internal_has_category_owner_uid()) {
    category_owner_uid_ = new ::TSP::UUID(*from.category_owner_uid_);
  } else {
    category_owner_uid_ = nullptr;
  }
  if (from._internal_has_next_category_owner_uid()) {
    next_category_owner_uid_ = new ::TSP::UUID(*from.next_category_owner_uid_);
  } else {
    next_category_owner_uid_ = nullptr;
  }
  if (from._internal_has_category_aggregates_owner_uid()) {
    category_aggregates_owner_uid_ = new ::TSP::UUID(*from.category_aggregates_owner_uid_);
  } else {
    category_aggregates_owner_uid_ = nullptr;
  }
  if (from._internal_has_next_category_aggregates_owner_uid()) {
    next_category_aggregates_owner_uid_ = new ::TSP::UUID(*from.next_category_aggregates_owner_uid_);
  } else {
    next_category_aggregates_owner_uid_ = nullptr;
  }
  if (from._internal_has_group_by_uid()) {
    group_by_uid_ = new ::TSP::UUID(*from.group_by_uid_);
  } else {
    group_by_uid_ = nullptr;
  }
  if (from._internal_has_next_group_by_uid()) {
    next_group_by_uid_ = new ::TSP::UUID(*from.next_group_by_uid_);
  } else {
    next_group_by_uid_ = nullptr;
  }
  if (from._internal_has_pencil_annotation_owner_uid()) {
    pencil_annotation_owner_uid_ = new ::TSP::UUID(*from.pencil_annotation_owner_uid_);
  } else {
    pencil_annotation_owner_uid_ = nullptr;
  }
  if (from._internal_has_next_pencil_annotation_owner_uid()) {
    next_pencil_annotation_owner_uid_ = new ::TSP::UUID(*from.next_pencil_annotation_owner_uid_);
  } else {
    next_pencil_annotation_owner_uid_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSCE.OwnerUIDMapperArchive)
}

void OwnerUIDMapperArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&table_uid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&next_pencil_annotation_owner_uid_) -
    reinterpret_cast<char*>(&table_uid_)) + sizeof(next_pencil_annotation_owner_uid_));
}

OwnerUIDMapperArchive::~OwnerUIDMapperArchive() {
  // @@protoc_insertion_point(destructor:TSCE.OwnerUIDMapperArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OwnerUIDMapperArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete table_uid_;
  if (this != internal_default_instance()) delete next_table_uid_;
  if (this != internal_default_instance()) delete hidden_state_for_rows_owner_uid_;
  if (this != internal_default_instance()) delete next_hidden_state_for_rows_owner_uid_;
  if (this != internal_default_instance()) delete hidden_state_for_columns_owner_uid_;
  if (this != internal_default_instance()) delete next_hidden_state_for_columns_owner_uid_;
  if (this != internal_default_instance()) delete conditional_style_owner_uid_;
  if (this != internal_default_instance()) delete next_conditional_style_owner_uid_;
  if (this != internal_default_instance()) delete sort_rule_reference_tracker_owner_uid_;
  if (this != internal_default_instance()) delete next_sort_rule_reference_tracker_owner_uid_;
  if (this != internal_default_instance()) delete merge_owner_uid_;
  if (this != internal_default_instance()) delete next_merge_owner_uid_;
  if (this != internal_default_instance()) delete category_owner_uid_;
  if (this != internal_default_instance()) delete next_category_owner_uid_;
  if (this != internal_default_instance()) delete category_aggregates_owner_uid_;
  if (this != internal_default_instance()) delete next_category_aggregates_owner_uid_;
  if (this != internal_default_instance()) delete group_by_uid_;
  if (this != internal_default_instance()) delete next_group_by_uid_;
  if (this != internal_default_instance()) delete pencil_annotation_owner_uid_;
  if (this != internal_default_instance()) delete next_pencil_annotation_owner_uid_;
}

void OwnerUIDMapperArchive::ArenaDtor(void* object) {
  OwnerUIDMapperArchive* _this = reinterpret_cast< OwnerUIDMapperArchive* >(object);
  (void)_this;
}
void OwnerUIDMapperArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OwnerUIDMapperArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OwnerUIDMapperArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.OwnerUIDMapperArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(table_uid_ != nullptr);
      table_uid_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(next_table_uid_ != nullptr);
      next_table_uid_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(hidden_state_for_rows_owner_uid_ != nullptr);
      hidden_state_for_rows_owner_uid_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(next_hidden_state_for_rows_owner_uid_ != nullptr);
      next_hidden_state_for_rows_owner_uid_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(hidden_state_for_columns_owner_uid_ != nullptr);
      hidden_state_for_columns_owner_uid_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(next_hidden_state_for_columns_owner_uid_ != nullptr);
      next_hidden_state_for_columns_owner_uid_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(conditional_style_owner_uid_ != nullptr);
      conditional_style_owner_uid_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(next_conditional_style_owner_uid_ != nullptr);
      next_conditional_style_owner_uid_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(sort_rule_reference_tracker_owner_uid_ != nullptr);
      sort_rule_reference_tracker_owner_uid_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(next_sort_rule_reference_tracker_owner_uid_ != nullptr);
      next_sort_rule_reference_tracker_owner_uid_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(merge_owner_uid_ != nullptr);
      merge_owner_uid_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(next_merge_owner_uid_ != nullptr);
      next_merge_owner_uid_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(category_owner_uid_ != nullptr);
      category_owner_uid_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(next_category_owner_uid_ != nullptr);
      next_category_owner_uid_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(category_aggregates_owner_uid_ != nullptr);
      category_aggregates_owner_uid_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(next_category_aggregates_owner_uid_ != nullptr);
      next_category_aggregates_owner_uid_->Clear();
    }
  }
  if (cached_has_bits & 0x000f0000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(group_by_uid_ != nullptr);
      group_by_uid_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(next_group_by_uid_ != nullptr);
      next_group_by_uid_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(pencil_annotation_owner_uid_ != nullptr);
      pencil_annotation_owner_uid_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(next_pencil_annotation_owner_uid_ != nullptr);
      next_pencil_annotation_owner_uid_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OwnerUIDMapperArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.UUID table_uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_uid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.UUID next_table_uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_next_table_uid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.UUID hidden_state_for_rows_owner_uid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_hidden_state_for_rows_owner_uid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.UUID next_hidden_state_for_rows_owner_uid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_next_hidden_state_for_rows_owner_uid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.UUID hidden_state_for_columns_owner_uid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_hidden_state_for_columns_owner_uid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.UUID next_hidden_state_for_columns_owner_uid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_next_hidden_state_for_columns_owner_uid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.UUID conditional_style_owner_uid = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_conditional_style_owner_uid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.UUID next_conditional_style_owner_uid = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_next_conditional_style_owner_uid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.UUID sort_rule_reference_tracker_owner_uid = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_sort_rule_reference_tracker_owner_uid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.UUID next_sort_rule_reference_tracker_owner_uid = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_next_sort_rule_reference_tracker_owner_uid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.UUID merge_owner_uid = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_merge_owner_uid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.UUID next_merge_owner_uid = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_next_merge_owner_uid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.UUID category_owner_uid = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_category_owner_uid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.UUID next_category_owner_uid = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_next_category_owner_uid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.UUID category_aggregates_owner_uid = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_category_aggregates_owner_uid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.UUID next_category_aggregates_owner_uid = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_next_category_aggregates_owner_uid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.UUID group_by_uid = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_group_by_uid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.UUID next_group_by_uid = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_next_group_by_uid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.UUID pencil_annotation_owner_uid = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_pencil_annotation_owner_uid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.UUID next_pencil_annotation_owner_uid = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_next_pencil_annotation_owner_uid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OwnerUIDMapperArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.OwnerUIDMapperArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSP.UUID table_uid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::table_uid(this), target, stream);
  }

  // required .TSP.UUID next_table_uid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::next_table_uid(this), target, stream);
  }

  // required .TSP.UUID hidden_state_for_rows_owner_uid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::hidden_state_for_rows_owner_uid(this), target, stream);
  }

  // required .TSP.UUID next_hidden_state_for_rows_owner_uid = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::next_hidden_state_for_rows_owner_uid(this), target, stream);
  }

  // required .TSP.UUID hidden_state_for_columns_owner_uid = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::hidden_state_for_columns_owner_uid(this), target, stream);
  }

  // required .TSP.UUID next_hidden_state_for_columns_owner_uid = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::next_hidden_state_for_columns_owner_uid(this), target, stream);
  }

  // required .TSP.UUID conditional_style_owner_uid = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::conditional_style_owner_uid(this), target, stream);
  }

  // required .TSP.UUID next_conditional_style_owner_uid = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::next_conditional_style_owner_uid(this), target, stream);
  }

  // required .TSP.UUID sort_rule_reference_tracker_owner_uid = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::sort_rule_reference_tracker_owner_uid(this), target, stream);
  }

  // required .TSP.UUID next_sort_rule_reference_tracker_owner_uid = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::next_sort_rule_reference_tracker_owner_uid(this), target, stream);
  }

  // required .TSP.UUID merge_owner_uid = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::merge_owner_uid(this), target, stream);
  }

  // required .TSP.UUID next_merge_owner_uid = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::next_merge_owner_uid(this), target, stream);
  }

  // required .TSP.UUID category_owner_uid = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::category_owner_uid(this), target, stream);
  }

  // required .TSP.UUID next_category_owner_uid = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::next_category_owner_uid(this), target, stream);
  }

  // required .TSP.UUID category_aggregates_owner_uid = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::category_aggregates_owner_uid(this), target, stream);
  }

  // required .TSP.UUID next_category_aggregates_owner_uid = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::next_category_aggregates_owner_uid(this), target, stream);
  }

  // required .TSP.UUID group_by_uid = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::group_by_uid(this), target, stream);
  }

  // required .TSP.UUID next_group_by_uid = 18;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::next_group_by_uid(this), target, stream);
  }

  // required .TSP.UUID pencil_annotation_owner_uid = 19;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::pencil_annotation_owner_uid(this), target, stream);
  }

  // required .TSP.UUID next_pencil_annotation_owner_uid = 20;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::next_pencil_annotation_owner_uid(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.OwnerUIDMapperArchive)
  return target;
}

size_t OwnerUIDMapperArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.OwnerUIDMapperArchive)
  size_t total_size = 0;

  if (_internal_has_table_uid()) {
    // required .TSP.UUID table_uid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *table_uid_);
  }

  if (_internal_has_next_table_uid()) {
    // required .TSP.UUID next_table_uid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *next_table_uid_);
  }

  if (_internal_has_hidden_state_for_rows_owner_uid()) {
    // required .TSP.UUID hidden_state_for_rows_owner_uid = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hidden_state_for_rows_owner_uid_);
  }

  if (_internal_has_next_hidden_state_for_rows_owner_uid()) {
    // required .TSP.UUID next_hidden_state_for_rows_owner_uid = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *next_hidden_state_for_rows_owner_uid_);
  }

  if (_internal_has_hidden_state_for_columns_owner_uid()) {
    // required .TSP.UUID hidden_state_for_columns_owner_uid = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hidden_state_for_columns_owner_uid_);
  }

  if (_internal_has_next_hidden_state_for_columns_owner_uid()) {
    // required .TSP.UUID next_hidden_state_for_columns_owner_uid = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *next_hidden_state_for_columns_owner_uid_);
  }

  if (_internal_has_conditional_style_owner_uid()) {
    // required .TSP.UUID conditional_style_owner_uid = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *conditional_style_owner_uid_);
  }

  if (_internal_has_next_conditional_style_owner_uid()) {
    // required .TSP.UUID next_conditional_style_owner_uid = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *next_conditional_style_owner_uid_);
  }

  if (_internal_has_sort_rule_reference_tracker_owner_uid()) {
    // required .TSP.UUID sort_rule_reference_tracker_owner_uid = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sort_rule_reference_tracker_owner_uid_);
  }

  if (_internal_has_next_sort_rule_reference_tracker_owner_uid()) {
    // required .TSP.UUID next_sort_rule_reference_tracker_owner_uid = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *next_sort_rule_reference_tracker_owner_uid_);
  }

  if (_internal_has_merge_owner_uid()) {
    // required .TSP.UUID merge_owner_uid = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *merge_owner_uid_);
  }

  if (_internal_has_next_merge_owner_uid()) {
    // required .TSP.UUID next_merge_owner_uid = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *next_merge_owner_uid_);
  }

  if (_internal_has_category_owner_uid()) {
    // required .TSP.UUID category_owner_uid = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *category_owner_uid_);
  }

  if (_internal_has_next_category_owner_uid()) {
    // required .TSP.UUID next_category_owner_uid = 14;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *next_category_owner_uid_);
  }

  if (_internal_has_category_aggregates_owner_uid()) {
    // required .TSP.UUID category_aggregates_owner_uid = 15;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *category_aggregates_owner_uid_);
  }

  if (_internal_has_next_category_aggregates_owner_uid()) {
    // required .TSP.UUID next_category_aggregates_owner_uid = 16;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *next_category_aggregates_owner_uid_);
  }

  if (_internal_has_group_by_uid()) {
    // required .TSP.UUID group_by_uid = 17;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *group_by_uid_);
  }

  if (_internal_has_next_group_by_uid()) {
    // required .TSP.UUID next_group_by_uid = 18;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *next_group_by_uid_);
  }

  if (_internal_has_pencil_annotation_owner_uid()) {
    // required .TSP.UUID pencil_annotation_owner_uid = 19;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pencil_annotation_owner_uid_);
  }

  if (_internal_has_next_pencil_annotation_owner_uid()) {
    // required .TSP.UUID next_pencil_annotation_owner_uid = 20;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *next_pencil_annotation_owner_uid_);
  }

  return total_size;
}
size_t OwnerUIDMapperArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.OwnerUIDMapperArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x000fffff) ^ 0x000fffff) == 0) {  // All required fields are present.
    // required .TSP.UUID table_uid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *table_uid_);

    // required .TSP.UUID next_table_uid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *next_table_uid_);

    // required .TSP.UUID hidden_state_for_rows_owner_uid = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hidden_state_for_rows_owner_uid_);

    // required .TSP.UUID next_hidden_state_for_rows_owner_uid = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *next_hidden_state_for_rows_owner_uid_);

    // required .TSP.UUID hidden_state_for_columns_owner_uid = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hidden_state_for_columns_owner_uid_);

    // required .TSP.UUID next_hidden_state_for_columns_owner_uid = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *next_hidden_state_for_columns_owner_uid_);

    // required .TSP.UUID conditional_style_owner_uid = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *conditional_style_owner_uid_);

    // required .TSP.UUID next_conditional_style_owner_uid = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *next_conditional_style_owner_uid_);

    // required .TSP.UUID sort_rule_reference_tracker_owner_uid = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sort_rule_reference_tracker_owner_uid_);

    // required .TSP.UUID next_sort_rule_reference_tracker_owner_uid = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *next_sort_rule_reference_tracker_owner_uid_);

    // required .TSP.UUID merge_owner_uid = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *merge_owner_uid_);

    // required .TSP.UUID next_merge_owner_uid = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *next_merge_owner_uid_);

    // required .TSP.UUID category_owner_uid = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *category_owner_uid_);

    // required .TSP.UUID next_category_owner_uid = 14;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *next_category_owner_uid_);

    // required .TSP.UUID category_aggregates_owner_uid = 15;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *category_aggregates_owner_uid_);

    // required .TSP.UUID next_category_aggregates_owner_uid = 16;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *next_category_aggregates_owner_uid_);

    // required .TSP.UUID group_by_uid = 17;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *group_by_uid_);

    // required .TSP.UUID next_group_by_uid = 18;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *next_group_by_uid_);

    // required .TSP.UUID pencil_annotation_owner_uid = 19;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pencil_annotation_owner_uid_);

    // required .TSP.UUID next_pencil_annotation_owner_uid = 20;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *next_pencil_annotation_owner_uid_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OwnerUIDMapperArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.OwnerUIDMapperArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const OwnerUIDMapperArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OwnerUIDMapperArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.OwnerUIDMapperArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.OwnerUIDMapperArchive)
    MergeFrom(*source);
  }
}

void OwnerUIDMapperArchive::MergeFrom(const OwnerUIDMapperArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.OwnerUIDMapperArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_table_uid()->::TSP::UUID::MergeFrom(from._internal_table_uid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_next_table_uid()->::TSP::UUID::MergeFrom(from._internal_next_table_uid());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_hidden_state_for_rows_owner_uid()->::TSP::UUID::MergeFrom(from._internal_hidden_state_for_rows_owner_uid());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_next_hidden_state_for_rows_owner_uid()->::TSP::UUID::MergeFrom(from._internal_next_hidden_state_for_rows_owner_uid());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_hidden_state_for_columns_owner_uid()->::TSP::UUID::MergeFrom(from._internal_hidden_state_for_columns_owner_uid());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_next_hidden_state_for_columns_owner_uid()->::TSP::UUID::MergeFrom(from._internal_next_hidden_state_for_columns_owner_uid());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_conditional_style_owner_uid()->::TSP::UUID::MergeFrom(from._internal_conditional_style_owner_uid());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_next_conditional_style_owner_uid()->::TSP::UUID::MergeFrom(from._internal_next_conditional_style_owner_uid());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_sort_rule_reference_tracker_owner_uid()->::TSP::UUID::MergeFrom(from._internal_sort_rule_reference_tracker_owner_uid());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_next_sort_rule_reference_tracker_owner_uid()->::TSP::UUID::MergeFrom(from._internal_next_sort_rule_reference_tracker_owner_uid());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_merge_owner_uid()->::TSP::UUID::MergeFrom(from._internal_merge_owner_uid());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_next_merge_owner_uid()->::TSP::UUID::MergeFrom(from._internal_next_merge_owner_uid());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_mutable_category_owner_uid()->::TSP::UUID::MergeFrom(from._internal_category_owner_uid());
    }
    if (cached_has_bits & 0x00002000u) {
      _internal_mutable_next_category_owner_uid()->::TSP::UUID::MergeFrom(from._internal_next_category_owner_uid());
    }
    if (cached_has_bits & 0x00004000u) {
      _internal_mutable_category_aggregates_owner_uid()->::TSP::UUID::MergeFrom(from._internal_category_aggregates_owner_uid());
    }
    if (cached_has_bits & 0x00008000u) {
      _internal_mutable_next_category_aggregates_owner_uid()->::TSP::UUID::MergeFrom(from._internal_next_category_aggregates_owner_uid());
    }
  }
  if (cached_has_bits & 0x000f0000u) {
    if (cached_has_bits & 0x00010000u) {
      _internal_mutable_group_by_uid()->::TSP::UUID::MergeFrom(from._internal_group_by_uid());
    }
    if (cached_has_bits & 0x00020000u) {
      _internal_mutable_next_group_by_uid()->::TSP::UUID::MergeFrom(from._internal_next_group_by_uid());
    }
    if (cached_has_bits & 0x00040000u) {
      _internal_mutable_pencil_annotation_owner_uid()->::TSP::UUID::MergeFrom(from._internal_pencil_annotation_owner_uid());
    }
    if (cached_has_bits & 0x00080000u) {
      _internal_mutable_next_pencil_annotation_owner_uid()->::TSP::UUID::MergeFrom(from._internal_next_pencil_annotation_owner_uid());
    }
  }
}

void OwnerUIDMapperArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.OwnerUIDMapperArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OwnerUIDMapperArchive::CopyFrom(const OwnerUIDMapperArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.OwnerUIDMapperArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OwnerUIDMapperArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_table_uid()) {
    if (!table_uid_->IsInitialized()) return false;
  }
  if (_internal_has_next_table_uid()) {
    if (!next_table_uid_->IsInitialized()) return false;
  }
  if (_internal_has_hidden_state_for_rows_owner_uid()) {
    if (!hidden_state_for_rows_owner_uid_->IsInitialized()) return false;
  }
  if (_internal_has_next_hidden_state_for_rows_owner_uid()) {
    if (!next_hidden_state_for_rows_owner_uid_->IsInitialized()) return false;
  }
  if (_internal_has_hidden_state_for_columns_owner_uid()) {
    if (!hidden_state_for_columns_owner_uid_->IsInitialized()) return false;
  }
  if (_internal_has_next_hidden_state_for_columns_owner_uid()) {
    if (!next_hidden_state_for_columns_owner_uid_->IsInitialized()) return false;
  }
  if (_internal_has_conditional_style_owner_uid()) {
    if (!conditional_style_owner_uid_->IsInitialized()) return false;
  }
  if (_internal_has_next_conditional_style_owner_uid()) {
    if (!next_conditional_style_owner_uid_->IsInitialized()) return false;
  }
  if (_internal_has_sort_rule_reference_tracker_owner_uid()) {
    if (!sort_rule_reference_tracker_owner_uid_->IsInitialized()) return false;
  }
  if (_internal_has_next_sort_rule_reference_tracker_owner_uid()) {
    if (!next_sort_rule_reference_tracker_owner_uid_->IsInitialized()) return false;
  }
  if (_internal_has_merge_owner_uid()) {
    if (!merge_owner_uid_->IsInitialized()) return false;
  }
  if (_internal_has_next_merge_owner_uid()) {
    if (!next_merge_owner_uid_->IsInitialized()) return false;
  }
  if (_internal_has_category_owner_uid()) {
    if (!category_owner_uid_->IsInitialized()) return false;
  }
  if (_internal_has_next_category_owner_uid()) {
    if (!next_category_owner_uid_->IsInitialized()) return false;
  }
  if (_internal_has_category_aggregates_owner_uid()) {
    if (!category_aggregates_owner_uid_->IsInitialized()) return false;
  }
  if (_internal_has_next_category_aggregates_owner_uid()) {
    if (!next_category_aggregates_owner_uid_->IsInitialized()) return false;
  }
  if (_internal_has_group_by_uid()) {
    if (!group_by_uid_->IsInitialized()) return false;
  }
  if (_internal_has_next_group_by_uid()) {
    if (!next_group_by_uid_->IsInitialized()) return false;
  }
  if (_internal_has_pencil_annotation_owner_uid()) {
    if (!pencil_annotation_owner_uid_->IsInitialized()) return false;
  }
  if (_internal_has_next_pencil_annotation_owner_uid()) {
    if (!next_pencil_annotation_owner_uid_->IsInitialized()) return false;
  }
  return true;
}

void OwnerUIDMapperArchive::InternalSwap(OwnerUIDMapperArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OwnerUIDMapperArchive, next_pencil_annotation_owner_uid_)
      + sizeof(OwnerUIDMapperArchive::next_pencil_annotation_owner_uid_)
      - PROTOBUF_FIELD_OFFSET(OwnerUIDMapperArchive, table_uid_)>(
          reinterpret_cast<char*>(&table_uid_),
          reinterpret_cast<char*>(&other->table_uid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OwnerUIDMapperArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[108]);
}

// ===================================================================

class RewriteTableUIDInfoArchive_TableUIDMapEntryArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<RewriteTableUIDInfoArchive_TableUIDMapEntryArchive>()._has_bits_);
  static const ::TSP::UUID& prev_table_uid(const RewriteTableUIDInfoArchive_TableUIDMapEntryArchive* msg);
  static void set_has_prev_table_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUID& new_table_uid(const RewriteTableUIDInfoArchive_TableUIDMapEntryArchive* msg);
  static void set_has_new_table_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSP::UUID&
RewriteTableUIDInfoArchive_TableUIDMapEntryArchive::_Internal::prev_table_uid(const RewriteTableUIDInfoArchive_TableUIDMapEntryArchive* msg) {
  return *msg->prev_table_uid_;
}
const ::TSP::UUID&
RewriteTableUIDInfoArchive_TableUIDMapEntryArchive::_Internal::new_table_uid(const RewriteTableUIDInfoArchive_TableUIDMapEntryArchive* msg) {
  return *msg->new_table_uid_;
}
void RewriteTableUIDInfoArchive_TableUIDMapEntryArchive::clear_prev_table_uid() {
  if (prev_table_uid_ != nullptr) prev_table_uid_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void RewriteTableUIDInfoArchive_TableUIDMapEntryArchive::clear_new_table_uid() {
  if (new_table_uid_ != nullptr) new_table_uid_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
RewriteTableUIDInfoArchive_TableUIDMapEntryArchive::RewriteTableUIDInfoArchive_TableUIDMapEntryArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.RewriteTableUIDInfoArchive.TableUIDMapEntryArchive)
}
RewriteTableUIDInfoArchive_TableUIDMapEntryArchive::RewriteTableUIDInfoArchive_TableUIDMapEntryArchive(const RewriteTableUIDInfoArchive_TableUIDMapEntryArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_prev_table_uid()) {
    prev_table_uid_ = new ::TSP::UUID(*from.prev_table_uid_);
  } else {
    prev_table_uid_ = nullptr;
  }
  if (from._internal_has_new_table_uid()) {
    new_table_uid_ = new ::TSP::UUID(*from.new_table_uid_);
  } else {
    new_table_uid_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSCE.RewriteTableUIDInfoArchive.TableUIDMapEntryArchive)
}

void RewriteTableUIDInfoArchive_TableUIDMapEntryArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&prev_table_uid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&new_table_uid_) -
    reinterpret_cast<char*>(&prev_table_uid_)) + sizeof(new_table_uid_));
}

RewriteTableUIDInfoArchive_TableUIDMapEntryArchive::~RewriteTableUIDInfoArchive_TableUIDMapEntryArchive() {
  // @@protoc_insertion_point(destructor:TSCE.RewriteTableUIDInfoArchive.TableUIDMapEntryArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RewriteTableUIDInfoArchive_TableUIDMapEntryArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete prev_table_uid_;
  if (this != internal_default_instance()) delete new_table_uid_;
}

void RewriteTableUIDInfoArchive_TableUIDMapEntryArchive::ArenaDtor(void* object) {
  RewriteTableUIDInfoArchive_TableUIDMapEntryArchive* _this = reinterpret_cast< RewriteTableUIDInfoArchive_TableUIDMapEntryArchive* >(object);
  (void)_this;
}
void RewriteTableUIDInfoArchive_TableUIDMapEntryArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RewriteTableUIDInfoArchive_TableUIDMapEntryArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RewriteTableUIDInfoArchive_TableUIDMapEntryArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.RewriteTableUIDInfoArchive.TableUIDMapEntryArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(prev_table_uid_ != nullptr);
      prev_table_uid_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(new_table_uid_ != nullptr);
      new_table_uid_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RewriteTableUIDInfoArchive_TableUIDMapEntryArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.UUID prev_table_uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_prev_table_uid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.UUID new_table_uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_table_uid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RewriteTableUIDInfoArchive_TableUIDMapEntryArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.RewriteTableUIDInfoArchive.TableUIDMapEntryArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSP.UUID prev_table_uid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::prev_table_uid(this), target, stream);
  }

  // required .TSP.UUID new_table_uid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::new_table_uid(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.RewriteTableUIDInfoArchive.TableUIDMapEntryArchive)
  return target;
}

size_t RewriteTableUIDInfoArchive_TableUIDMapEntryArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.RewriteTableUIDInfoArchive.TableUIDMapEntryArchive)
  size_t total_size = 0;

  if (_internal_has_prev_table_uid()) {
    // required .TSP.UUID prev_table_uid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *prev_table_uid_);
  }

  if (_internal_has_new_table_uid()) {
    // required .TSP.UUID new_table_uid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *new_table_uid_);
  }

  return total_size;
}
size_t RewriteTableUIDInfoArchive_TableUIDMapEntryArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.RewriteTableUIDInfoArchive.TableUIDMapEntryArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSP.UUID prev_table_uid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *prev_table_uid_);

    // required .TSP.UUID new_table_uid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *new_table_uid_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RewriteTableUIDInfoArchive_TableUIDMapEntryArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.RewriteTableUIDInfoArchive.TableUIDMapEntryArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const RewriteTableUIDInfoArchive_TableUIDMapEntryArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RewriteTableUIDInfoArchive_TableUIDMapEntryArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.RewriteTableUIDInfoArchive.TableUIDMapEntryArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.RewriteTableUIDInfoArchive.TableUIDMapEntryArchive)
    MergeFrom(*source);
  }
}

void RewriteTableUIDInfoArchive_TableUIDMapEntryArchive::MergeFrom(const RewriteTableUIDInfoArchive_TableUIDMapEntryArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.RewriteTableUIDInfoArchive.TableUIDMapEntryArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_prev_table_uid()->::TSP::UUID::MergeFrom(from._internal_prev_table_uid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_new_table_uid()->::TSP::UUID::MergeFrom(from._internal_new_table_uid());
    }
  }
}

void RewriteTableUIDInfoArchive_TableUIDMapEntryArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.RewriteTableUIDInfoArchive.TableUIDMapEntryArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RewriteTableUIDInfoArchive_TableUIDMapEntryArchive::CopyFrom(const RewriteTableUIDInfoArchive_TableUIDMapEntryArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.RewriteTableUIDInfoArchive.TableUIDMapEntryArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RewriteTableUIDInfoArchive_TableUIDMapEntryArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_prev_table_uid()) {
    if (!prev_table_uid_->IsInitialized()) return false;
  }
  if (_internal_has_new_table_uid()) {
    if (!new_table_uid_->IsInitialized()) return false;
  }
  return true;
}

void RewriteTableUIDInfoArchive_TableUIDMapEntryArchive::InternalSwap(RewriteTableUIDInfoArchive_TableUIDMapEntryArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RewriteTableUIDInfoArchive_TableUIDMapEntryArchive, new_table_uid_)
      + sizeof(RewriteTableUIDInfoArchive_TableUIDMapEntryArchive::new_table_uid_)
      - PROTOBUF_FIELD_OFFSET(RewriteTableUIDInfoArchive_TableUIDMapEntryArchive, prev_table_uid_)>(
          reinterpret_cast<char*>(&prev_table_uid_),
          reinterpret_cast<char*>(&other->prev_table_uid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RewriteTableUIDInfoArchive_TableUIDMapEntryArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[109]);
}

// ===================================================================

class RewriteTableUIDInfoArchive::_Internal {
 public:
};

RewriteTableUIDInfoArchive::RewriteTableUIDInfoArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  table_uid_map_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.RewriteTableUIDInfoArchive)
}
RewriteTableUIDInfoArchive::RewriteTableUIDInfoArchive(const RewriteTableUIDInfoArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      table_uid_map_(from.table_uid_map_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSCE.RewriteTableUIDInfoArchive)
}

void RewriteTableUIDInfoArchive::SharedCtor() {
}

RewriteTableUIDInfoArchive::~RewriteTableUIDInfoArchive() {
  // @@protoc_insertion_point(destructor:TSCE.RewriteTableUIDInfoArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RewriteTableUIDInfoArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RewriteTableUIDInfoArchive::ArenaDtor(void* object) {
  RewriteTableUIDInfoArchive* _this = reinterpret_cast< RewriteTableUIDInfoArchive* >(object);
  (void)_this;
}
void RewriteTableUIDInfoArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RewriteTableUIDInfoArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RewriteTableUIDInfoArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.RewriteTableUIDInfoArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  table_uid_map_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RewriteTableUIDInfoArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSCE.RewriteTableUIDInfoArchive.TableUIDMapEntryArchive table_uid_map = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_table_uid_map(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RewriteTableUIDInfoArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.RewriteTableUIDInfoArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSCE.RewriteTableUIDInfoArchive.TableUIDMapEntryArchive table_uid_map = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_table_uid_map_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_table_uid_map(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.RewriteTableUIDInfoArchive)
  return target;
}

size_t RewriteTableUIDInfoArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.RewriteTableUIDInfoArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.RewriteTableUIDInfoArchive.TableUIDMapEntryArchive table_uid_map = 1;
  total_size += 1UL * this->_internal_table_uid_map_size();
  for (const auto& msg : this->table_uid_map_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RewriteTableUIDInfoArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.RewriteTableUIDInfoArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const RewriteTableUIDInfoArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RewriteTableUIDInfoArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.RewriteTableUIDInfoArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.RewriteTableUIDInfoArchive)
    MergeFrom(*source);
  }
}

void RewriteTableUIDInfoArchive::MergeFrom(const RewriteTableUIDInfoArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.RewriteTableUIDInfoArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  table_uid_map_.MergeFrom(from.table_uid_map_);
}

void RewriteTableUIDInfoArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.RewriteTableUIDInfoArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RewriteTableUIDInfoArchive::CopyFrom(const RewriteTableUIDInfoArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.RewriteTableUIDInfoArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RewriteTableUIDInfoArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(table_uid_map_)) return false;
  return true;
}

void RewriteTableUIDInfoArchive::InternalSwap(RewriteTableUIDInfoArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  table_uid_map_.InternalSwap(&other->table_uid_map_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RewriteTableUIDInfoArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[110]);
}

// ===================================================================

class GroupByChangeArchive_GroupingColumnChangeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<GroupByChangeArchive_GroupingColumnChangeArchive>()._has_bits_);
  static void set_has_old_level(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_new_level(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

GroupByChangeArchive_GroupingColumnChangeArchive::GroupByChangeArchive_GroupingColumnChangeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.GroupByChangeArchive.GroupingColumnChangeArchive)
}
GroupByChangeArchive_GroupingColumnChangeArchive::GroupByChangeArchive_GroupingColumnChangeArchive(const GroupByChangeArchive_GroupingColumnChangeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&old_level_, &from.old_level_,
    static_cast<size_t>(reinterpret_cast<char*>(&new_level_) -
    reinterpret_cast<char*>(&old_level_)) + sizeof(new_level_));
  // @@protoc_insertion_point(copy_constructor:TSCE.GroupByChangeArchive.GroupingColumnChangeArchive)
}

void GroupByChangeArchive_GroupingColumnChangeArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&old_level_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&new_level_) -
    reinterpret_cast<char*>(&old_level_)) + sizeof(new_level_));
}

GroupByChangeArchive_GroupingColumnChangeArchive::~GroupByChangeArchive_GroupingColumnChangeArchive() {
  // @@protoc_insertion_point(destructor:TSCE.GroupByChangeArchive.GroupingColumnChangeArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GroupByChangeArchive_GroupingColumnChangeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GroupByChangeArchive_GroupingColumnChangeArchive::ArenaDtor(void* object) {
  GroupByChangeArchive_GroupingColumnChangeArchive* _this = reinterpret_cast< GroupByChangeArchive_GroupingColumnChangeArchive* >(object);
  (void)_this;
}
void GroupByChangeArchive_GroupingColumnChangeArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GroupByChangeArchive_GroupingColumnChangeArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GroupByChangeArchive_GroupingColumnChangeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.GroupByChangeArchive.GroupingColumnChangeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&old_level_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&new_level_) -
        reinterpret_cast<char*>(&old_level_)) + sizeof(new_level_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GroupByChangeArchive_GroupingColumnChangeArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 old_level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_old_level(&has_bits);
          old_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 new_level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_new_level(&has_bits);
          new_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GroupByChangeArchive_GroupingColumnChangeArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.GroupByChangeArchive.GroupingColumnChangeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 old_level = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_old_level(), target);
  }

  // required uint32 new_level = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_new_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.GroupByChangeArchive.GroupingColumnChangeArchive)
  return target;
}

size_t GroupByChangeArchive_GroupingColumnChangeArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.GroupByChangeArchive.GroupingColumnChangeArchive)
  size_t total_size = 0;

  if (_internal_has_old_level()) {
    // required uint32 old_level = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_old_level());
  }

  if (_internal_has_new_level()) {
    // required uint32 new_level = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_new_level());
  }

  return total_size;
}
size_t GroupByChangeArchive_GroupingColumnChangeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.GroupByChangeArchive.GroupingColumnChangeArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 old_level = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_old_level());

    // required uint32 new_level = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_new_level());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GroupByChangeArchive_GroupingColumnChangeArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.GroupByChangeArchive.GroupingColumnChangeArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const GroupByChangeArchive_GroupingColumnChangeArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GroupByChangeArchive_GroupingColumnChangeArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.GroupByChangeArchive.GroupingColumnChangeArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.GroupByChangeArchive.GroupingColumnChangeArchive)
    MergeFrom(*source);
  }
}

void GroupByChangeArchive_GroupingColumnChangeArchive::MergeFrom(const GroupByChangeArchive_GroupingColumnChangeArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.GroupByChangeArchive.GroupingColumnChangeArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      old_level_ = from.old_level_;
    }
    if (cached_has_bits & 0x00000002u) {
      new_level_ = from.new_level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GroupByChangeArchive_GroupingColumnChangeArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.GroupByChangeArchive.GroupingColumnChangeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupByChangeArchive_GroupingColumnChangeArchive::CopyFrom(const GroupByChangeArchive_GroupingColumnChangeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.GroupByChangeArchive.GroupingColumnChangeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupByChangeArchive_GroupingColumnChangeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void GroupByChangeArchive_GroupingColumnChangeArchive::InternalSwap(GroupByChangeArchive_GroupingColumnChangeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GroupByChangeArchive_GroupingColumnChangeArchive, new_level_)
      + sizeof(GroupByChangeArchive_GroupingColumnChangeArchive::new_level_)
      - PROTOBUF_FIELD_OFFSET(GroupByChangeArchive_GroupingColumnChangeArchive, old_level_)>(
          reinterpret_cast<char*>(&old_level_),
          reinterpret_cast<char*>(&other->old_level_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GroupByChangeArchive_GroupingColumnChangeArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[111]);
}

// ===================================================================

class GroupByChangeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<GroupByChangeArchive>()._has_bits_);
  static void set_has_change_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::UUID& group_by_uid(const GroupByChangeArchive* msg);
  static void set_has_group_by_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_previous_level(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_updated_level(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSP::UUIDMapArchive& previous_to_updated_map(const GroupByChangeArchive* msg);
  static void set_has_previous_to_updated_map(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::UUIDMapArchive& updated_to_previous_map(const GroupByChangeArchive* msg);
  static void set_has_updated_to_previous_map(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000009) ^ 0x00000009) != 0;
  }
};

const ::TSP::UUID&
GroupByChangeArchive::_Internal::group_by_uid(const GroupByChangeArchive* msg) {
  return *msg->group_by_uid_;
}
const ::TSP::UUIDMapArchive&
GroupByChangeArchive::_Internal::previous_to_updated_map(const GroupByChangeArchive* msg) {
  return *msg->previous_to_updated_map_;
}
const ::TSP::UUIDMapArchive&
GroupByChangeArchive::_Internal::updated_to_previous_map(const GroupByChangeArchive* msg) {
  return *msg->updated_to_previous_map_;
}
void GroupByChangeArchive::clear_group_by_uid() {
  if (group_by_uid_ != nullptr) group_by_uid_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void GroupByChangeArchive::clear_previous_to_updated_map() {
  if (previous_to_updated_map_ != nullptr) previous_to_updated_map_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void GroupByChangeArchive::clear_updated_to_previous_map() {
  if (updated_to_previous_map_ != nullptr) updated_to_previous_map_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void GroupByChangeArchive::clear_removed_group_uids() {
  removed_group_uids_.Clear();
}
GroupByChangeArchive::GroupByChangeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  removed_group_uids_(arena),
  grouping_column_changes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.GroupByChangeArchive)
}
GroupByChangeArchive::GroupByChangeArchive(const GroupByChangeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      removed_group_uids_(from.removed_group_uids_),
      grouping_column_changes_(from.grouping_column_changes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_group_by_uid()) {
    group_by_uid_ = new ::TSP::UUID(*from.group_by_uid_);
  } else {
    group_by_uid_ = nullptr;
  }
  if (from._internal_has_previous_to_updated_map()) {
    previous_to_updated_map_ = new ::TSP::UUIDMapArchive(*from.previous_to_updated_map_);
  } else {
    previous_to_updated_map_ = nullptr;
  }
  if (from._internal_has_updated_to_previous_map()) {
    updated_to_previous_map_ = new ::TSP::UUIDMapArchive(*from.updated_to_previous_map_);
  } else {
    updated_to_previous_map_ = nullptr;
  }
  ::memcpy(&change_type_, &from.change_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&updated_level_) -
    reinterpret_cast<char*>(&change_type_)) + sizeof(updated_level_));
  // @@protoc_insertion_point(copy_constructor:TSCE.GroupByChangeArchive)
}

void GroupByChangeArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&group_by_uid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&updated_level_) -
    reinterpret_cast<char*>(&group_by_uid_)) + sizeof(updated_level_));
}

GroupByChangeArchive::~GroupByChangeArchive() {
  // @@protoc_insertion_point(destructor:TSCE.GroupByChangeArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GroupByChangeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete group_by_uid_;
  if (this != internal_default_instance()) delete previous_to_updated_map_;
  if (this != internal_default_instance()) delete updated_to_previous_map_;
}

void GroupByChangeArchive::ArenaDtor(void* object) {
  GroupByChangeArchive* _this = reinterpret_cast< GroupByChangeArchive* >(object);
  (void)_this;
}
void GroupByChangeArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GroupByChangeArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GroupByChangeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.GroupByChangeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  removed_group_uids_.Clear();
  grouping_column_changes_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(group_by_uid_ != nullptr);
      group_by_uid_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(previous_to_updated_map_ != nullptr);
      previous_to_updated_map_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(updated_to_previous_map_ != nullptr);
      updated_to_previous_map_->Clear();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&change_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&updated_level_) -
        reinterpret_cast<char*>(&change_type_)) + sizeof(updated_level_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GroupByChangeArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCE.GroupByChangeArchive.ChangeType change_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSCE::GroupByChangeArchive_ChangeType_IsValid(val))) {
            _internal_set_change_type(static_cast<::TSCE::GroupByChangeArchive_ChangeType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required .TSP.UUID group_by_uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_group_by_uid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 previous_level = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_previous_level(&has_bits);
          previous_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 updated_level = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_updated_level(&has_bits);
          updated_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.UUIDMapArchive previous_to_updated_map = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_previous_to_updated_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.UUIDMapArchive updated_to_previous_map = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_updated_to_previous_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.UUID removed_group_uids = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_removed_group_uids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSCE.GroupByChangeArchive.GroupingColumnChangeArchive grouping_column_changes = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_grouping_column_changes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GroupByChangeArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.GroupByChangeArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSCE.GroupByChangeArchive.ChangeType change_type = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_change_type(), target);
  }

  // required .TSP.UUID group_by_uid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::group_by_uid(this), target, stream);
  }

  // optional uint32 previous_level = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_previous_level(), target);
  }

  // optional uint32 updated_level = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_updated_level(), target);
  }

  // optional .TSP.UUIDMapArchive previous_to_updated_map = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::previous_to_updated_map(this), target, stream);
  }

  // optional .TSP.UUIDMapArchive updated_to_previous_map = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::updated_to_previous_map(this), target, stream);
  }

  // repeated .TSP.UUID removed_group_uids = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_removed_group_uids_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_removed_group_uids(i), target, stream);
  }

  // repeated .TSCE.GroupByChangeArchive.GroupingColumnChangeArchive grouping_column_changes = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_grouping_column_changes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_grouping_column_changes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.GroupByChangeArchive)
  return target;
}

size_t GroupByChangeArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.GroupByChangeArchive)
  size_t total_size = 0;

  if (_internal_has_group_by_uid()) {
    // required .TSP.UUID group_by_uid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *group_by_uid_);
  }

  if (_internal_has_change_type()) {
    // required .TSCE.GroupByChangeArchive.ChangeType change_type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_change_type());
  }

  return total_size;
}
size_t GroupByChangeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.GroupByChangeArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000009) ^ 0x00000009) == 0) {  // All required fields are present.
    // required .TSP.UUID group_by_uid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *group_by_uid_);

    // required .TSCE.GroupByChangeArchive.ChangeType change_type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_change_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.UUID removed_group_uids = 7;
  total_size += 1UL * this->_internal_removed_group_uids_size();
  for (const auto& msg : this->removed_group_uids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSCE.GroupByChangeArchive.GroupingColumnChangeArchive grouping_column_changes = 8;
  total_size += 1UL * this->_internal_grouping_column_changes_size();
  for (const auto& msg : this->grouping_column_changes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .TSP.UUIDMapArchive previous_to_updated_map = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *previous_to_updated_map_);
    }

    // optional .TSP.UUIDMapArchive updated_to_previous_map = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *updated_to_previous_map_);
    }

  }
  if (cached_has_bits & 0x00000030u) {
    // optional uint32 previous_level = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_previous_level());
    }

    // optional uint32 updated_level = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_updated_level());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GroupByChangeArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.GroupByChangeArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const GroupByChangeArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GroupByChangeArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.GroupByChangeArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.GroupByChangeArchive)
    MergeFrom(*source);
  }
}

void GroupByChangeArchive::MergeFrom(const GroupByChangeArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.GroupByChangeArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  removed_group_uids_.MergeFrom(from.removed_group_uids_);
  grouping_column_changes_.MergeFrom(from.grouping_column_changes_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_group_by_uid()->::TSP::UUID::MergeFrom(from._internal_group_by_uid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_previous_to_updated_map()->::TSP::UUIDMapArchive::MergeFrom(from._internal_previous_to_updated_map());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_updated_to_previous_map()->::TSP::UUIDMapArchive::MergeFrom(from._internal_updated_to_previous_map());
    }
    if (cached_has_bits & 0x00000008u) {
      change_type_ = from.change_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      previous_level_ = from.previous_level_;
    }
    if (cached_has_bits & 0x00000020u) {
      updated_level_ = from.updated_level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GroupByChangeArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.GroupByChangeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupByChangeArchive::CopyFrom(const GroupByChangeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.GroupByChangeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupByChangeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(removed_group_uids_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(grouping_column_changes_)) return false;
  if (_internal_has_group_by_uid()) {
    if (!group_by_uid_->IsInitialized()) return false;
  }
  if (_internal_has_previous_to_updated_map()) {
    if (!previous_to_updated_map_->IsInitialized()) return false;
  }
  if (_internal_has_updated_to_previous_map()) {
    if (!updated_to_previous_map_->IsInitialized()) return false;
  }
  return true;
}

void GroupByChangeArchive::InternalSwap(GroupByChangeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  removed_group_uids_.InternalSwap(&other->removed_group_uids_);
  grouping_column_changes_.InternalSwap(&other->grouping_column_changes_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GroupByChangeArchive, updated_level_)
      + sizeof(GroupByChangeArchive::updated_level_)
      - PROTOBUF_FIELD_OFFSET(GroupByChangeArchive, group_by_uid_)>(
          reinterpret_cast<char*>(&group_by_uid_),
          reinterpret_cast<char*>(&other->group_by_uid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GroupByChangeArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[112]);
}

// ===================================================================

class RewriteGroupNodeUIDInfoArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<RewriteGroupNodeUIDInfoArchive>()._has_bits_);
  static const ::TSP::UUID& group_by_uid(const RewriteGroupNodeUIDInfoArchive* msg);
  static void set_has_group_by_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUIDMapArchive& group_node_uid_map(const RewriteGroupNodeUIDInfoArchive* msg);
  static void set_has_group_node_uid_map(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::TSP::UUID&
RewriteGroupNodeUIDInfoArchive::_Internal::group_by_uid(const RewriteGroupNodeUIDInfoArchive* msg) {
  return *msg->group_by_uid_;
}
const ::TSP::UUIDMapArchive&
RewriteGroupNodeUIDInfoArchive::_Internal::group_node_uid_map(const RewriteGroupNodeUIDInfoArchive* msg) {
  return *msg->group_node_uid_map_;
}
void RewriteGroupNodeUIDInfoArchive::clear_group_by_uid() {
  if (group_by_uid_ != nullptr) group_by_uid_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void RewriteGroupNodeUIDInfoArchive::clear_group_node_uid_map() {
  if (group_node_uid_map_ != nullptr) group_node_uid_map_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
RewriteGroupNodeUIDInfoArchive::RewriteGroupNodeUIDInfoArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.RewriteGroupNodeUIDInfoArchive)
}
RewriteGroupNodeUIDInfoArchive::RewriteGroupNodeUIDInfoArchive(const RewriteGroupNodeUIDInfoArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_group_by_uid()) {
    group_by_uid_ = new ::TSP::UUID(*from.group_by_uid_);
  } else {
    group_by_uid_ = nullptr;
  }
  if (from._internal_has_group_node_uid_map()) {
    group_node_uid_map_ = new ::TSP::UUIDMapArchive(*from.group_node_uid_map_);
  } else {
    group_node_uid_map_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSCE.RewriteGroupNodeUIDInfoArchive)
}

void RewriteGroupNodeUIDInfoArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&group_by_uid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&group_node_uid_map_) -
    reinterpret_cast<char*>(&group_by_uid_)) + sizeof(group_node_uid_map_));
}

RewriteGroupNodeUIDInfoArchive::~RewriteGroupNodeUIDInfoArchive() {
  // @@protoc_insertion_point(destructor:TSCE.RewriteGroupNodeUIDInfoArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RewriteGroupNodeUIDInfoArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete group_by_uid_;
  if (this != internal_default_instance()) delete group_node_uid_map_;
}

void RewriteGroupNodeUIDInfoArchive::ArenaDtor(void* object) {
  RewriteGroupNodeUIDInfoArchive* _this = reinterpret_cast< RewriteGroupNodeUIDInfoArchive* >(object);
  (void)_this;
}
void RewriteGroupNodeUIDInfoArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RewriteGroupNodeUIDInfoArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RewriteGroupNodeUIDInfoArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.RewriteGroupNodeUIDInfoArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(group_by_uid_ != nullptr);
      group_by_uid_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(group_node_uid_map_ != nullptr);
      group_node_uid_map_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RewriteGroupNodeUIDInfoArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.UUID group_by_uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_group_by_uid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.UUIDMapArchive group_node_uid_map = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_group_node_uid_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RewriteGroupNodeUIDInfoArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.RewriteGroupNodeUIDInfoArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSP.UUID group_by_uid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::group_by_uid(this), target, stream);
  }

  // required .TSP.UUIDMapArchive group_node_uid_map = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::group_node_uid_map(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.RewriteGroupNodeUIDInfoArchive)
  return target;
}

size_t RewriteGroupNodeUIDInfoArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.RewriteGroupNodeUIDInfoArchive)
  size_t total_size = 0;

  // required .TSP.UUIDMapArchive group_node_uid_map = 2;
  if (_internal_has_group_node_uid_map()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *group_node_uid_map_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.UUID group_by_uid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *group_by_uid_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RewriteGroupNodeUIDInfoArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.RewriteGroupNodeUIDInfoArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const RewriteGroupNodeUIDInfoArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RewriteGroupNodeUIDInfoArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.RewriteGroupNodeUIDInfoArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.RewriteGroupNodeUIDInfoArchive)
    MergeFrom(*source);
  }
}

void RewriteGroupNodeUIDInfoArchive::MergeFrom(const RewriteGroupNodeUIDInfoArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.RewriteGroupNodeUIDInfoArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_group_by_uid()->::TSP::UUID::MergeFrom(from._internal_group_by_uid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_group_node_uid_map()->::TSP::UUIDMapArchive::MergeFrom(from._internal_group_node_uid_map());
    }
  }
}

void RewriteGroupNodeUIDInfoArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.RewriteGroupNodeUIDInfoArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RewriteGroupNodeUIDInfoArchive::CopyFrom(const RewriteGroupNodeUIDInfoArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.RewriteGroupNodeUIDInfoArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RewriteGroupNodeUIDInfoArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_group_by_uid()) {
    if (!group_by_uid_->IsInitialized()) return false;
  }
  if (_internal_has_group_node_uid_map()) {
    if (!group_node_uid_map_->IsInitialized()) return false;
  }
  return true;
}

void RewriteGroupNodeUIDInfoArchive::InternalSwap(RewriteGroupNodeUIDInfoArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RewriteGroupNodeUIDInfoArchive, group_node_uid_map_)
      + sizeof(RewriteGroupNodeUIDInfoArchive::group_node_uid_map_)
      - PROTOBUF_FIELD_OFFSET(RewriteGroupNodeUIDInfoArchive, group_by_uid_)>(
          reinterpret_cast<char*>(&group_by_uid_),
          reinterpret_cast<char*>(&other->group_by_uid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RewriteGroupNodeUIDInfoArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[113]);
}

// ===================================================================

class IndexedUidsArchive_IndexedUid::_Internal {
 public:
  using HasBits = decltype(std::declval<IndexedUidsArchive_IndexedUid>()._has_bits_);
  static const ::TSP::UUID& uid_for_index(const IndexedUidsArchive_IndexedUid* msg);
  static void set_has_uid_for_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_index_for_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSP::UUID&
IndexedUidsArchive_IndexedUid::_Internal::uid_for_index(const IndexedUidsArchive_IndexedUid* msg) {
  return *msg->uid_for_index_;
}
void IndexedUidsArchive_IndexedUid::clear_uid_for_index() {
  if (uid_for_index_ != nullptr) uid_for_index_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
IndexedUidsArchive_IndexedUid::IndexedUidsArchive_IndexedUid(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.IndexedUidsArchive.IndexedUid)
}
IndexedUidsArchive_IndexedUid::IndexedUidsArchive_IndexedUid(const IndexedUidsArchive_IndexedUid& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_uid_for_index()) {
    uid_for_index_ = new ::TSP::UUID(*from.uid_for_index_);
  } else {
    uid_for_index_ = nullptr;
  }
  index_for_uid_ = from.index_for_uid_;
  // @@protoc_insertion_point(copy_constructor:TSCE.IndexedUidsArchive.IndexedUid)
}

void IndexedUidsArchive_IndexedUid::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&uid_for_index_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&index_for_uid_) -
    reinterpret_cast<char*>(&uid_for_index_)) + sizeof(index_for_uid_));
}

IndexedUidsArchive_IndexedUid::~IndexedUidsArchive_IndexedUid() {
  // @@protoc_insertion_point(destructor:TSCE.IndexedUidsArchive.IndexedUid)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IndexedUidsArchive_IndexedUid::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete uid_for_index_;
}

void IndexedUidsArchive_IndexedUid::ArenaDtor(void* object) {
  IndexedUidsArchive_IndexedUid* _this = reinterpret_cast< IndexedUidsArchive_IndexedUid* >(object);
  (void)_this;
}
void IndexedUidsArchive_IndexedUid::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IndexedUidsArchive_IndexedUid::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IndexedUidsArchive_IndexedUid::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.IndexedUidsArchive.IndexedUid)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(uid_for_index_ != nullptr);
    uid_for_index_->Clear();
  }
  index_for_uid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IndexedUidsArchive_IndexedUid::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.UUID uid_for_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_uid_for_index(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 index_for_uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_index_for_uid(&has_bits);
          index_for_uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IndexedUidsArchive_IndexedUid::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.IndexedUidsArchive.IndexedUid)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSP.UUID uid_for_index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::uid_for_index(this), target, stream);
  }

  // required uint32 index_for_uid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_index_for_uid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.IndexedUidsArchive.IndexedUid)
  return target;
}

size_t IndexedUidsArchive_IndexedUid::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.IndexedUidsArchive.IndexedUid)
  size_t total_size = 0;

  if (_internal_has_uid_for_index()) {
    // required .TSP.UUID uid_for_index = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *uid_for_index_);
  }

  if (_internal_has_index_for_uid()) {
    // required uint32 index_for_uid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_index_for_uid());
  }

  return total_size;
}
size_t IndexedUidsArchive_IndexedUid::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.IndexedUidsArchive.IndexedUid)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSP.UUID uid_for_index = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *uid_for_index_);

    // required uint32 index_for_uid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_index_for_uid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IndexedUidsArchive_IndexedUid::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.IndexedUidsArchive.IndexedUid)
  GOOGLE_DCHECK_NE(&from, this);
  const IndexedUidsArchive_IndexedUid* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IndexedUidsArchive_IndexedUid>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.IndexedUidsArchive.IndexedUid)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.IndexedUidsArchive.IndexedUid)
    MergeFrom(*source);
  }
}

void IndexedUidsArchive_IndexedUid::MergeFrom(const IndexedUidsArchive_IndexedUid& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.IndexedUidsArchive.IndexedUid)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_uid_for_index()->::TSP::UUID::MergeFrom(from._internal_uid_for_index());
    }
    if (cached_has_bits & 0x00000002u) {
      index_for_uid_ = from.index_for_uid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void IndexedUidsArchive_IndexedUid::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.IndexedUidsArchive.IndexedUid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndexedUidsArchive_IndexedUid::CopyFrom(const IndexedUidsArchive_IndexedUid& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.IndexedUidsArchive.IndexedUid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndexedUidsArchive_IndexedUid::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_uid_for_index()) {
    if (!uid_for_index_->IsInitialized()) return false;
  }
  return true;
}

void IndexedUidsArchive_IndexedUid::InternalSwap(IndexedUidsArchive_IndexedUid* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IndexedUidsArchive_IndexedUid, index_for_uid_)
      + sizeof(IndexedUidsArchive_IndexedUid::index_for_uid_)
      - PROTOBUF_FIELD_OFFSET(IndexedUidsArchive_IndexedUid, uid_for_index_)>(
          reinterpret_cast<char*>(&uid_for_index_),
          reinterpret_cast<char*>(&other->uid_for_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IndexedUidsArchive_IndexedUid::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[114]);
}

// ===================================================================

class IndexedUidsArchive::_Internal {
 public:
};

IndexedUidsArchive::IndexedUidsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  uids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.IndexedUidsArchive)
}
IndexedUidsArchive::IndexedUidsArchive(const IndexedUidsArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      uids_(from.uids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSCE.IndexedUidsArchive)
}

void IndexedUidsArchive::SharedCtor() {
}

IndexedUidsArchive::~IndexedUidsArchive() {
  // @@protoc_insertion_point(destructor:TSCE.IndexedUidsArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IndexedUidsArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void IndexedUidsArchive::ArenaDtor(void* object) {
  IndexedUidsArchive* _this = reinterpret_cast< IndexedUidsArchive* >(object);
  (void)_this;
}
void IndexedUidsArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IndexedUidsArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IndexedUidsArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.IndexedUidsArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IndexedUidsArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSCE.IndexedUidsArchive.IndexedUid uids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_uids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IndexedUidsArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.IndexedUidsArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSCE.IndexedUidsArchive.IndexedUid uids = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_uids_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_uids(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.IndexedUidsArchive)
  return target;
}

size_t IndexedUidsArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.IndexedUidsArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.IndexedUidsArchive.IndexedUid uids = 1;
  total_size += 1UL * this->_internal_uids_size();
  for (const auto& msg : this->uids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IndexedUidsArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.IndexedUidsArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const IndexedUidsArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IndexedUidsArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.IndexedUidsArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.IndexedUidsArchive)
    MergeFrom(*source);
  }
}

void IndexedUidsArchive::MergeFrom(const IndexedUidsArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.IndexedUidsArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  uids_.MergeFrom(from.uids_);
}

void IndexedUidsArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.IndexedUidsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndexedUidsArchive::CopyFrom(const IndexedUidsArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.IndexedUidsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndexedUidsArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(uids_)) return false;
  return true;
}

void IndexedUidsArchive::InternalSwap(IndexedUidsArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  uids_.InternalSwap(&other->uids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IndexedUidsArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[115]);
}

// ===================================================================

class RewriteRangeEntryArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<RewriteRangeEntryArchive>()._has_bits_);
  static void set_has_range_location(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_range_length(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

void RewriteRangeEntryArchive::clear_range_uids() {
  range_uids_.Clear();
}
RewriteRangeEntryArchive::RewriteRangeEntryArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  range_uids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.RewriteRangeEntryArchive)
}
RewriteRangeEntryArchive::RewriteRangeEntryArchive(const RewriteRangeEntryArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      range_uids_(from.range_uids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&range_location_, &from.range_location_,
    static_cast<size_t>(reinterpret_cast<char*>(&offset_) -
    reinterpret_cast<char*>(&range_location_)) + sizeof(offset_));
  // @@protoc_insertion_point(copy_constructor:TSCE.RewriteRangeEntryArchive)
}

void RewriteRangeEntryArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&range_location_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&offset_) -
    reinterpret_cast<char*>(&range_location_)) + sizeof(offset_));
}

RewriteRangeEntryArchive::~RewriteRangeEntryArchive() {
  // @@protoc_insertion_point(destructor:TSCE.RewriteRangeEntryArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RewriteRangeEntryArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RewriteRangeEntryArchive::ArenaDtor(void* object) {
  RewriteRangeEntryArchive* _this = reinterpret_cast< RewriteRangeEntryArchive* >(object);
  (void)_this;
}
void RewriteRangeEntryArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RewriteRangeEntryArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RewriteRangeEntryArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.RewriteRangeEntryArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  range_uids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&range_location_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&offset_) -
        reinterpret_cast<char*>(&range_location_)) + sizeof(offset_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RewriteRangeEntryArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 range_location = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_range_location(&has_bits);
          range_location_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 range_length = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_range_length(&has_bits);
          range_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.UUID range_uids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_range_uids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // required uint32 offset = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_offset(&has_bits);
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RewriteRangeEntryArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.RewriteRangeEntryArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 range_location = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_range_location(), target);
  }

  // required uint32 range_length = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_range_length(), target);
  }

  // repeated .TSP.UUID range_uids = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_range_uids_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_range_uids(i), target, stream);
  }

  // required uint32 offset = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.RewriteRangeEntryArchive)
  return target;
}

size_t RewriteRangeEntryArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.RewriteRangeEntryArchive)
  size_t total_size = 0;

  if (_internal_has_range_location()) {
    // required uint32 range_location = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_range_location());
  }

  if (_internal_has_range_length()) {
    // required uint32 range_length = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_range_length());
  }

  if (_internal_has_offset()) {
    // required uint32 offset = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_offset());
  }

  return total_size;
}
size_t RewriteRangeEntryArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.RewriteRangeEntryArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 range_location = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_range_location());

    // required uint32 range_length = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_range_length());

    // required uint32 offset = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_offset());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.UUID range_uids = 3;
  total_size += 1UL * this->_internal_range_uids_size();
  for (const auto& msg : this->range_uids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RewriteRangeEntryArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.RewriteRangeEntryArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const RewriteRangeEntryArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RewriteRangeEntryArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.RewriteRangeEntryArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.RewriteRangeEntryArchive)
    MergeFrom(*source);
  }
}

void RewriteRangeEntryArchive::MergeFrom(const RewriteRangeEntryArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.RewriteRangeEntryArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  range_uids_.MergeFrom(from.range_uids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      range_location_ = from.range_location_;
    }
    if (cached_has_bits & 0x00000002u) {
      range_length_ = from.range_length_;
    }
    if (cached_has_bits & 0x00000004u) {
      offset_ = from.offset_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RewriteRangeEntryArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.RewriteRangeEntryArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RewriteRangeEntryArchive::CopyFrom(const RewriteRangeEntryArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.RewriteRangeEntryArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RewriteRangeEntryArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(range_uids_)) return false;
  return true;
}

void RewriteRangeEntryArchive::InternalSwap(RewriteRangeEntryArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  range_uids_.InternalSwap(&other->range_uids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RewriteRangeEntryArchive, offset_)
      + sizeof(RewriteRangeEntryArchive::offset_)
      - PROTOBUF_FIELD_OFFSET(RewriteRangeEntryArchive, range_location_)>(
          reinterpret_cast<char*>(&range_location_),
          reinterpret_cast<char*>(&other->range_location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RewriteRangeEntryArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[116]);
}

// ===================================================================

class ColumnOrRowUuidsInfoArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ColumnOrRowUuidsInfoArchive>()._has_bits_);
  static void set_has_is_rows(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::TSP::UUID& table_uid(const ColumnOrRowUuidsInfoArchive* msg);
  static void set_has_table_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUID& cond_style_owner_uid(const ColumnOrRowUuidsInfoArchive* msg);
  static void set_has_cond_style_owner_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::UUID& group_by_uid(const ColumnOrRowUuidsInfoArchive* msg);
  static void set_has_group_by_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSCE::IndexedUidsArchive& uids(const ColumnOrRowUuidsInfoArchive* msg);
  static void set_has_uids(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSCE::RangeCoordinateArchive& table_range(const ColumnOrRowUuidsInfoArchive* msg);
  static void set_has_table_range(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSP::UUID& insert_at_uid(const ColumnOrRowUuidsInfoArchive* msg);
  static void set_has_insert_at_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSP::UUID& insert_opposite_uid(const ColumnOrRowUuidsInfoArchive* msg);
  static void set_has_insert_opposite_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000009f) ^ 0x0000009f) != 0;
  }
};

const ::TSP::UUID&
ColumnOrRowUuidsInfoArchive::_Internal::table_uid(const ColumnOrRowUuidsInfoArchive* msg) {
  return *msg->table_uid_;
}
const ::TSP::UUID&
ColumnOrRowUuidsInfoArchive::_Internal::cond_style_owner_uid(const ColumnOrRowUuidsInfoArchive* msg) {
  return *msg->cond_style_owner_uid_;
}
const ::TSP::UUID&
ColumnOrRowUuidsInfoArchive::_Internal::group_by_uid(const ColumnOrRowUuidsInfoArchive* msg) {
  return *msg->group_by_uid_;
}
const ::TSCE::IndexedUidsArchive&
ColumnOrRowUuidsInfoArchive::_Internal::uids(const ColumnOrRowUuidsInfoArchive* msg) {
  return *msg->uids_;
}
const ::TSCE::RangeCoordinateArchive&
ColumnOrRowUuidsInfoArchive::_Internal::table_range(const ColumnOrRowUuidsInfoArchive* msg) {
  return *msg->table_range_;
}
const ::TSP::UUID&
ColumnOrRowUuidsInfoArchive::_Internal::insert_at_uid(const ColumnOrRowUuidsInfoArchive* msg) {
  return *msg->insert_at_uid_;
}
const ::TSP::UUID&
ColumnOrRowUuidsInfoArchive::_Internal::insert_opposite_uid(const ColumnOrRowUuidsInfoArchive* msg) {
  return *msg->insert_opposite_uid_;
}
void ColumnOrRowUuidsInfoArchive::clear_table_uid() {
  if (table_uid_ != nullptr) table_uid_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void ColumnOrRowUuidsInfoArchive::clear_cond_style_owner_uid() {
  if (cond_style_owner_uid_ != nullptr) cond_style_owner_uid_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void ColumnOrRowUuidsInfoArchive::clear_group_by_uid() {
  if (group_by_uid_ != nullptr) group_by_uid_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void ColumnOrRowUuidsInfoArchive::clear_insert_at_uid() {
  if (insert_at_uid_ != nullptr) insert_at_uid_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void ColumnOrRowUuidsInfoArchive::clear_insert_opposite_uid() {
  if (insert_opposite_uid_ != nullptr) insert_opposite_uid_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
ColumnOrRowUuidsInfoArchive::ColumnOrRowUuidsInfoArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  range_entries_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.ColumnOrRowUuidsInfoArchive)
}
ColumnOrRowUuidsInfoArchive::ColumnOrRowUuidsInfoArchive(const ColumnOrRowUuidsInfoArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      range_entries_(from.range_entries_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_table_uid()) {
    table_uid_ = new ::TSP::UUID(*from.table_uid_);
  } else {
    table_uid_ = nullptr;
  }
  if (from._internal_has_cond_style_owner_uid()) {
    cond_style_owner_uid_ = new ::TSP::UUID(*from.cond_style_owner_uid_);
  } else {
    cond_style_owner_uid_ = nullptr;
  }
  if (from._internal_has_group_by_uid()) {
    group_by_uid_ = new ::TSP::UUID(*from.group_by_uid_);
  } else {
    group_by_uid_ = nullptr;
  }
  if (from._internal_has_uids()) {
    uids_ = new ::TSCE::IndexedUidsArchive(*from.uids_);
  } else {
    uids_ = nullptr;
  }
  if (from._internal_has_table_range()) {
    table_range_ = new ::TSCE::RangeCoordinateArchive(*from.table_range_);
  } else {
    table_range_ = nullptr;
  }
  if (from._internal_has_insert_at_uid()) {
    insert_at_uid_ = new ::TSP::UUID(*from.insert_at_uid_);
  } else {
    insert_at_uid_ = nullptr;
  }
  if (from._internal_has_insert_opposite_uid()) {
    insert_opposite_uid_ = new ::TSP::UUID(*from.insert_opposite_uid_);
  } else {
    insert_opposite_uid_ = nullptr;
  }
  is_rows_ = from.is_rows_;
  // @@protoc_insertion_point(copy_constructor:TSCE.ColumnOrRowUuidsInfoArchive)
}

void ColumnOrRowUuidsInfoArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&table_uid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_rows_) -
    reinterpret_cast<char*>(&table_uid_)) + sizeof(is_rows_));
}

ColumnOrRowUuidsInfoArchive::~ColumnOrRowUuidsInfoArchive() {
  // @@protoc_insertion_point(destructor:TSCE.ColumnOrRowUuidsInfoArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ColumnOrRowUuidsInfoArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete table_uid_;
  if (this != internal_default_instance()) delete cond_style_owner_uid_;
  if (this != internal_default_instance()) delete group_by_uid_;
  if (this != internal_default_instance()) delete uids_;
  if (this != internal_default_instance()) delete table_range_;
  if (this != internal_default_instance()) delete insert_at_uid_;
  if (this != internal_default_instance()) delete insert_opposite_uid_;
}

void ColumnOrRowUuidsInfoArchive::ArenaDtor(void* object) {
  ColumnOrRowUuidsInfoArchive* _this = reinterpret_cast< ColumnOrRowUuidsInfoArchive* >(object);
  (void)_this;
}
void ColumnOrRowUuidsInfoArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ColumnOrRowUuidsInfoArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ColumnOrRowUuidsInfoArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.ColumnOrRowUuidsInfoArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  range_entries_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(table_uid_ != nullptr);
      table_uid_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(cond_style_owner_uid_ != nullptr);
      cond_style_owner_uid_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(group_by_uid_ != nullptr);
      group_by_uid_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(uids_ != nullptr);
      uids_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(table_range_ != nullptr);
      table_range_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(insert_at_uid_ != nullptr);
      insert_at_uid_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(insert_opposite_uid_ != nullptr);
      insert_opposite_uid_->Clear();
    }
  }
  is_rows_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ColumnOrRowUuidsInfoArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bool is_rows = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_is_rows(&has_bits);
          is_rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.UUID table_uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_uid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.UUID cond_style_owner_uid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_cond_style_owner_uid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.UUID group_by_uid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_group_by_uid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSCE.IndexedUidsArchive uids = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_uids(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSCE.RewriteRangeEntryArchive range_entries = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_range_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // required .TSCE.RangeCoordinateArchive table_range = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_range(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.UUID insert_at_uid = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_insert_at_uid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.UUID insert_opposite_uid = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_insert_opposite_uid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ColumnOrRowUuidsInfoArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.ColumnOrRowUuidsInfoArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool is_rows = 1;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_rows(), target);
  }

  // required .TSP.UUID table_uid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::table_uid(this), target, stream);
  }

  // required .TSP.UUID cond_style_owner_uid = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::cond_style_owner_uid(this), target, stream);
  }

  // required .TSP.UUID group_by_uid = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::group_by_uid(this), target, stream);
  }

  // required .TSCE.IndexedUidsArchive uids = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::uids(this), target, stream);
  }

  // repeated .TSCE.RewriteRangeEntryArchive range_entries = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_range_entries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_range_entries(i), target, stream);
  }

  // required .TSCE.RangeCoordinateArchive table_range = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::table_range(this), target, stream);
  }

  // optional .TSP.UUID insert_at_uid = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::insert_at_uid(this), target, stream);
  }

  // optional .TSP.UUID insert_opposite_uid = 9;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::insert_opposite_uid(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.ColumnOrRowUuidsInfoArchive)
  return target;
}

size_t ColumnOrRowUuidsInfoArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.ColumnOrRowUuidsInfoArchive)
  size_t total_size = 0;

  if (_internal_has_table_uid()) {
    // required .TSP.UUID table_uid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *table_uid_);
  }

  if (_internal_has_cond_style_owner_uid()) {
    // required .TSP.UUID cond_style_owner_uid = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cond_style_owner_uid_);
  }

  if (_internal_has_group_by_uid()) {
    // required .TSP.UUID group_by_uid = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *group_by_uid_);
  }

  if (_internal_has_uids()) {
    // required .TSCE.IndexedUidsArchive uids = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *uids_);
  }

  if (_internal_has_table_range()) {
    // required .TSCE.RangeCoordinateArchive table_range = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *table_range_);
  }

  if (_internal_has_is_rows()) {
    // required bool is_rows = 1;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t ColumnOrRowUuidsInfoArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.ColumnOrRowUuidsInfoArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000009f) ^ 0x0000009f) == 0) {  // All required fields are present.
    // required .TSP.UUID table_uid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *table_uid_);

    // required .TSP.UUID cond_style_owner_uid = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cond_style_owner_uid_);

    // required .TSP.UUID group_by_uid = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *group_by_uid_);

    // required .TSCE.IndexedUidsArchive uids = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *uids_);

    // required .TSCE.RangeCoordinateArchive table_range = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *table_range_);

    // required bool is_rows = 1;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.RewriteRangeEntryArchive range_entries = 6;
  total_size += 1UL * this->_internal_range_entries_size();
  for (const auto& msg : this->range_entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000060u) {
    // optional .TSP.UUID insert_at_uid = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *insert_at_uid_);
    }

    // optional .TSP.UUID insert_opposite_uid = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *insert_opposite_uid_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ColumnOrRowUuidsInfoArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.ColumnOrRowUuidsInfoArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ColumnOrRowUuidsInfoArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ColumnOrRowUuidsInfoArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.ColumnOrRowUuidsInfoArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.ColumnOrRowUuidsInfoArchive)
    MergeFrom(*source);
  }
}

void ColumnOrRowUuidsInfoArchive::MergeFrom(const ColumnOrRowUuidsInfoArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.ColumnOrRowUuidsInfoArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  range_entries_.MergeFrom(from.range_entries_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_table_uid()->::TSP::UUID::MergeFrom(from._internal_table_uid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_cond_style_owner_uid()->::TSP::UUID::MergeFrom(from._internal_cond_style_owner_uid());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_group_by_uid()->::TSP::UUID::MergeFrom(from._internal_group_by_uid());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_uids()->::TSCE::IndexedUidsArchive::MergeFrom(from._internal_uids());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_table_range()->::TSCE::RangeCoordinateArchive::MergeFrom(from._internal_table_range());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_insert_at_uid()->::TSP::UUID::MergeFrom(from._internal_insert_at_uid());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_insert_opposite_uid()->::TSP::UUID::MergeFrom(from._internal_insert_opposite_uid());
    }
    if (cached_has_bits & 0x00000080u) {
      is_rows_ = from.is_rows_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ColumnOrRowUuidsInfoArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.ColumnOrRowUuidsInfoArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ColumnOrRowUuidsInfoArchive::CopyFrom(const ColumnOrRowUuidsInfoArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.ColumnOrRowUuidsInfoArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColumnOrRowUuidsInfoArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(range_entries_)) return false;
  if (_internal_has_table_uid()) {
    if (!table_uid_->IsInitialized()) return false;
  }
  if (_internal_has_cond_style_owner_uid()) {
    if (!cond_style_owner_uid_->IsInitialized()) return false;
  }
  if (_internal_has_group_by_uid()) {
    if (!group_by_uid_->IsInitialized()) return false;
  }
  if (_internal_has_uids()) {
    if (!uids_->IsInitialized()) return false;
  }
  if (_internal_has_table_range()) {
    if (!table_range_->IsInitialized()) return false;
  }
  if (_internal_has_insert_at_uid()) {
    if (!insert_at_uid_->IsInitialized()) return false;
  }
  if (_internal_has_insert_opposite_uid()) {
    if (!insert_opposite_uid_->IsInitialized()) return false;
  }
  return true;
}

void ColumnOrRowUuidsInfoArchive::InternalSwap(ColumnOrRowUuidsInfoArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  range_entries_.InternalSwap(&other->range_entries_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ColumnOrRowUuidsInfoArchive, is_rows_)
      + sizeof(ColumnOrRowUuidsInfoArchive::is_rows_)
      - PROTOBUF_FIELD_OFFSET(ColumnOrRowUuidsInfoArchive, table_uid_)>(
          reinterpret_cast<char*>(&table_uid_),
          reinterpret_cast<char*>(&other->table_uid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ColumnOrRowUuidsInfoArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[117]);
}

// ===================================================================

class RegionInfoArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<RegionInfoArchive>()._has_bits_);
  static const ::TSP::UUID& table_uid(const RegionInfoArchive* msg);
  static void set_has_table_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSCE::IndexedUidsArchive& column_uids(const RegionInfoArchive* msg);
  static void set_has_column_uids(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSCE::IndexedUidsArchive& row_uids(const RegionInfoArchive* msg);
  static void set_has_row_uids(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::TSP::UUID&
RegionInfoArchive::_Internal::table_uid(const RegionInfoArchive* msg) {
  return *msg->table_uid_;
}
const ::TSCE::IndexedUidsArchive&
RegionInfoArchive::_Internal::column_uids(const RegionInfoArchive* msg) {
  return *msg->column_uids_;
}
const ::TSCE::IndexedUidsArchive&
RegionInfoArchive::_Internal::row_uids(const RegionInfoArchive* msg) {
  return *msg->row_uids_;
}
void RegionInfoArchive::clear_table_uid() {
  if (table_uid_ != nullptr) table_uid_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
RegionInfoArchive::RegionInfoArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.RegionInfoArchive)
}
RegionInfoArchive::RegionInfoArchive(const RegionInfoArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_table_uid()) {
    table_uid_ = new ::TSP::UUID(*from.table_uid_);
  } else {
    table_uid_ = nullptr;
  }
  if (from._internal_has_column_uids()) {
    column_uids_ = new ::TSCE::IndexedUidsArchive(*from.column_uids_);
  } else {
    column_uids_ = nullptr;
  }
  if (from._internal_has_row_uids()) {
    row_uids_ = new ::TSCE::IndexedUidsArchive(*from.row_uids_);
  } else {
    row_uids_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSCE.RegionInfoArchive)
}

void RegionInfoArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&table_uid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&row_uids_) -
    reinterpret_cast<char*>(&table_uid_)) + sizeof(row_uids_));
}

RegionInfoArchive::~RegionInfoArchive() {
  // @@protoc_insertion_point(destructor:TSCE.RegionInfoArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RegionInfoArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete table_uid_;
  if (this != internal_default_instance()) delete column_uids_;
  if (this != internal_default_instance()) delete row_uids_;
}

void RegionInfoArchive::ArenaDtor(void* object) {
  RegionInfoArchive* _this = reinterpret_cast< RegionInfoArchive* >(object);
  (void)_this;
}
void RegionInfoArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RegionInfoArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RegionInfoArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.RegionInfoArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(table_uid_ != nullptr);
      table_uid_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(column_uids_ != nullptr);
      column_uids_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(row_uids_ != nullptr);
      row_uids_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegionInfoArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.UUID table_uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_uid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSCE.IndexedUidsArchive column_uids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_column_uids(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSCE.IndexedUidsArchive row_uids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_row_uids(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RegionInfoArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.RegionInfoArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSP.UUID table_uid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::table_uid(this), target, stream);
  }

  // required .TSCE.IndexedUidsArchive column_uids = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::column_uids(this), target, stream);
  }

  // required .TSCE.IndexedUidsArchive row_uids = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::row_uids(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.RegionInfoArchive)
  return target;
}

size_t RegionInfoArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.RegionInfoArchive)
  size_t total_size = 0;

  if (_internal_has_table_uid()) {
    // required .TSP.UUID table_uid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *table_uid_);
  }

  if (_internal_has_column_uids()) {
    // required .TSCE.IndexedUidsArchive column_uids = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *column_uids_);
  }

  if (_internal_has_row_uids()) {
    // required .TSCE.IndexedUidsArchive row_uids = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *row_uids_);
  }

  return total_size;
}
size_t RegionInfoArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.RegionInfoArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .TSP.UUID table_uid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *table_uid_);

    // required .TSCE.IndexedUidsArchive column_uids = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *column_uids_);

    // required .TSCE.IndexedUidsArchive row_uids = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *row_uids_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegionInfoArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.RegionInfoArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const RegionInfoArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RegionInfoArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.RegionInfoArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.RegionInfoArchive)
    MergeFrom(*source);
  }
}

void RegionInfoArchive::MergeFrom(const RegionInfoArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.RegionInfoArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_table_uid()->::TSP::UUID::MergeFrom(from._internal_table_uid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_column_uids()->::TSCE::IndexedUidsArchive::MergeFrom(from._internal_column_uids());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_row_uids()->::TSCE::IndexedUidsArchive::MergeFrom(from._internal_row_uids());
    }
  }
}

void RegionInfoArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.RegionInfoArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegionInfoArchive::CopyFrom(const RegionInfoArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.RegionInfoArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegionInfoArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_table_uid()) {
    if (!table_uid_->IsInitialized()) return false;
  }
  if (_internal_has_column_uids()) {
    if (!column_uids_->IsInitialized()) return false;
  }
  if (_internal_has_row_uids()) {
    if (!row_uids_->IsInitialized()) return false;
  }
  return true;
}

void RegionInfoArchive::InternalSwap(RegionInfoArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RegionInfoArchive, row_uids_)
      + sizeof(RegionInfoArchive::row_uids_)
      - PROTOBUF_FIELD_OFFSET(RegionInfoArchive, table_uid_)>(
          reinterpret_cast<char*>(&table_uid_),
          reinterpret_cast<char*>(&other->table_uid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RegionInfoArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[118]);
}

// ===================================================================

class RegionMovedInfoArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<RegionMovedInfoArchive>()._has_bits_);
  static const ::TSCE::RegionInfoArchive& src_region(const RegionMovedInfoArchive* msg);
  static void set_has_src_region(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSCE::RegionInfoArchive& dst_region(const RegionMovedInfoArchive* msg);
  static void set_has_dst_region(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_span_rows(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_span_columns(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSCE::RegionInfoArchive& original_src_region(const RegionMovedInfoArchive* msg);
  static void set_has_original_src_region(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::UUID& final_dest_table_uid(const RegionMovedInfoArchive* msg);
  static void set_has_final_dest_table_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSCE::RegionInfoArchive&
RegionMovedInfoArchive::_Internal::src_region(const RegionMovedInfoArchive* msg) {
  return *msg->src_region_;
}
const ::TSCE::RegionInfoArchive&
RegionMovedInfoArchive::_Internal::dst_region(const RegionMovedInfoArchive* msg) {
  return *msg->dst_region_;
}
const ::TSCE::RegionInfoArchive&
RegionMovedInfoArchive::_Internal::original_src_region(const RegionMovedInfoArchive* msg) {
  return *msg->original_src_region_;
}
const ::TSP::UUID&
RegionMovedInfoArchive::_Internal::final_dest_table_uid(const RegionMovedInfoArchive* msg) {
  return *msg->final_dest_table_uid_;
}
void RegionMovedInfoArchive::clear_final_dest_table_uid() {
  if (final_dest_table_uid_ != nullptr) final_dest_table_uid_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
RegionMovedInfoArchive::RegionMovedInfoArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.RegionMovedInfoArchive)
}
RegionMovedInfoArchive::RegionMovedInfoArchive(const RegionMovedInfoArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_src_region()) {
    src_region_ = new ::TSCE::RegionInfoArchive(*from.src_region_);
  } else {
    src_region_ = nullptr;
  }
  if (from._internal_has_dst_region()) {
    dst_region_ = new ::TSCE::RegionInfoArchive(*from.dst_region_);
  } else {
    dst_region_ = nullptr;
  }
  if (from._internal_has_original_src_region()) {
    original_src_region_ = new ::TSCE::RegionInfoArchive(*from.original_src_region_);
  } else {
    original_src_region_ = nullptr;
  }
  if (from._internal_has_final_dest_table_uid()) {
    final_dest_table_uid_ = new ::TSP::UUID(*from.final_dest_table_uid_);
  } else {
    final_dest_table_uid_ = nullptr;
  }
  ::memcpy(&span_rows_, &from.span_rows_,
    static_cast<size_t>(reinterpret_cast<char*>(&span_columns_) -
    reinterpret_cast<char*>(&span_rows_)) + sizeof(span_columns_));
  // @@protoc_insertion_point(copy_constructor:TSCE.RegionMovedInfoArchive)
}

void RegionMovedInfoArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&src_region_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&span_columns_) -
    reinterpret_cast<char*>(&src_region_)) + sizeof(span_columns_));
}

RegionMovedInfoArchive::~RegionMovedInfoArchive() {
  // @@protoc_insertion_point(destructor:TSCE.RegionMovedInfoArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RegionMovedInfoArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete src_region_;
  if (this != internal_default_instance()) delete dst_region_;
  if (this != internal_default_instance()) delete original_src_region_;
  if (this != internal_default_instance()) delete final_dest_table_uid_;
}

void RegionMovedInfoArchive::ArenaDtor(void* object) {
  RegionMovedInfoArchive* _this = reinterpret_cast< RegionMovedInfoArchive* >(object);
  (void)_this;
}
void RegionMovedInfoArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RegionMovedInfoArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RegionMovedInfoArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.RegionMovedInfoArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(src_region_ != nullptr);
      src_region_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(dst_region_ != nullptr);
      dst_region_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(original_src_region_ != nullptr);
      original_src_region_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(final_dest_table_uid_ != nullptr);
      final_dest_table_uid_->Clear();
    }
  }
  ::memset(&span_rows_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&span_columns_) -
      reinterpret_cast<char*>(&span_rows_)) + sizeof(span_columns_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegionMovedInfoArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCE.RegionInfoArchive src_region = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_src_region(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSCE.RegionInfoArchive dst_region = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_dst_region(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool span_rows = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_span_rows(&has_bits);
          span_rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool span_columns = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_span_columns(&has_bits);
          span_columns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCE.RegionInfoArchive original_src_region = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_original_src_region(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.UUID final_dest_table_uid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_final_dest_table_uid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RegionMovedInfoArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.RegionMovedInfoArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSCE.RegionInfoArchive src_region = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::src_region(this), target, stream);
  }

  // required .TSCE.RegionInfoArchive dst_region = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::dst_region(this), target, stream);
  }

  // optional bool span_rows = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_span_rows(), target);
  }

  // optional bool span_columns = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_span_columns(), target);
  }

  // optional .TSCE.RegionInfoArchive original_src_region = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::original_src_region(this), target, stream);
  }

  // optional .TSP.UUID final_dest_table_uid = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::final_dest_table_uid(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.RegionMovedInfoArchive)
  return target;
}

size_t RegionMovedInfoArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.RegionMovedInfoArchive)
  size_t total_size = 0;

  if (_internal_has_src_region()) {
    // required .TSCE.RegionInfoArchive src_region = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *src_region_);
  }

  if (_internal_has_dst_region()) {
    // required .TSCE.RegionInfoArchive dst_region = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dst_region_);
  }

  return total_size;
}
size_t RegionMovedInfoArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.RegionMovedInfoArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSCE.RegionInfoArchive src_region = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *src_region_);

    // required .TSCE.RegionInfoArchive dst_region = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dst_region_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003cu) {
    // optional .TSCE.RegionInfoArchive original_src_region = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *original_src_region_);
    }

    // optional .TSP.UUID final_dest_table_uid = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *final_dest_table_uid_);
    }

    // optional bool span_rows = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool span_columns = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegionMovedInfoArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.RegionMovedInfoArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const RegionMovedInfoArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RegionMovedInfoArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.RegionMovedInfoArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.RegionMovedInfoArchive)
    MergeFrom(*source);
  }
}

void RegionMovedInfoArchive::MergeFrom(const RegionMovedInfoArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.RegionMovedInfoArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_src_region()->::TSCE::RegionInfoArchive::MergeFrom(from._internal_src_region());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_dst_region()->::TSCE::RegionInfoArchive::MergeFrom(from._internal_dst_region());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_original_src_region()->::TSCE::RegionInfoArchive::MergeFrom(from._internal_original_src_region());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_final_dest_table_uid()->::TSP::UUID::MergeFrom(from._internal_final_dest_table_uid());
    }
    if (cached_has_bits & 0x00000010u) {
      span_rows_ = from.span_rows_;
    }
    if (cached_has_bits & 0x00000020u) {
      span_columns_ = from.span_columns_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RegionMovedInfoArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.RegionMovedInfoArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegionMovedInfoArchive::CopyFrom(const RegionMovedInfoArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.RegionMovedInfoArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegionMovedInfoArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_src_region()) {
    if (!src_region_->IsInitialized()) return false;
  }
  if (_internal_has_dst_region()) {
    if (!dst_region_->IsInitialized()) return false;
  }
  if (_internal_has_original_src_region()) {
    if (!original_src_region_->IsInitialized()) return false;
  }
  if (_internal_has_final_dest_table_uid()) {
    if (!final_dest_table_uid_->IsInitialized()) return false;
  }
  return true;
}

void RegionMovedInfoArchive::InternalSwap(RegionMovedInfoArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RegionMovedInfoArchive, span_columns_)
      + sizeof(RegionMovedInfoArchive::span_columns_)
      - PROTOBUF_FIELD_OFFSET(RegionMovedInfoArchive, src_region_)>(
          reinterpret_cast<char*>(&src_region_),
          reinterpret_cast<char*>(&other->src_region_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RegionMovedInfoArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[119]);
}

// ===================================================================

class MergeSourceArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<MergeSourceArchive>()._has_bits_);
  static void set_has_coord_column(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_coord_row(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

MergeSourceArchive::MergeSourceArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.MergeSourceArchive)
}
MergeSourceArchive::MergeSourceArchive(const MergeSourceArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&coord_column_, &from.coord_column_,
    static_cast<size_t>(reinterpret_cast<char*>(&coord_row_) -
    reinterpret_cast<char*>(&coord_column_)) + sizeof(coord_row_));
  // @@protoc_insertion_point(copy_constructor:TSCE.MergeSourceArchive)
}

void MergeSourceArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&coord_column_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&coord_row_) -
    reinterpret_cast<char*>(&coord_column_)) + sizeof(coord_row_));
}

MergeSourceArchive::~MergeSourceArchive() {
  // @@protoc_insertion_point(destructor:TSCE.MergeSourceArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MergeSourceArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MergeSourceArchive::ArenaDtor(void* object) {
  MergeSourceArchive* _this = reinterpret_cast< MergeSourceArchive* >(object);
  (void)_this;
}
void MergeSourceArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MergeSourceArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MergeSourceArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.MergeSourceArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&coord_column_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&coord_row_) -
        reinterpret_cast<char*>(&coord_column_)) + sizeof(coord_row_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MergeSourceArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 coord_column = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_coord_column(&has_bits);
          coord_column_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 coord_row = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_coord_row(&has_bits);
          coord_row_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MergeSourceArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.MergeSourceArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 coord_column = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_coord_column(), target);
  }

  // required uint32 coord_row = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_coord_row(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.MergeSourceArchive)
  return target;
}

size_t MergeSourceArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.MergeSourceArchive)
  size_t total_size = 0;

  if (_internal_has_coord_column()) {
    // required uint32 coord_column = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_coord_column());
  }

  if (_internal_has_coord_row()) {
    // required uint32 coord_row = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_coord_row());
  }

  return total_size;
}
size_t MergeSourceArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.MergeSourceArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 coord_column = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_coord_column());

    // required uint32 coord_row = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_coord_row());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MergeSourceArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.MergeSourceArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const MergeSourceArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MergeSourceArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.MergeSourceArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.MergeSourceArchive)
    MergeFrom(*source);
  }
}

void MergeSourceArchive::MergeFrom(const MergeSourceArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.MergeSourceArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      coord_column_ = from.coord_column_;
    }
    if (cached_has_bits & 0x00000002u) {
      coord_row_ = from.coord_row_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MergeSourceArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.MergeSourceArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MergeSourceArchive::CopyFrom(const MergeSourceArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.MergeSourceArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MergeSourceArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void MergeSourceArchive::InternalSwap(MergeSourceArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MergeSourceArchive, coord_row_)
      + sizeof(MergeSourceArchive::coord_row_)
      - PROTOBUF_FIELD_OFFSET(MergeSourceArchive, coord_column_)>(
          reinterpret_cast<char*>(&coord_column_),
          reinterpret_cast<char*>(&other->coord_column_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MergeSourceArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[120]);
}

// ===================================================================

class FormulaRewriteSpecArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<FormulaRewriteSpecArchive>()._has_bits_);
  static void set_has_rewrite_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::TSP::UUID& table_uid(const FormulaRewriteSpecArchive* msg);
  static void set_has_table_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUID& cond_style_owner_uid(const FormulaRewriteSpecArchive* msg);
  static void set_has_cond_style_owner_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::UUID& group_by_uid(const FormulaRewriteSpecArchive* msg);
  static void set_has_group_by_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSCE::ColumnOrRowUuidsInfoArchive& column_or_row_uuids_info(const FormulaRewriteSpecArchive* msg);
  static void set_has_column_or_row_uuids_info(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSCE::ColumnOrRowUuidsInfoArchive& aux_column_or_row_uuids_info(const FormulaRewriteSpecArchive* msg);
  static void set_has_aux_column_or_row_uuids_info(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSCE::RegionMovedInfoArchive& region_moved_info(const FormulaRewriteSpecArchive* msg);
  static void set_has_region_moved_info(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSCE::RegionInfoArchive& region_info(const FormulaRewriteSpecArchive* msg);
  static void set_has_region_info(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSCE::RewriteTableUIDInfoArchive& rewrite_table_id_info(const FormulaRewriteSpecArchive* msg);
  static void set_has_rewrite_table_id_info(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::TSCE::TableTransposeInfoArchive& transposed_table_info(const FormulaRewriteSpecArchive* msg);
  static void set_has_transposed_table_info(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::TSCE::MergeOriginMovedArchive& merge_origin_moved_info(const FormulaRewriteSpecArchive* msg);
  static void set_has_merge_origin_moved_info(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::TSCE::MergeSourceArchive& merge_source(const FormulaRewriteSpecArchive* msg);
  static void set_has_merge_source(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::TSCE::RewriteGroupNodeUIDInfoArchive& group_node_info(const FormulaRewriteSpecArchive* msg);
  static void set_has_group_node_info(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::TSCE::GroupByChangeArchive& groupby_change(const FormulaRewriteSpecArchive* msg);
  static void set_has_groupby_change(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_is_inverse(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00004000) ^ 0x00004000) != 0;
  }
};

const ::TSP::UUID&
FormulaRewriteSpecArchive::_Internal::table_uid(const FormulaRewriteSpecArchive* msg) {
  return *msg->table_uid_;
}
const ::TSP::UUID&
FormulaRewriteSpecArchive::_Internal::cond_style_owner_uid(const FormulaRewriteSpecArchive* msg) {
  return *msg->cond_style_owner_uid_;
}
const ::TSP::UUID&
FormulaRewriteSpecArchive::_Internal::group_by_uid(const FormulaRewriteSpecArchive* msg) {
  return *msg->group_by_uid_;
}
const ::TSCE::ColumnOrRowUuidsInfoArchive&
FormulaRewriteSpecArchive::_Internal::column_or_row_uuids_info(const FormulaRewriteSpecArchive* msg) {
  return *msg->column_or_row_uuids_info_;
}
const ::TSCE::ColumnOrRowUuidsInfoArchive&
FormulaRewriteSpecArchive::_Internal::aux_column_or_row_uuids_info(const FormulaRewriteSpecArchive* msg) {
  return *msg->aux_column_or_row_uuids_info_;
}
const ::TSCE::RegionMovedInfoArchive&
FormulaRewriteSpecArchive::_Internal::region_moved_info(const FormulaRewriteSpecArchive* msg) {
  return *msg->region_moved_info_;
}
const ::TSCE::RegionInfoArchive&
FormulaRewriteSpecArchive::_Internal::region_info(const FormulaRewriteSpecArchive* msg) {
  return *msg->region_info_;
}
const ::TSCE::RewriteTableUIDInfoArchive&
FormulaRewriteSpecArchive::_Internal::rewrite_table_id_info(const FormulaRewriteSpecArchive* msg) {
  return *msg->rewrite_table_id_info_;
}
const ::TSCE::TableTransposeInfoArchive&
FormulaRewriteSpecArchive::_Internal::transposed_table_info(const FormulaRewriteSpecArchive* msg) {
  return *msg->transposed_table_info_;
}
const ::TSCE::MergeOriginMovedArchive&
FormulaRewriteSpecArchive::_Internal::merge_origin_moved_info(const FormulaRewriteSpecArchive* msg) {
  return *msg->merge_origin_moved_info_;
}
const ::TSCE::MergeSourceArchive&
FormulaRewriteSpecArchive::_Internal::merge_source(const FormulaRewriteSpecArchive* msg) {
  return *msg->merge_source_;
}
const ::TSCE::RewriteGroupNodeUIDInfoArchive&
FormulaRewriteSpecArchive::_Internal::group_node_info(const FormulaRewriteSpecArchive* msg) {
  return *msg->group_node_info_;
}
const ::TSCE::GroupByChangeArchive&
FormulaRewriteSpecArchive::_Internal::groupby_change(const FormulaRewriteSpecArchive* msg) {
  return *msg->groupby_change_;
}
void FormulaRewriteSpecArchive::clear_table_uid() {
  if (table_uid_ != nullptr) table_uid_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void FormulaRewriteSpecArchive::clear_cond_style_owner_uid() {
  if (cond_style_owner_uid_ != nullptr) cond_style_owner_uid_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void FormulaRewriteSpecArchive::clear_group_by_uid() {
  if (group_by_uid_ != nullptr) group_by_uid_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
FormulaRewriteSpecArchive::FormulaRewriteSpecArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.FormulaRewriteSpecArchive)
}
FormulaRewriteSpecArchive::FormulaRewriteSpecArchive(const FormulaRewriteSpecArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_table_uid()) {
    table_uid_ = new ::TSP::UUID(*from.table_uid_);
  } else {
    table_uid_ = nullptr;
  }
  if (from._internal_has_cond_style_owner_uid()) {
    cond_style_owner_uid_ = new ::TSP::UUID(*from.cond_style_owner_uid_);
  } else {
    cond_style_owner_uid_ = nullptr;
  }
  if (from._internal_has_group_by_uid()) {
    group_by_uid_ = new ::TSP::UUID(*from.group_by_uid_);
  } else {
    group_by_uid_ = nullptr;
  }
  if (from._internal_has_column_or_row_uuids_info()) {
    column_or_row_uuids_info_ = new ::TSCE::ColumnOrRowUuidsInfoArchive(*from.column_or_row_uuids_info_);
  } else {
    column_or_row_uuids_info_ = nullptr;
  }
  if (from._internal_has_aux_column_or_row_uuids_info()) {
    aux_column_or_row_uuids_info_ = new ::TSCE::ColumnOrRowUuidsInfoArchive(*from.aux_column_or_row_uuids_info_);
  } else {
    aux_column_or_row_uuids_info_ = nullptr;
  }
  if (from._internal_has_region_moved_info()) {
    region_moved_info_ = new ::TSCE::RegionMovedInfoArchive(*from.region_moved_info_);
  } else {
    region_moved_info_ = nullptr;
  }
  if (from._internal_has_region_info()) {
    region_info_ = new ::TSCE::RegionInfoArchive(*from.region_info_);
  } else {
    region_info_ = nullptr;
  }
  if (from._internal_has_rewrite_table_id_info()) {
    rewrite_table_id_info_ = new ::TSCE::RewriteTableUIDInfoArchive(*from.rewrite_table_id_info_);
  } else {
    rewrite_table_id_info_ = nullptr;
  }
  if (from._internal_has_transposed_table_info()) {
    transposed_table_info_ = new ::TSCE::TableTransposeInfoArchive(*from.transposed_table_info_);
  } else {
    transposed_table_info_ = nullptr;
  }
  if (from._internal_has_merge_origin_moved_info()) {
    merge_origin_moved_info_ = new ::TSCE::MergeOriginMovedArchive(*from.merge_origin_moved_info_);
  } else {
    merge_origin_moved_info_ = nullptr;
  }
  if (from._internal_has_merge_source()) {
    merge_source_ = new ::TSCE::MergeSourceArchive(*from.merge_source_);
  } else {
    merge_source_ = nullptr;
  }
  if (from._internal_has_group_node_info()) {
    group_node_info_ = new ::TSCE::RewriteGroupNodeUIDInfoArchive(*from.group_node_info_);
  } else {
    group_node_info_ = nullptr;
  }
  if (from._internal_has_groupby_change()) {
    groupby_change_ = new ::TSCE::GroupByChangeArchive(*from.groupby_change_);
  } else {
    groupby_change_ = nullptr;
  }
  ::memcpy(&is_inverse_, &from.is_inverse_,
    static_cast<size_t>(reinterpret_cast<char*>(&rewrite_type_) -
    reinterpret_cast<char*>(&is_inverse_)) + sizeof(rewrite_type_));
  // @@protoc_insertion_point(copy_constructor:TSCE.FormulaRewriteSpecArchive)
}

void FormulaRewriteSpecArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&table_uid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_inverse_) -
    reinterpret_cast<char*>(&table_uid_)) + sizeof(is_inverse_));
rewrite_type_ = 4;
}

FormulaRewriteSpecArchive::~FormulaRewriteSpecArchive() {
  // @@protoc_insertion_point(destructor:TSCE.FormulaRewriteSpecArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FormulaRewriteSpecArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete table_uid_;
  if (this != internal_default_instance()) delete cond_style_owner_uid_;
  if (this != internal_default_instance()) delete group_by_uid_;
  if (this != internal_default_instance()) delete column_or_row_uuids_info_;
  if (this != internal_default_instance()) delete aux_column_or_row_uuids_info_;
  if (this != internal_default_instance()) delete region_moved_info_;
  if (this != internal_default_instance()) delete region_info_;
  if (this != internal_default_instance()) delete rewrite_table_id_info_;
  if (this != internal_default_instance()) delete transposed_table_info_;
  if (this != internal_default_instance()) delete merge_origin_moved_info_;
  if (this != internal_default_instance()) delete merge_source_;
  if (this != internal_default_instance()) delete group_node_info_;
  if (this != internal_default_instance()) delete groupby_change_;
}

void FormulaRewriteSpecArchive::ArenaDtor(void* object) {
  FormulaRewriteSpecArchive* _this = reinterpret_cast< FormulaRewriteSpecArchive* >(object);
  (void)_this;
}
void FormulaRewriteSpecArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FormulaRewriteSpecArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FormulaRewriteSpecArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.FormulaRewriteSpecArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(table_uid_ != nullptr);
      table_uid_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(cond_style_owner_uid_ != nullptr);
      cond_style_owner_uid_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(group_by_uid_ != nullptr);
      group_by_uid_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(column_or_row_uuids_info_ != nullptr);
      column_or_row_uuids_info_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(aux_column_or_row_uuids_info_ != nullptr);
      aux_column_or_row_uuids_info_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(region_moved_info_ != nullptr);
      region_moved_info_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(region_info_ != nullptr);
      region_info_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(rewrite_table_id_info_ != nullptr);
      rewrite_table_id_info_->Clear();
    }
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(transposed_table_info_ != nullptr);
      transposed_table_info_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(merge_origin_moved_info_ != nullptr);
      merge_origin_moved_info_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(merge_source_ != nullptr);
      merge_source_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(group_node_info_ != nullptr);
      group_node_info_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(groupby_change_ != nullptr);
      groupby_change_->Clear();
    }
  }
  if (cached_has_bits & 0x00006000u) {
    is_inverse_ = false;
    rewrite_type_ = 4;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FormulaRewriteSpecArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCE.FormulaRewriteSpecArchive.RewriteType rewrite_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSCE::FormulaRewriteSpecArchive_RewriteType_IsValid(val))) {
            _internal_set_rewrite_type(static_cast<::TSCE::FormulaRewriteSpecArchive_RewriteType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .TSP.UUID table_uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_uid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.UUID cond_style_owner_uid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_cond_style_owner_uid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.UUID group_by_uid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_group_by_uid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCE.ColumnOrRowUuidsInfoArchive column_or_row_uuids_info = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_column_or_row_uuids_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCE.ColumnOrRowUuidsInfoArchive aux_column_or_row_uuids_info = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_aux_column_or_row_uuids_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCE.RegionMovedInfoArchive region_moved_info = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_region_moved_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCE.RegionInfoArchive region_info = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_region_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCE.RewriteTableUIDInfoArchive rewrite_table_id_info = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_rewrite_table_id_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCE.TableTransposeInfoArchive transposed_table_info = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_transposed_table_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCE.MergeOriginMovedArchive merge_origin_moved_info = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_merge_origin_moved_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCE.MergeSourceArchive merge_source = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_merge_source(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCE.RewriteGroupNodeUIDInfoArchive group_node_info = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_group_node_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCE.GroupByChangeArchive groupby_change = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_groupby_change(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_inverse = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_is_inverse(&has_bits);
          is_inverse_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FormulaRewriteSpecArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.FormulaRewriteSpecArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSCE.FormulaRewriteSpecArchive.RewriteType rewrite_type = 1;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_rewrite_type(), target);
  }

  // optional .TSP.UUID table_uid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::table_uid(this), target, stream);
  }

  // optional .TSP.UUID cond_style_owner_uid = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::cond_style_owner_uid(this), target, stream);
  }

  // optional .TSP.UUID group_by_uid = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::group_by_uid(this), target, stream);
  }

  // optional .TSCE.ColumnOrRowUuidsInfoArchive column_or_row_uuids_info = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::column_or_row_uuids_info(this), target, stream);
  }

  // optional .TSCE.ColumnOrRowUuidsInfoArchive aux_column_or_row_uuids_info = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::aux_column_or_row_uuids_info(this), target, stream);
  }

  // optional .TSCE.RegionMovedInfoArchive region_moved_info = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::region_moved_info(this), target, stream);
  }

  // optional .TSCE.RegionInfoArchive region_info = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::region_info(this), target, stream);
  }

  // optional .TSCE.RewriteTableUIDInfoArchive rewrite_table_id_info = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::rewrite_table_id_info(this), target, stream);
  }

  // optional .TSCE.TableTransposeInfoArchive transposed_table_info = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::transposed_table_info(this), target, stream);
  }

  // optional .TSCE.MergeOriginMovedArchive merge_origin_moved_info = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::merge_origin_moved_info(this), target, stream);
  }

  // optional .TSCE.MergeSourceArchive merge_source = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::merge_source(this), target, stream);
  }

  // optional .TSCE.RewriteGroupNodeUIDInfoArchive group_node_info = 13;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::group_node_info(this), target, stream);
  }

  // optional .TSCE.GroupByChangeArchive groupby_change = 14;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::groupby_change(this), target, stream);
  }

  // optional bool is_inverse = 15;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_is_inverse(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.FormulaRewriteSpecArchive)
  return target;
}

size_t FormulaRewriteSpecArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.FormulaRewriteSpecArchive)
  size_t total_size = 0;

  // required .TSCE.FormulaRewriteSpecArchive.RewriteType rewrite_type = 1;
  if (_internal_has_rewrite_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_rewrite_type());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .TSP.UUID table_uid = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *table_uid_);
    }

    // optional .TSP.UUID cond_style_owner_uid = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cond_style_owner_uid_);
    }

    // optional .TSP.UUID group_by_uid = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *group_by_uid_);
    }

    // optional .TSCE.ColumnOrRowUuidsInfoArchive column_or_row_uuids_info = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *column_or_row_uuids_info_);
    }

    // optional .TSCE.ColumnOrRowUuidsInfoArchive aux_column_or_row_uuids_info = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *aux_column_or_row_uuids_info_);
    }

    // optional .TSCE.RegionMovedInfoArchive region_moved_info = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *region_moved_info_);
    }

    // optional .TSCE.RegionInfoArchive region_info = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *region_info_);
    }

    // optional .TSCE.RewriteTableUIDInfoArchive rewrite_table_id_info = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rewrite_table_id_info_);
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // optional .TSCE.TableTransposeInfoArchive transposed_table_info = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *transposed_table_info_);
    }

    // optional .TSCE.MergeOriginMovedArchive merge_origin_moved_info = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *merge_origin_moved_info_);
    }

    // optional .TSCE.MergeSourceArchive merge_source = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *merge_source_);
    }

    // optional .TSCE.RewriteGroupNodeUIDInfoArchive group_node_info = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *group_node_info_);
    }

    // optional .TSCE.GroupByChangeArchive groupby_change = 14;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *groupby_change_);
    }

    // optional bool is_inverse = 15;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FormulaRewriteSpecArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.FormulaRewriteSpecArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const FormulaRewriteSpecArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FormulaRewriteSpecArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.FormulaRewriteSpecArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.FormulaRewriteSpecArchive)
    MergeFrom(*source);
  }
}

void FormulaRewriteSpecArchive::MergeFrom(const FormulaRewriteSpecArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.FormulaRewriteSpecArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_table_uid()->::TSP::UUID::MergeFrom(from._internal_table_uid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_cond_style_owner_uid()->::TSP::UUID::MergeFrom(from._internal_cond_style_owner_uid());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_group_by_uid()->::TSP::UUID::MergeFrom(from._internal_group_by_uid());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_column_or_row_uuids_info()->::TSCE::ColumnOrRowUuidsInfoArchive::MergeFrom(from._internal_column_or_row_uuids_info());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_aux_column_or_row_uuids_info()->::TSCE::ColumnOrRowUuidsInfoArchive::MergeFrom(from._internal_aux_column_or_row_uuids_info());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_region_moved_info()->::TSCE::RegionMovedInfoArchive::MergeFrom(from._internal_region_moved_info());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_region_info()->::TSCE::RegionInfoArchive::MergeFrom(from._internal_region_info());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_rewrite_table_id_info()->::TSCE::RewriteTableUIDInfoArchive::MergeFrom(from._internal_rewrite_table_id_info());
    }
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_transposed_table_info()->::TSCE::TableTransposeInfoArchive::MergeFrom(from._internal_transposed_table_info());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_merge_origin_moved_info()->::TSCE::MergeOriginMovedArchive::MergeFrom(from._internal_merge_origin_moved_info());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_merge_source()->::TSCE::MergeSourceArchive::MergeFrom(from._internal_merge_source());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_group_node_info()->::TSCE::RewriteGroupNodeUIDInfoArchive::MergeFrom(from._internal_group_node_info());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_mutable_groupby_change()->::TSCE::GroupByChangeArchive::MergeFrom(from._internal_groupby_change());
    }
    if (cached_has_bits & 0x00002000u) {
      is_inverse_ = from.is_inverse_;
    }
    if (cached_has_bits & 0x00004000u) {
      rewrite_type_ = from.rewrite_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FormulaRewriteSpecArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.FormulaRewriteSpecArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FormulaRewriteSpecArchive::CopyFrom(const FormulaRewriteSpecArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.FormulaRewriteSpecArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FormulaRewriteSpecArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_table_uid()) {
    if (!table_uid_->IsInitialized()) return false;
  }
  if (_internal_has_cond_style_owner_uid()) {
    if (!cond_style_owner_uid_->IsInitialized()) return false;
  }
  if (_internal_has_group_by_uid()) {
    if (!group_by_uid_->IsInitialized()) return false;
  }
  if (_internal_has_column_or_row_uuids_info()) {
    if (!column_or_row_uuids_info_->IsInitialized()) return false;
  }
  if (_internal_has_aux_column_or_row_uuids_info()) {
    if (!aux_column_or_row_uuids_info_->IsInitialized()) return false;
  }
  if (_internal_has_region_moved_info()) {
    if (!region_moved_info_->IsInitialized()) return false;
  }
  if (_internal_has_region_info()) {
    if (!region_info_->IsInitialized()) return false;
  }
  if (_internal_has_rewrite_table_id_info()) {
    if (!rewrite_table_id_info_->IsInitialized()) return false;
  }
  if (_internal_has_transposed_table_info()) {
    if (!transposed_table_info_->IsInitialized()) return false;
  }
  if (_internal_has_merge_source()) {
    if (!merge_source_->IsInitialized()) return false;
  }
  if (_internal_has_group_node_info()) {
    if (!group_node_info_->IsInitialized()) return false;
  }
  if (_internal_has_groupby_change()) {
    if (!groupby_change_->IsInitialized()) return false;
  }
  return true;
}

void FormulaRewriteSpecArchive::InternalSwap(FormulaRewriteSpecArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FormulaRewriteSpecArchive, is_inverse_)
      + sizeof(FormulaRewriteSpecArchive::is_inverse_)
      - PROTOBUF_FIELD_OFFSET(FormulaRewriteSpecArchive, table_uid_)>(
          reinterpret_cast<char*>(&table_uid_),
          reinterpret_cast<char*>(&other->table_uid_));
  swap(rewrite_type_, other->rewrite_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FormulaRewriteSpecArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[121]);
}

// ===================================================================

class HauntedOwnerArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<HauntedOwnerArchive>()._has_bits_);
  static const ::TSP::UUID& owner_uid(const HauntedOwnerArchive* msg);
  static void set_has_owner_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSP::UUID&
HauntedOwnerArchive::_Internal::owner_uid(const HauntedOwnerArchive* msg) {
  return *msg->owner_uid_;
}
void HauntedOwnerArchive::clear_owner_uid() {
  if (owner_uid_ != nullptr) owner_uid_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
HauntedOwnerArchive::HauntedOwnerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.HauntedOwnerArchive)
}
HauntedOwnerArchive::HauntedOwnerArchive(const HauntedOwnerArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_owner_uid()) {
    owner_uid_ = new ::TSP::UUID(*from.owner_uid_);
  } else {
    owner_uid_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSCE.HauntedOwnerArchive)
}

void HauntedOwnerArchive::SharedCtor() {
owner_uid_ = nullptr;
}

HauntedOwnerArchive::~HauntedOwnerArchive() {
  // @@protoc_insertion_point(destructor:TSCE.HauntedOwnerArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HauntedOwnerArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete owner_uid_;
}

void HauntedOwnerArchive::ArenaDtor(void* object) {
  HauntedOwnerArchive* _this = reinterpret_cast< HauntedOwnerArchive* >(object);
  (void)_this;
}
void HauntedOwnerArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HauntedOwnerArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HauntedOwnerArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.HauntedOwnerArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(owner_uid_ != nullptr);
    owner_uid_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HauntedOwnerArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.UUID owner_uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_owner_uid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HauntedOwnerArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.HauntedOwnerArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSP.UUID owner_uid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::owner_uid(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.HauntedOwnerArchive)
  return target;
}

size_t HauntedOwnerArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.HauntedOwnerArchive)
  size_t total_size = 0;

  // required .TSP.UUID owner_uid = 1;
  if (_internal_has_owner_uid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *owner_uid_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HauntedOwnerArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.HauntedOwnerArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const HauntedOwnerArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HauntedOwnerArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.HauntedOwnerArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.HauntedOwnerArchive)
    MergeFrom(*source);
  }
}

void HauntedOwnerArchive::MergeFrom(const HauntedOwnerArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.HauntedOwnerArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_owner_uid()) {
    _internal_mutable_owner_uid()->::TSP::UUID::MergeFrom(from._internal_owner_uid());
  }
}

void HauntedOwnerArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.HauntedOwnerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HauntedOwnerArchive::CopyFrom(const HauntedOwnerArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.HauntedOwnerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HauntedOwnerArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_owner_uid()) {
    if (!owner_uid_->IsInitialized()) return false;
  }
  return true;
}

void HauntedOwnerArchive::InternalSwap(HauntedOwnerArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(owner_uid_, other->owner_uid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HauntedOwnerArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[122]);
}

// ===================================================================

class CellCoordinateArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CellCoordinateArchive>()._has_bits_);
  static void set_has_packeddata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_column(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_row(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CellCoordinateArchive::CellCoordinateArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.CellCoordinateArchive)
}
CellCoordinateArchive::CellCoordinateArchive(const CellCoordinateArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&packeddata_, &from.packeddata_,
    static_cast<size_t>(reinterpret_cast<char*>(&row_) -
    reinterpret_cast<char*>(&packeddata_)) + sizeof(row_));
  // @@protoc_insertion_point(copy_constructor:TSCE.CellCoordinateArchive)
}

void CellCoordinateArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&packeddata_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&row_) -
    reinterpret_cast<char*>(&packeddata_)) + sizeof(row_));
}

CellCoordinateArchive::~CellCoordinateArchive() {
  // @@protoc_insertion_point(destructor:TSCE.CellCoordinateArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CellCoordinateArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CellCoordinateArchive::ArenaDtor(void* object) {
  CellCoordinateArchive* _this = reinterpret_cast< CellCoordinateArchive* >(object);
  (void)_this;
}
void CellCoordinateArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CellCoordinateArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CellCoordinateArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.CellCoordinateArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&packeddata_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&row_) -
        reinterpret_cast<char*>(&packeddata_)) + sizeof(row_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CellCoordinateArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed32 packedData = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_packeddata(&has_bits);
          packeddata_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional uint32 column = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_column(&has_bits);
          column_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 row = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_row(&has_bits);
          row_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CellCoordinateArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.CellCoordinateArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 packedData = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(1, this->_internal_packeddata(), target);
  }

  // optional uint32 column = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_column(), target);
  }

  // optional uint32 row = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_row(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.CellCoordinateArchive)
  return target;
}

size_t CellCoordinateArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.CellCoordinateArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional fixed32 packedData = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional uint32 column = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_column());
    }

    // optional uint32 row = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_row());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CellCoordinateArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.CellCoordinateArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const CellCoordinateArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CellCoordinateArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.CellCoordinateArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.CellCoordinateArchive)
    MergeFrom(*source);
  }
}

void CellCoordinateArchive::MergeFrom(const CellCoordinateArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.CellCoordinateArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      packeddata_ = from.packeddata_;
    }
    if (cached_has_bits & 0x00000002u) {
      column_ = from.column_;
    }
    if (cached_has_bits & 0x00000004u) {
      row_ = from.row_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CellCoordinateArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.CellCoordinateArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CellCoordinateArchive::CopyFrom(const CellCoordinateArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.CellCoordinateArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellCoordinateArchive::IsInitialized() const {
  return true;
}

void CellCoordinateArchive::InternalSwap(CellCoordinateArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CellCoordinateArchive, row_)
      + sizeof(CellCoordinateArchive::row_)
      - PROTOBUF_FIELD_OFFSET(CellCoordinateArchive, packeddata_)>(
          reinterpret_cast<char*>(&packeddata_),
          reinterpret_cast<char*>(&other->packeddata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CellCoordinateArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[123]);
}

// ===================================================================

class CellCoordinateVectorArchive::_Internal {
 public:
};

CellCoordinateVectorArchive::CellCoordinateVectorArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  cell_coord_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.CellCoordinateVectorArchive)
}
CellCoordinateVectorArchive::CellCoordinateVectorArchive(const CellCoordinateVectorArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      cell_coord_(from.cell_coord_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSCE.CellCoordinateVectorArchive)
}

void CellCoordinateVectorArchive::SharedCtor() {
}

CellCoordinateVectorArchive::~CellCoordinateVectorArchive() {
  // @@protoc_insertion_point(destructor:TSCE.CellCoordinateVectorArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CellCoordinateVectorArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CellCoordinateVectorArchive::ArenaDtor(void* object) {
  CellCoordinateVectorArchive* _this = reinterpret_cast< CellCoordinateVectorArchive* >(object);
  (void)_this;
}
void CellCoordinateVectorArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CellCoordinateVectorArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CellCoordinateVectorArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.CellCoordinateVectorArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cell_coord_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CellCoordinateVectorArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSCE.CellCoordinateArchive cell_coord = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cell_coord(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CellCoordinateVectorArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.CellCoordinateVectorArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSCE.CellCoordinateArchive cell_coord = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_cell_coord_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_cell_coord(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.CellCoordinateVectorArchive)
  return target;
}

size_t CellCoordinateVectorArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.CellCoordinateVectorArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.CellCoordinateArchive cell_coord = 1;
  total_size += 1UL * this->_internal_cell_coord_size();
  for (const auto& msg : this->cell_coord_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CellCoordinateVectorArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.CellCoordinateVectorArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const CellCoordinateVectorArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CellCoordinateVectorArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.CellCoordinateVectorArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.CellCoordinateVectorArchive)
    MergeFrom(*source);
  }
}

void CellCoordinateVectorArchive::MergeFrom(const CellCoordinateVectorArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.CellCoordinateVectorArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cell_coord_.MergeFrom(from.cell_coord_);
}

void CellCoordinateVectorArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.CellCoordinateVectorArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CellCoordinateVectorArchive::CopyFrom(const CellCoordinateVectorArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.CellCoordinateVectorArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellCoordinateVectorArchive::IsInitialized() const {
  return true;
}

void CellCoordinateVectorArchive::InternalSwap(CellCoordinateVectorArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  cell_coord_.InternalSwap(&other->cell_coord_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CellCoordinateVectorArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[124]);
}

// ===================================================================

class ExpandedCellRefObjectPairArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ExpandedCellRefObjectPairArchive>()._has_bits_);
  static const ::TSCE::CellReferenceArchive& cell_ref(const ExpandedCellRefObjectPairArchive* msg);
  static void set_has_cell_ref(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& object(const ExpandedCellRefObjectPairArchive* msg);
  static void set_has_object(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSCE::CellReferenceArchive&
ExpandedCellRefObjectPairArchive::_Internal::cell_ref(const ExpandedCellRefObjectPairArchive* msg) {
  return *msg->cell_ref_;
}
const ::TSP::Reference&
ExpandedCellRefObjectPairArchive::_Internal::object(const ExpandedCellRefObjectPairArchive* msg) {
  return *msg->object_;
}
void ExpandedCellRefObjectPairArchive::clear_object() {
  if (object_ != nullptr) object_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
ExpandedCellRefObjectPairArchive::ExpandedCellRefObjectPairArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.ExpandedCellRefObjectPairArchive)
}
ExpandedCellRefObjectPairArchive::ExpandedCellRefObjectPairArchive(const ExpandedCellRefObjectPairArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_cell_ref()) {
    cell_ref_ = new ::TSCE::CellReferenceArchive(*from.cell_ref_);
  } else {
    cell_ref_ = nullptr;
  }
  if (from._internal_has_object()) {
    object_ = new ::TSP::Reference(*from.object_);
  } else {
    object_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSCE.ExpandedCellRefObjectPairArchive)
}

void ExpandedCellRefObjectPairArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&cell_ref_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&object_) -
    reinterpret_cast<char*>(&cell_ref_)) + sizeof(object_));
}

ExpandedCellRefObjectPairArchive::~ExpandedCellRefObjectPairArchive() {
  // @@protoc_insertion_point(destructor:TSCE.ExpandedCellRefObjectPairArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ExpandedCellRefObjectPairArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete cell_ref_;
  if (this != internal_default_instance()) delete object_;
}

void ExpandedCellRefObjectPairArchive::ArenaDtor(void* object) {
  ExpandedCellRefObjectPairArchive* _this = reinterpret_cast< ExpandedCellRefObjectPairArchive* >(object);
  (void)_this;
}
void ExpandedCellRefObjectPairArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExpandedCellRefObjectPairArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ExpandedCellRefObjectPairArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.ExpandedCellRefObjectPairArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(cell_ref_ != nullptr);
      cell_ref_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(object_ != nullptr);
      object_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExpandedCellRefObjectPairArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCE.CellReferenceArchive cell_ref = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell_ref(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSP.Reference object = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_object(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExpandedCellRefObjectPairArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.ExpandedCellRefObjectPairArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSCE.CellReferenceArchive cell_ref = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::cell_ref(this), target, stream);
  }

  // required .TSP.Reference object = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::object(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.ExpandedCellRefObjectPairArchive)
  return target;
}

size_t ExpandedCellRefObjectPairArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.ExpandedCellRefObjectPairArchive)
  size_t total_size = 0;

  if (_internal_has_cell_ref()) {
    // required .TSCE.CellReferenceArchive cell_ref = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cell_ref_);
  }

  if (_internal_has_object()) {
    // required .TSP.Reference object = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *object_);
  }

  return total_size;
}
size_t ExpandedCellRefObjectPairArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.ExpandedCellRefObjectPairArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSCE.CellReferenceArchive cell_ref = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cell_ref_);

    // required .TSP.Reference object = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *object_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExpandedCellRefObjectPairArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.ExpandedCellRefObjectPairArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ExpandedCellRefObjectPairArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ExpandedCellRefObjectPairArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.ExpandedCellRefObjectPairArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.ExpandedCellRefObjectPairArchive)
    MergeFrom(*source);
  }
}

void ExpandedCellRefObjectPairArchive::MergeFrom(const ExpandedCellRefObjectPairArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.ExpandedCellRefObjectPairArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_cell_ref()->::TSCE::CellReferenceArchive::MergeFrom(from._internal_cell_ref());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_object()->::TSP::Reference::MergeFrom(from._internal_object());
    }
  }
}

void ExpandedCellRefObjectPairArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.ExpandedCellRefObjectPairArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExpandedCellRefObjectPairArchive::CopyFrom(const ExpandedCellRefObjectPairArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.ExpandedCellRefObjectPairArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExpandedCellRefObjectPairArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_cell_ref()) {
    if (!cell_ref_->IsInitialized()) return false;
  }
  if (_internal_has_object()) {
    if (!object_->IsInitialized()) return false;
  }
  return true;
}

void ExpandedCellRefObjectPairArchive::InternalSwap(ExpandedCellRefObjectPairArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExpandedCellRefObjectPairArchive, object_)
      + sizeof(ExpandedCellRefObjectPairArchive::object_)
      - PROTOBUF_FIELD_OFFSET(ExpandedCellRefObjectPairArchive, cell_ref_)>(
          reinterpret_cast<char*>(&cell_ref_),
          reinterpret_cast<char*>(&other->cell_ref_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ExpandedCellRefObjectPairArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[125]);
}

// ===================================================================

class ExpandedCellRefObjectMapArchive::_Internal {
 public:
};

ExpandedCellRefObjectMapArchive::ExpandedCellRefObjectMapArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  cell_ref_object_pair_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.ExpandedCellRefObjectMapArchive)
}
ExpandedCellRefObjectMapArchive::ExpandedCellRefObjectMapArchive(const ExpandedCellRefObjectMapArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      cell_ref_object_pair_(from.cell_ref_object_pair_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSCE.ExpandedCellRefObjectMapArchive)
}

void ExpandedCellRefObjectMapArchive::SharedCtor() {
}

ExpandedCellRefObjectMapArchive::~ExpandedCellRefObjectMapArchive() {
  // @@protoc_insertion_point(destructor:TSCE.ExpandedCellRefObjectMapArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ExpandedCellRefObjectMapArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ExpandedCellRefObjectMapArchive::ArenaDtor(void* object) {
  ExpandedCellRefObjectMapArchive* _this = reinterpret_cast< ExpandedCellRefObjectMapArchive* >(object);
  (void)_this;
}
void ExpandedCellRefObjectMapArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExpandedCellRefObjectMapArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ExpandedCellRefObjectMapArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.ExpandedCellRefObjectMapArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cell_ref_object_pair_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExpandedCellRefObjectMapArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSCE.ExpandedCellRefObjectPairArchive cell_ref_object_pair = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cell_ref_object_pair(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExpandedCellRefObjectMapArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.ExpandedCellRefObjectMapArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSCE.ExpandedCellRefObjectPairArchive cell_ref_object_pair = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_cell_ref_object_pair_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_cell_ref_object_pair(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.ExpandedCellRefObjectMapArchive)
  return target;
}

size_t ExpandedCellRefObjectMapArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.ExpandedCellRefObjectMapArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.ExpandedCellRefObjectPairArchive cell_ref_object_pair = 1;
  total_size += 1UL * this->_internal_cell_ref_object_pair_size();
  for (const auto& msg : this->cell_ref_object_pair_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExpandedCellRefObjectMapArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.ExpandedCellRefObjectMapArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ExpandedCellRefObjectMapArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ExpandedCellRefObjectMapArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.ExpandedCellRefObjectMapArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.ExpandedCellRefObjectMapArchive)
    MergeFrom(*source);
  }
}

void ExpandedCellRefObjectMapArchive::MergeFrom(const ExpandedCellRefObjectMapArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.ExpandedCellRefObjectMapArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cell_ref_object_pair_.MergeFrom(from.cell_ref_object_pair_);
}

void ExpandedCellRefObjectMapArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.ExpandedCellRefObjectMapArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExpandedCellRefObjectMapArchive::CopyFrom(const ExpandedCellRefObjectMapArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.ExpandedCellRefObjectMapArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExpandedCellRefObjectMapArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(cell_ref_object_pair_)) return false;
  return true;
}

void ExpandedCellRefObjectMapArchive::InternalSwap(ExpandedCellRefObjectMapArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  cell_ref_object_pair_.InternalSwap(&other->cell_ref_object_pair_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExpandedCellRefObjectMapArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[126]);
}

// ===================================================================

class FormulaAtCoordArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<FormulaAtCoordArchive>()._has_bits_);
  static void set_has_column(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_row(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSCE::FormulaArchive& formula(const FormulaAtCoordArchive* msg);
  static void set_has_formula(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_repeat_previous_formula(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000006) ^ 0x00000006) != 0;
  }
};

const ::TSCE::FormulaArchive&
FormulaAtCoordArchive::_Internal::formula(const FormulaAtCoordArchive* msg) {
  return *msg->formula_;
}
FormulaAtCoordArchive::FormulaAtCoordArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.FormulaAtCoordArchive)
}
FormulaAtCoordArchive::FormulaAtCoordArchive(const FormulaAtCoordArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_formula()) {
    formula_ = new ::TSCE::FormulaArchive(*from.formula_);
  } else {
    formula_ = nullptr;
  }
  ::memcpy(&column_, &from.column_,
    static_cast<size_t>(reinterpret_cast<char*>(&repeat_previous_formula_) -
    reinterpret_cast<char*>(&column_)) + sizeof(repeat_previous_formula_));
  // @@protoc_insertion_point(copy_constructor:TSCE.FormulaAtCoordArchive)
}

void FormulaAtCoordArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&formula_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&repeat_previous_formula_) -
    reinterpret_cast<char*>(&formula_)) + sizeof(repeat_previous_formula_));
}

FormulaAtCoordArchive::~FormulaAtCoordArchive() {
  // @@protoc_insertion_point(destructor:TSCE.FormulaAtCoordArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FormulaAtCoordArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete formula_;
}

void FormulaAtCoordArchive::ArenaDtor(void* object) {
  FormulaAtCoordArchive* _this = reinterpret_cast< FormulaAtCoordArchive* >(object);
  (void)_this;
}
void FormulaAtCoordArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FormulaAtCoordArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FormulaAtCoordArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.FormulaAtCoordArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(formula_ != nullptr);
    formula_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&column_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&repeat_previous_formula_) -
        reinterpret_cast<char*>(&column_)) + sizeof(repeat_previous_formula_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FormulaAtCoordArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 column = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_column(&has_bits);
          column_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 row = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_row(&has_bits);
          row_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCE.FormulaArchive formula = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_formula(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool repeat_previous_formula = 4 [default = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_repeat_previous_formula(&has_bits);
          repeat_previous_formula_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FormulaAtCoordArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.FormulaAtCoordArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 column = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_column(), target);
  }

  // required uint32 row = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_row(), target);
  }

  // optional .TSCE.FormulaArchive formula = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::formula(this), target, stream);
  }

  // optional bool repeat_previous_formula = 4 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_repeat_previous_formula(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.FormulaAtCoordArchive)
  return target;
}

size_t FormulaAtCoordArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.FormulaAtCoordArchive)
  size_t total_size = 0;

  if (_internal_has_column()) {
    // required uint32 column = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_column());
  }

  if (_internal_has_row()) {
    // required uint32 row = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_row());
  }

  return total_size;
}
size_t FormulaAtCoordArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.FormulaAtCoordArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required uint32 column = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_column());

    // required uint32 row = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_row());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSCE.FormulaArchive formula = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *formula_);
  }

  // optional bool repeat_previous_formula = 4 [default = false];
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FormulaAtCoordArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.FormulaAtCoordArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const FormulaAtCoordArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FormulaAtCoordArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.FormulaAtCoordArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.FormulaAtCoordArchive)
    MergeFrom(*source);
  }
}

void FormulaAtCoordArchive::MergeFrom(const FormulaAtCoordArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.FormulaAtCoordArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_formula()->::TSCE::FormulaArchive::MergeFrom(from._internal_formula());
    }
    if (cached_has_bits & 0x00000002u) {
      column_ = from.column_;
    }
    if (cached_has_bits & 0x00000004u) {
      row_ = from.row_;
    }
    if (cached_has_bits & 0x00000008u) {
      repeat_previous_formula_ = from.repeat_previous_formula_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FormulaAtCoordArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.FormulaAtCoordArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FormulaAtCoordArchive::CopyFrom(const FormulaAtCoordArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.FormulaAtCoordArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FormulaAtCoordArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_formula()) {
    if (!formula_->IsInitialized()) return false;
  }
  return true;
}

void FormulaAtCoordArchive::InternalSwap(FormulaAtCoordArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FormulaAtCoordArchive, repeat_previous_formula_)
      + sizeof(FormulaAtCoordArchive::repeat_previous_formula_)
      - PROTOBUF_FIELD_OFFSET(FormulaAtCoordArchive, formula_)>(
          reinterpret_cast<char*>(&formula_),
          reinterpret_cast<char*>(&other->formula_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FormulaAtCoordArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[127]);
}

// ===================================================================

class FormulaCoordPairsByOwnerArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<FormulaCoordPairsByOwnerArchive>()._has_bits_);
  static void set_has_owner_kind(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::UUID& owner_uid(const FormulaCoordPairsByOwnerArchive* msg);
  static void set_has_owner_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::TSP::UUID&
FormulaCoordPairsByOwnerArchive::_Internal::owner_uid(const FormulaCoordPairsByOwnerArchive* msg) {
  return *msg->owner_uid_;
}
void FormulaCoordPairsByOwnerArchive::clear_owner_uid() {
  if (owner_uid_ != nullptr) owner_uid_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
FormulaCoordPairsByOwnerArchive::FormulaCoordPairsByOwnerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  formula_at_coords_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.FormulaCoordPairsByOwnerArchive)
}
FormulaCoordPairsByOwnerArchive::FormulaCoordPairsByOwnerArchive(const FormulaCoordPairsByOwnerArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      formula_at_coords_(from.formula_at_coords_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_owner_uid()) {
    owner_uid_ = new ::TSP::UUID(*from.owner_uid_);
  } else {
    owner_uid_ = nullptr;
  }
  owner_kind_ = from.owner_kind_;
  // @@protoc_insertion_point(copy_constructor:TSCE.FormulaCoordPairsByOwnerArchive)
}

void FormulaCoordPairsByOwnerArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&owner_uid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&owner_kind_) -
    reinterpret_cast<char*>(&owner_uid_)) + sizeof(owner_kind_));
}

FormulaCoordPairsByOwnerArchive::~FormulaCoordPairsByOwnerArchive() {
  // @@protoc_insertion_point(destructor:TSCE.FormulaCoordPairsByOwnerArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FormulaCoordPairsByOwnerArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete owner_uid_;
}

void FormulaCoordPairsByOwnerArchive::ArenaDtor(void* object) {
  FormulaCoordPairsByOwnerArchive* _this = reinterpret_cast< FormulaCoordPairsByOwnerArchive* >(object);
  (void)_this;
}
void FormulaCoordPairsByOwnerArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FormulaCoordPairsByOwnerArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FormulaCoordPairsByOwnerArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.FormulaCoordPairsByOwnerArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  formula_at_coords_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(owner_uid_ != nullptr);
    owner_uid_->Clear();
  }
  owner_kind_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FormulaCoordPairsByOwnerArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 owner_kind = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_owner_kind(&has_bits);
          owner_kind_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.UUID owner_uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_owner_uid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSCE.FormulaAtCoordArchive formula_at_coords = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_formula_at_coords(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FormulaCoordPairsByOwnerArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.FormulaCoordPairsByOwnerArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 owner_kind = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_owner_kind(), target);
  }

  // optional .TSP.UUID owner_uid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::owner_uid(this), target, stream);
  }

  // repeated .TSCE.FormulaAtCoordArchive formula_at_coords = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_formula_at_coords_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_formula_at_coords(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.FormulaCoordPairsByOwnerArchive)
  return target;
}

size_t FormulaCoordPairsByOwnerArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.FormulaCoordPairsByOwnerArchive)
  size_t total_size = 0;

  // required uint32 owner_kind = 1;
  if (_internal_has_owner_kind()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_owner_kind());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.FormulaAtCoordArchive formula_at_coords = 3;
  total_size += 1UL * this->_internal_formula_at_coords_size();
  for (const auto& msg : this->formula_at_coords_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .TSP.UUID owner_uid = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *owner_uid_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FormulaCoordPairsByOwnerArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.FormulaCoordPairsByOwnerArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const FormulaCoordPairsByOwnerArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FormulaCoordPairsByOwnerArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.FormulaCoordPairsByOwnerArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.FormulaCoordPairsByOwnerArchive)
    MergeFrom(*source);
  }
}

void FormulaCoordPairsByOwnerArchive::MergeFrom(const FormulaCoordPairsByOwnerArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.FormulaCoordPairsByOwnerArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  formula_at_coords_.MergeFrom(from.formula_at_coords_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_owner_uid()->::TSP::UUID::MergeFrom(from._internal_owner_uid());
    }
    if (cached_has_bits & 0x00000002u) {
      owner_kind_ = from.owner_kind_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FormulaCoordPairsByOwnerArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.FormulaCoordPairsByOwnerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FormulaCoordPairsByOwnerArchive::CopyFrom(const FormulaCoordPairsByOwnerArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.FormulaCoordPairsByOwnerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FormulaCoordPairsByOwnerArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(formula_at_coords_)) return false;
  if (_internal_has_owner_uid()) {
    if (!owner_uid_->IsInitialized()) return false;
  }
  return true;
}

void FormulaCoordPairsByOwnerArchive::InternalSwap(FormulaCoordPairsByOwnerArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  formula_at_coords_.InternalSwap(&other->formula_at_coords_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FormulaCoordPairsByOwnerArchive, owner_kind_)
      + sizeof(FormulaCoordPairsByOwnerArchive::owner_kind_)
      - PROTOBUF_FIELD_OFFSET(FormulaCoordPairsByOwnerArchive, owner_uid_)>(
          reinterpret_cast<char*>(&owner_uid_),
          reinterpret_cast<char*>(&other->owner_uid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FormulaCoordPairsByOwnerArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[128]);
}

// ===================================================================

class FormulasForUndoArchive::_Internal {
 public:
};

FormulasForUndoArchive::FormulasForUndoArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  formulas_for_owner_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.FormulasForUndoArchive)
}
FormulasForUndoArchive::FormulasForUndoArchive(const FormulasForUndoArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      formulas_for_owner_(from.formulas_for_owner_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSCE.FormulasForUndoArchive)
}

void FormulasForUndoArchive::SharedCtor() {
}

FormulasForUndoArchive::~FormulasForUndoArchive() {
  // @@protoc_insertion_point(destructor:TSCE.FormulasForUndoArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FormulasForUndoArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FormulasForUndoArchive::ArenaDtor(void* object) {
  FormulasForUndoArchive* _this = reinterpret_cast< FormulasForUndoArchive* >(object);
  (void)_this;
}
void FormulasForUndoArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FormulasForUndoArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FormulasForUndoArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.FormulasForUndoArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  formulas_for_owner_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FormulasForUndoArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSCE.FormulaCoordPairsByOwnerArchive formulas_for_owner = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_formulas_for_owner(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FormulasForUndoArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.FormulasForUndoArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSCE.FormulaCoordPairsByOwnerArchive formulas_for_owner = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_formulas_for_owner_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_formulas_for_owner(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.FormulasForUndoArchive)
  return target;
}

size_t FormulasForUndoArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.FormulasForUndoArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.FormulaCoordPairsByOwnerArchive formulas_for_owner = 1;
  total_size += 1UL * this->_internal_formulas_for_owner_size();
  for (const auto& msg : this->formulas_for_owner_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FormulasForUndoArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.FormulasForUndoArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const FormulasForUndoArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FormulasForUndoArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.FormulasForUndoArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.FormulasForUndoArchive)
    MergeFrom(*source);
  }
}

void FormulasForUndoArchive::MergeFrom(const FormulasForUndoArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.FormulasForUndoArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  formulas_for_owner_.MergeFrom(from.formulas_for_owner_);
}

void FormulasForUndoArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.FormulasForUndoArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FormulasForUndoArchive::CopyFrom(const FormulasForUndoArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.FormulasForUndoArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FormulasForUndoArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(formulas_for_owner_)) return false;
  return true;
}

void FormulasForUndoArchive::InternalSwap(FormulasForUndoArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  formulas_for_owner_.InternalSwap(&other->formulas_for_owner_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FormulasForUndoArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[129]);
}

// ===================================================================

class FormulaRewriteCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<FormulaRewriteCommandArchive>()._has_bits_);
  static const ::TSP::Reference& table_rewrite_command(const FormulaRewriteCommandArchive* msg);
  static void set_has_table_rewrite_command(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSK::CommandArchive& super(const FormulaRewriteCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::TSP::Reference&
FormulaRewriteCommandArchive::_Internal::table_rewrite_command(const FormulaRewriteCommandArchive* msg) {
  return *msg->table_rewrite_command_;
}
const ::TSK::CommandArchive&
FormulaRewriteCommandArchive::_Internal::super(const FormulaRewriteCommandArchive* msg) {
  return *msg->super_;
}
void FormulaRewriteCommandArchive::clear_table_rewrite_command() {
  if (table_rewrite_command_ != nullptr) table_rewrite_command_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void FormulaRewriteCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
FormulaRewriteCommandArchive::FormulaRewriteCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.FormulaRewriteCommandArchive)
}
FormulaRewriteCommandArchive::FormulaRewriteCommandArchive(const FormulaRewriteCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_table_rewrite_command()) {
    table_rewrite_command_ = new ::TSP::Reference(*from.table_rewrite_command_);
  } else {
    table_rewrite_command_ = nullptr;
  }
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSCE.FormulaRewriteCommandArchive)
}

void FormulaRewriteCommandArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&table_rewrite_command_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&super_) -
    reinterpret_cast<char*>(&table_rewrite_command_)) + sizeof(super_));
}

FormulaRewriteCommandArchive::~FormulaRewriteCommandArchive() {
  // @@protoc_insertion_point(destructor:TSCE.FormulaRewriteCommandArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FormulaRewriteCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete table_rewrite_command_;
  if (this != internal_default_instance()) delete super_;
}

void FormulaRewriteCommandArchive::ArenaDtor(void* object) {
  FormulaRewriteCommandArchive* _this = reinterpret_cast< FormulaRewriteCommandArchive* >(object);
  (void)_this;
}
void FormulaRewriteCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FormulaRewriteCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FormulaRewriteCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.FormulaRewriteCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(table_rewrite_command_ != nullptr);
      table_rewrite_command_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FormulaRewriteCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference table_rewrite_command = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_rewrite_command(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSK.CommandArchive super = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FormulaRewriteCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.FormulaRewriteCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSP.Reference table_rewrite_command = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::table_rewrite_command(this), target, stream);
  }

  // optional .TSK.CommandArchive super = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::super(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.FormulaRewriteCommandArchive)
  return target;
}

size_t FormulaRewriteCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.FormulaRewriteCommandArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .TSP.Reference table_rewrite_command = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *table_rewrite_command_);
    }

    // optional .TSK.CommandArchive super = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *super_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FormulaRewriteCommandArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.FormulaRewriteCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const FormulaRewriteCommandArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FormulaRewriteCommandArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.FormulaRewriteCommandArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.FormulaRewriteCommandArchive)
    MergeFrom(*source);
  }
}

void FormulaRewriteCommandArchive::MergeFrom(const FormulaRewriteCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.FormulaRewriteCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_table_rewrite_command()->::TSP::Reference::MergeFrom(from._internal_table_rewrite_command());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
  }
}

void FormulaRewriteCommandArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.FormulaRewriteCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FormulaRewriteCommandArchive::CopyFrom(const FormulaRewriteCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.FormulaRewriteCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FormulaRewriteCommandArchive::IsInitialized() const {
  if (_internal_has_table_rewrite_command()) {
    if (!table_rewrite_command_->IsInitialized()) return false;
  }
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void FormulaRewriteCommandArchive::InternalSwap(FormulaRewriteCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FormulaRewriteCommandArchive, super_)
      + sizeof(FormulaRewriteCommandArchive::super_)
      - PROTOBUF_FIELD_OFFSET(FormulaRewriteCommandArchive, table_rewrite_command_)>(
          reinterpret_cast<char*>(&table_rewrite_command_),
          reinterpret_cast<char*>(&other->table_rewrite_command_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FormulaRewriteCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[130]);
}

// ===================================================================

class ExtendTableIDHistoryCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ExtendTableIDHistoryCommandArchive>()._has_bits_);
  static const ::TSK::CommandArchive& super(const ExtendTableIDHistoryCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSCE::FormulaRewriteSpecArchive& rewrite_spec(const ExtendTableIDHistoryCommandArchive* msg);
  static void set_has_rewrite_spec(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSCE::RewriteTableUIDInfoArchive& table_uid_history_rollback(const ExtendTableIDHistoryCommandArchive* msg);
  static void set_has_table_uid_history_rollback(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSK::CommandArchive&
ExtendTableIDHistoryCommandArchive::_Internal::super(const ExtendTableIDHistoryCommandArchive* msg) {
  return *msg->super_;
}
const ::TSCE::FormulaRewriteSpecArchive&
ExtendTableIDHistoryCommandArchive::_Internal::rewrite_spec(const ExtendTableIDHistoryCommandArchive* msg) {
  return *msg->rewrite_spec_;
}
const ::TSCE::RewriteTableUIDInfoArchive&
ExtendTableIDHistoryCommandArchive::_Internal::table_uid_history_rollback(const ExtendTableIDHistoryCommandArchive* msg) {
  return *msg->table_uid_history_rollback_;
}
void ExtendTableIDHistoryCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
ExtendTableIDHistoryCommandArchive::ExtendTableIDHistoryCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.ExtendTableIDHistoryCommandArchive)
}
ExtendTableIDHistoryCommandArchive::ExtendTableIDHistoryCommandArchive(const ExtendTableIDHistoryCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  if (from._internal_has_rewrite_spec()) {
    rewrite_spec_ = new ::TSCE::FormulaRewriteSpecArchive(*from.rewrite_spec_);
  } else {
    rewrite_spec_ = nullptr;
  }
  if (from._internal_has_table_uid_history_rollback()) {
    table_uid_history_rollback_ = new ::TSCE::RewriteTableUIDInfoArchive(*from.table_uid_history_rollback_);
  } else {
    table_uid_history_rollback_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSCE.ExtendTableIDHistoryCommandArchive)
}

void ExtendTableIDHistoryCommandArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&super_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&table_uid_history_rollback_) -
    reinterpret_cast<char*>(&super_)) + sizeof(table_uid_history_rollback_));
}

ExtendTableIDHistoryCommandArchive::~ExtendTableIDHistoryCommandArchive() {
  // @@protoc_insertion_point(destructor:TSCE.ExtendTableIDHistoryCommandArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ExtendTableIDHistoryCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete super_;
  if (this != internal_default_instance()) delete rewrite_spec_;
  if (this != internal_default_instance()) delete table_uid_history_rollback_;
}

void ExtendTableIDHistoryCommandArchive::ArenaDtor(void* object) {
  ExtendTableIDHistoryCommandArchive* _this = reinterpret_cast< ExtendTableIDHistoryCommandArchive* >(object);
  (void)_this;
}
void ExtendTableIDHistoryCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExtendTableIDHistoryCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ExtendTableIDHistoryCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.ExtendTableIDHistoryCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(rewrite_spec_ != nullptr);
      rewrite_spec_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(table_uid_history_rollback_ != nullptr);
      table_uid_history_rollback_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExtendTableIDHistoryCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSCE.FormulaRewriteSpecArchive rewrite_spec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_rewrite_spec(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCE.RewriteTableUIDInfoArchive table_uid_history_rollback = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_uid_history_rollback(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExtendTableIDHistoryCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.ExtendTableIDHistoryCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::super(this), target, stream);
  }

  // required .TSCE.FormulaRewriteSpecArchive rewrite_spec = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::rewrite_spec(this), target, stream);
  }

  // optional .TSCE.RewriteTableUIDInfoArchive table_uid_history_rollback = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::table_uid_history_rollback(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.ExtendTableIDHistoryCommandArchive)
  return target;
}

size_t ExtendTableIDHistoryCommandArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.ExtendTableIDHistoryCommandArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }

  if (_internal_has_rewrite_spec()) {
    // required .TSCE.FormulaRewriteSpecArchive rewrite_spec = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rewrite_spec_);
  }

  return total_size;
}
size_t ExtendTableIDHistoryCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.ExtendTableIDHistoryCommandArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);

    // required .TSCE.FormulaRewriteSpecArchive rewrite_spec = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rewrite_spec_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSCE.RewriteTableUIDInfoArchive table_uid_history_rollback = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *table_uid_history_rollback_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExtendTableIDHistoryCommandArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.ExtendTableIDHistoryCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ExtendTableIDHistoryCommandArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ExtendTableIDHistoryCommandArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.ExtendTableIDHistoryCommandArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.ExtendTableIDHistoryCommandArchive)
    MergeFrom(*source);
  }
}

void ExtendTableIDHistoryCommandArchive::MergeFrom(const ExtendTableIDHistoryCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.ExtendTableIDHistoryCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_rewrite_spec()->::TSCE::FormulaRewriteSpecArchive::MergeFrom(from._internal_rewrite_spec());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_table_uid_history_rollback()->::TSCE::RewriteTableUIDInfoArchive::MergeFrom(from._internal_table_uid_history_rollback());
    }
  }
}

void ExtendTableIDHistoryCommandArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.ExtendTableIDHistoryCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExtendTableIDHistoryCommandArchive::CopyFrom(const ExtendTableIDHistoryCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.ExtendTableIDHistoryCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtendTableIDHistoryCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  if (_internal_has_rewrite_spec()) {
    if (!rewrite_spec_->IsInitialized()) return false;
  }
  if (_internal_has_table_uid_history_rollback()) {
    if (!table_uid_history_rollback_->IsInitialized()) return false;
  }
  return true;
}

void ExtendTableIDHistoryCommandArchive::InternalSwap(ExtendTableIDHistoryCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExtendTableIDHistoryCommandArchive, table_uid_history_rollback_)
      + sizeof(ExtendTableIDHistoryCommandArchive::table_uid_history_rollback_)
      - PROTOBUF_FIELD_OFFSET(ExtendTableIDHistoryCommandArchive, super_)>(
          reinterpret_cast<char*>(&super_),
          reinterpret_cast<char*>(&other->super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ExtendTableIDHistoryCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[131]);
}

// ===================================================================

class NumberTrackedReferencePairArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<NumberTrackedReferencePairArchive>()._has_bits_);
  static void set_has_number(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& tracked_reference(const NumberTrackedReferencePairArchive* msg);
  static void set_has_tracked_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::TSP::Reference&
NumberTrackedReferencePairArchive::_Internal::tracked_reference(const NumberTrackedReferencePairArchive* msg) {
  return *msg->tracked_reference_;
}
void NumberTrackedReferencePairArchive::clear_tracked_reference() {
  if (tracked_reference_ != nullptr) tracked_reference_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
NumberTrackedReferencePairArchive::NumberTrackedReferencePairArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.NumberTrackedReferencePairArchive)
}
NumberTrackedReferencePairArchive::NumberTrackedReferencePairArchive(const NumberTrackedReferencePairArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_tracked_reference()) {
    tracked_reference_ = new ::TSP::Reference(*from.tracked_reference_);
  } else {
    tracked_reference_ = nullptr;
  }
  number_ = from.number_;
  // @@protoc_insertion_point(copy_constructor:TSCE.NumberTrackedReferencePairArchive)
}

void NumberTrackedReferencePairArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&tracked_reference_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&number_) -
    reinterpret_cast<char*>(&tracked_reference_)) + sizeof(number_));
}

NumberTrackedReferencePairArchive::~NumberTrackedReferencePairArchive() {
  // @@protoc_insertion_point(destructor:TSCE.NumberTrackedReferencePairArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NumberTrackedReferencePairArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete tracked_reference_;
}

void NumberTrackedReferencePairArchive::ArenaDtor(void* object) {
  NumberTrackedReferencePairArchive* _this = reinterpret_cast< NumberTrackedReferencePairArchive* >(object);
  (void)_this;
}
void NumberTrackedReferencePairArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NumberTrackedReferencePairArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NumberTrackedReferencePairArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.NumberTrackedReferencePairArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(tracked_reference_ != nullptr);
    tracked_reference_->Clear();
  }
  number_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NumberTrackedReferencePairArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_number(&has_bits);
          number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSP.Reference tracked_reference = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_tracked_reference(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NumberTrackedReferencePairArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.NumberTrackedReferencePairArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 number = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_number(), target);
  }

  // optional .TSP.Reference tracked_reference = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::tracked_reference(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.NumberTrackedReferencePairArchive)
  return target;
}

size_t NumberTrackedReferencePairArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.NumberTrackedReferencePairArchive)
  size_t total_size = 0;

  // required uint32 number = 1;
  if (_internal_has_number()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_number());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.Reference tracked_reference = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tracked_reference_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NumberTrackedReferencePairArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.NumberTrackedReferencePairArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const NumberTrackedReferencePairArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NumberTrackedReferencePairArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.NumberTrackedReferencePairArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.NumberTrackedReferencePairArchive)
    MergeFrom(*source);
  }
}

void NumberTrackedReferencePairArchive::MergeFrom(const NumberTrackedReferencePairArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.NumberTrackedReferencePairArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_tracked_reference()->::TSP::Reference::MergeFrom(from._internal_tracked_reference());
    }
    if (cached_has_bits & 0x00000002u) {
      number_ = from.number_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NumberTrackedReferencePairArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.NumberTrackedReferencePairArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NumberTrackedReferencePairArchive::CopyFrom(const NumberTrackedReferencePairArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.NumberTrackedReferencePairArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NumberTrackedReferencePairArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_tracked_reference()) {
    if (!tracked_reference_->IsInitialized()) return false;
  }
  return true;
}

void NumberTrackedReferencePairArchive::InternalSwap(NumberTrackedReferencePairArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NumberTrackedReferencePairArchive, number_)
      + sizeof(NumberTrackedReferencePairArchive::number_)
      - PROTOBUF_FIELD_OFFSET(NumberTrackedReferencePairArchive, tracked_reference_)>(
          reinterpret_cast<char*>(&tracked_reference_),
          reinterpret_cast<char*>(&other->tracked_reference_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NumberTrackedReferencePairArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[132]);
}

// ===================================================================

class NumberToTrackedReferenceMapArchive::_Internal {
 public:
};

NumberToTrackedReferenceMapArchive::NumberToTrackedReferenceMapArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  number_tracked_reference_pair_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.NumberToTrackedReferenceMapArchive)
}
NumberToTrackedReferenceMapArchive::NumberToTrackedReferenceMapArchive(const NumberToTrackedReferenceMapArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      number_tracked_reference_pair_(from.number_tracked_reference_pair_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSCE.NumberToTrackedReferenceMapArchive)
}

void NumberToTrackedReferenceMapArchive::SharedCtor() {
}

NumberToTrackedReferenceMapArchive::~NumberToTrackedReferenceMapArchive() {
  // @@protoc_insertion_point(destructor:TSCE.NumberToTrackedReferenceMapArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NumberToTrackedReferenceMapArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NumberToTrackedReferenceMapArchive::ArenaDtor(void* object) {
  NumberToTrackedReferenceMapArchive* _this = reinterpret_cast< NumberToTrackedReferenceMapArchive* >(object);
  (void)_this;
}
void NumberToTrackedReferenceMapArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NumberToTrackedReferenceMapArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NumberToTrackedReferenceMapArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.NumberToTrackedReferenceMapArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  number_tracked_reference_pair_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NumberToTrackedReferenceMapArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSCE.NumberTrackedReferencePairArchive number_tracked_reference_pair = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_number_tracked_reference_pair(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NumberToTrackedReferenceMapArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.NumberToTrackedReferenceMapArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSCE.NumberTrackedReferencePairArchive number_tracked_reference_pair = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_number_tracked_reference_pair_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_number_tracked_reference_pair(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.NumberToTrackedReferenceMapArchive)
  return target;
}

size_t NumberToTrackedReferenceMapArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.NumberToTrackedReferenceMapArchive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.NumberTrackedReferencePairArchive number_tracked_reference_pair = 1;
  total_size += 1UL * this->_internal_number_tracked_reference_pair_size();
  for (const auto& msg : this->number_tracked_reference_pair_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NumberToTrackedReferenceMapArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.NumberToTrackedReferenceMapArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const NumberToTrackedReferenceMapArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NumberToTrackedReferenceMapArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.NumberToTrackedReferenceMapArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.NumberToTrackedReferenceMapArchive)
    MergeFrom(*source);
  }
}

void NumberToTrackedReferenceMapArchive::MergeFrom(const NumberToTrackedReferenceMapArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.NumberToTrackedReferenceMapArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  number_tracked_reference_pair_.MergeFrom(from.number_tracked_reference_pair_);
}

void NumberToTrackedReferenceMapArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.NumberToTrackedReferenceMapArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NumberToTrackedReferenceMapArchive::CopyFrom(const NumberToTrackedReferenceMapArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.NumberToTrackedReferenceMapArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NumberToTrackedReferenceMapArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(number_tracked_reference_pair_)) return false;
  return true;
}

void NumberToTrackedReferenceMapArchive::InternalSwap(NumberToTrackedReferenceMapArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  number_tracked_reference_pair_.InternalSwap(&other->number_tracked_reference_pair_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NumberToTrackedReferenceMapArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[133]);
}

// ===================================================================

class TrackedReferencesRewriteCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<TrackedReferencesRewriteCommandArchive>()._has_bits_);
  static const ::TSCE::NumberToTrackedReferenceMapArchive& references_in_reference_tracker(const TrackedReferencesRewriteCommandArchive* msg);
  static void set_has_references_in_reference_tracker(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSCE::NumberToTrackedReferenceMapArchive& original_tracked_reference_copies(const TrackedReferencesRewriteCommandArchive* msg);
  static void set_has_original_tracked_reference_copies(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSCE::FormulaRewriteSpecArchive& rewrite_spec(const TrackedReferencesRewriteCommandArchive* msg);
  static void set_has_rewrite_spec(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSK::CommandArchive& super(const TrackedReferencesRewriteCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000008) ^ 0x00000008) != 0;
  }
};

const ::TSCE::NumberToTrackedReferenceMapArchive&
TrackedReferencesRewriteCommandArchive::_Internal::references_in_reference_tracker(const TrackedReferencesRewriteCommandArchive* msg) {
  return *msg->references_in_reference_tracker_;
}
const ::TSCE::NumberToTrackedReferenceMapArchive&
TrackedReferencesRewriteCommandArchive::_Internal::original_tracked_reference_copies(const TrackedReferencesRewriteCommandArchive* msg) {
  return *msg->original_tracked_reference_copies_;
}
const ::TSCE::FormulaRewriteSpecArchive&
TrackedReferencesRewriteCommandArchive::_Internal::rewrite_spec(const TrackedReferencesRewriteCommandArchive* msg) {
  return *msg->rewrite_spec_;
}
const ::TSK::CommandArchive&
TrackedReferencesRewriteCommandArchive::_Internal::super(const TrackedReferencesRewriteCommandArchive* msg) {
  return *msg->super_;
}
void TrackedReferencesRewriteCommandArchive::clear_super() {
  if (super_ != nullptr) super_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
TrackedReferencesRewriteCommandArchive::TrackedReferencesRewriteCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.TrackedReferencesRewriteCommandArchive)
}
TrackedReferencesRewriteCommandArchive::TrackedReferencesRewriteCommandArchive(const TrackedReferencesRewriteCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_references_in_reference_tracker()) {
    references_in_reference_tracker_ = new ::TSCE::NumberToTrackedReferenceMapArchive(*from.references_in_reference_tracker_);
  } else {
    references_in_reference_tracker_ = nullptr;
  }
  if (from._internal_has_original_tracked_reference_copies()) {
    original_tracked_reference_copies_ = new ::TSCE::NumberToTrackedReferenceMapArchive(*from.original_tracked_reference_copies_);
  } else {
    original_tracked_reference_copies_ = nullptr;
  }
  if (from._internal_has_rewrite_spec()) {
    rewrite_spec_ = new ::TSCE::FormulaRewriteSpecArchive(*from.rewrite_spec_);
  } else {
    rewrite_spec_ = nullptr;
  }
  if (from._internal_has_super()) {
    super_ = new ::TSK::CommandArchive(*from.super_);
  } else {
    super_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSCE.TrackedReferencesRewriteCommandArchive)
}

void TrackedReferencesRewriteCommandArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&references_in_reference_tracker_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&super_) -
    reinterpret_cast<char*>(&references_in_reference_tracker_)) + sizeof(super_));
}

TrackedReferencesRewriteCommandArchive::~TrackedReferencesRewriteCommandArchive() {
  // @@protoc_insertion_point(destructor:TSCE.TrackedReferencesRewriteCommandArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TrackedReferencesRewriteCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete references_in_reference_tracker_;
  if (this != internal_default_instance()) delete original_tracked_reference_copies_;
  if (this != internal_default_instance()) delete rewrite_spec_;
  if (this != internal_default_instance()) delete super_;
}

void TrackedReferencesRewriteCommandArchive::ArenaDtor(void* object) {
  TrackedReferencesRewriteCommandArchive* _this = reinterpret_cast< TrackedReferencesRewriteCommandArchive* >(object);
  (void)_this;
}
void TrackedReferencesRewriteCommandArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrackedReferencesRewriteCommandArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TrackedReferencesRewriteCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.TrackedReferencesRewriteCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(references_in_reference_tracker_ != nullptr);
      references_in_reference_tracker_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(original_tracked_reference_copies_ != nullptr);
      original_tracked_reference_copies_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(rewrite_spec_ != nullptr);
      rewrite_spec_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(super_ != nullptr);
      super_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrackedReferencesRewriteCommandArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSCE.NumberToTrackedReferenceMapArchive references_in_reference_tracker = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_references_in_reference_tracker(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCE.NumberToTrackedReferenceMapArchive original_tracked_reference_copies = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_original_tracked_reference_copies(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCE.FormulaRewriteSpecArchive rewrite_spec = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_rewrite_spec(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSK.CommandArchive super = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrackedReferencesRewriteCommandArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.TrackedReferencesRewriteCommandArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TSCE.NumberToTrackedReferenceMapArchive references_in_reference_tracker = 1 [deprecated = true];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::references_in_reference_tracker(this), target, stream);
  }

  // optional .TSCE.NumberToTrackedReferenceMapArchive original_tracked_reference_copies = 2 [deprecated = true];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::original_tracked_reference_copies(this), target, stream);
  }

  // optional .TSCE.FormulaRewriteSpecArchive rewrite_spec = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::rewrite_spec(this), target, stream);
  }

  // required .TSK.CommandArchive super = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::super(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.TrackedReferencesRewriteCommandArchive)
  return target;
}

size_t TrackedReferencesRewriteCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.TrackedReferencesRewriteCommandArchive)
  size_t total_size = 0;

  // required .TSK.CommandArchive super = 4;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *super_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .TSCE.NumberToTrackedReferenceMapArchive references_in_reference_tracker = 1 [deprecated = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *references_in_reference_tracker_);
    }

    // optional .TSCE.NumberToTrackedReferenceMapArchive original_tracked_reference_copies = 2 [deprecated = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *original_tracked_reference_copies_);
    }

    // optional .TSCE.FormulaRewriteSpecArchive rewrite_spec = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rewrite_spec_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrackedReferencesRewriteCommandArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.TrackedReferencesRewriteCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const TrackedReferencesRewriteCommandArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrackedReferencesRewriteCommandArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.TrackedReferencesRewriteCommandArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.TrackedReferencesRewriteCommandArchive)
    MergeFrom(*source);
  }
}

void TrackedReferencesRewriteCommandArchive::MergeFrom(const TrackedReferencesRewriteCommandArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.TrackedReferencesRewriteCommandArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_references_in_reference_tracker()->::TSCE::NumberToTrackedReferenceMapArchive::MergeFrom(from._internal_references_in_reference_tracker());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_original_tracked_reference_copies()->::TSCE::NumberToTrackedReferenceMapArchive::MergeFrom(from._internal_original_tracked_reference_copies());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_rewrite_spec()->::TSCE::FormulaRewriteSpecArchive::MergeFrom(from._internal_rewrite_spec());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_super()->::TSK::CommandArchive::MergeFrom(from._internal_super());
    }
  }
}

void TrackedReferencesRewriteCommandArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.TrackedReferencesRewriteCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrackedReferencesRewriteCommandArchive::CopyFrom(const TrackedReferencesRewriteCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.TrackedReferencesRewriteCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackedReferencesRewriteCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_references_in_reference_tracker()) {
    if (!references_in_reference_tracker_->IsInitialized()) return false;
  }
  if (_internal_has_original_tracked_reference_copies()) {
    if (!original_tracked_reference_copies_->IsInitialized()) return false;
  }
  if (_internal_has_rewrite_spec()) {
    if (!rewrite_spec_->IsInitialized()) return false;
  }
  if (_internal_has_super()) {
    if (!super_->IsInitialized()) return false;
  }
  return true;
}

void TrackedReferencesRewriteCommandArchive::InternalSwap(TrackedReferencesRewriteCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrackedReferencesRewriteCommandArchive, super_)
      + sizeof(TrackedReferencesRewriteCommandArchive::super_)
      - PROTOBUF_FIELD_OFFSET(TrackedReferencesRewriteCommandArchive, references_in_reference_tracker_)>(
          reinterpret_cast<char*>(&references_in_reference_tracker_),
          reinterpret_cast<char*>(&other->references_in_reference_tracker_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrackedReferencesRewriteCommandArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[134]);
}

// ===================================================================

class TrackedReferenceArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<TrackedReferenceArchive>()._has_bits_);
  static const ::TSCE::ASTNodeArrayArchive& ast(const TrackedReferenceArchive* msg);
  static void set_has_ast(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_formula_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSCE::ASTNodeArrayArchive&
TrackedReferenceArchive::_Internal::ast(const TrackedReferenceArchive* msg) {
  return *msg->ast_;
}
TrackedReferenceArchive::TrackedReferenceArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.TrackedReferenceArchive)
}
TrackedReferenceArchive::TrackedReferenceArchive(const TrackedReferenceArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ast()) {
    ast_ = new ::TSCE::ASTNodeArrayArchive(*from.ast_);
  } else {
    ast_ = nullptr;
  }
  formula_id_ = from.formula_id_;
  // @@protoc_insertion_point(copy_constructor:TSCE.TrackedReferenceArchive)
}

void TrackedReferenceArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ast_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&formula_id_) -
    reinterpret_cast<char*>(&ast_)) + sizeof(formula_id_));
}

TrackedReferenceArchive::~TrackedReferenceArchive() {
  // @@protoc_insertion_point(destructor:TSCE.TrackedReferenceArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TrackedReferenceArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete ast_;
}

void TrackedReferenceArchive::ArenaDtor(void* object) {
  TrackedReferenceArchive* _this = reinterpret_cast< TrackedReferenceArchive* >(object);
  (void)_this;
}
void TrackedReferenceArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrackedReferenceArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TrackedReferenceArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.TrackedReferenceArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(ast_ != nullptr);
    ast_->Clear();
  }
  formula_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrackedReferenceArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCE.ASTNodeArrayArchive ast = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ast(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 formula_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_formula_id(&has_bits);
          formula_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrackedReferenceArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.TrackedReferenceArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSCE.ASTNodeArrayArchive ast = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::ast(this), target, stream);
  }

  // required uint32 formula_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_formula_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.TrackedReferenceArchive)
  return target;
}

size_t TrackedReferenceArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.TrackedReferenceArchive)
  size_t total_size = 0;

  if (_internal_has_ast()) {
    // required .TSCE.ASTNodeArrayArchive ast = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ast_);
  }

  if (_internal_has_formula_id()) {
    // required uint32 formula_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_formula_id());
  }

  return total_size;
}
size_t TrackedReferenceArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.TrackedReferenceArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSCE.ASTNodeArrayArchive ast = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ast_);

    // required uint32 formula_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_formula_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrackedReferenceArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.TrackedReferenceArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const TrackedReferenceArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrackedReferenceArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.TrackedReferenceArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.TrackedReferenceArchive)
    MergeFrom(*source);
  }
}

void TrackedReferenceArchive::MergeFrom(const TrackedReferenceArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.TrackedReferenceArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_ast()->::TSCE::ASTNodeArrayArchive::MergeFrom(from._internal_ast());
    }
    if (cached_has_bits & 0x00000002u) {
      formula_id_ = from.formula_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TrackedReferenceArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.TrackedReferenceArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrackedReferenceArchive::CopyFrom(const TrackedReferenceArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.TrackedReferenceArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackedReferenceArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_ast()) {
    if (!ast_->IsInitialized()) return false;
  }
  return true;
}

void TrackedReferenceArchive::InternalSwap(TrackedReferenceArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrackedReferenceArchive, formula_id_)
      + sizeof(TrackedReferenceArchive::formula_id_)
      - PROTOBUF_FIELD_OFFSET(TrackedReferenceArchive, ast_)>(
          reinterpret_cast<char*>(&ast_),
          reinterpret_cast<char*>(&other->ast_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrackedReferenceArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[135]);
}

// ===================================================================

class ExpandedTrackedReferenceArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ExpandedTrackedReferenceArchive>()._has_bits_);
  static const ::TSCE::ASTNodeArrayArchive& ast(const ExpandedTrackedReferenceArchive* msg);
  static void set_has_ast(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_formula_column(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_formula_row(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::TSCE::ASTNodeArrayArchive&
ExpandedTrackedReferenceArchive::_Internal::ast(const ExpandedTrackedReferenceArchive* msg) {
  return *msg->ast_;
}
ExpandedTrackedReferenceArchive::ExpandedTrackedReferenceArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.ExpandedTrackedReferenceArchive)
}
ExpandedTrackedReferenceArchive::ExpandedTrackedReferenceArchive(const ExpandedTrackedReferenceArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ast()) {
    ast_ = new ::TSCE::ASTNodeArrayArchive(*from.ast_);
  } else {
    ast_ = nullptr;
  }
  ::memcpy(&formula_column_, &from.formula_column_,
    static_cast<size_t>(reinterpret_cast<char*>(&formula_row_) -
    reinterpret_cast<char*>(&formula_column_)) + sizeof(formula_row_));
  // @@protoc_insertion_point(copy_constructor:TSCE.ExpandedTrackedReferenceArchive)
}

void ExpandedTrackedReferenceArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ast_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&formula_row_) -
    reinterpret_cast<char*>(&ast_)) + sizeof(formula_row_));
}

ExpandedTrackedReferenceArchive::~ExpandedTrackedReferenceArchive() {
  // @@protoc_insertion_point(destructor:TSCE.ExpandedTrackedReferenceArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ExpandedTrackedReferenceArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete ast_;
}

void ExpandedTrackedReferenceArchive::ArenaDtor(void* object) {
  ExpandedTrackedReferenceArchive* _this = reinterpret_cast< ExpandedTrackedReferenceArchive* >(object);
  (void)_this;
}
void ExpandedTrackedReferenceArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExpandedTrackedReferenceArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ExpandedTrackedReferenceArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.ExpandedTrackedReferenceArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(ast_ != nullptr);
    ast_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&formula_column_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&formula_row_) -
        reinterpret_cast<char*>(&formula_column_)) + sizeof(formula_row_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExpandedTrackedReferenceArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCE.ASTNodeArrayArchive ast = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ast(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 formula_column = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_formula_column(&has_bits);
          formula_column_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 formula_row = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_formula_row(&has_bits);
          formula_row_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExpandedTrackedReferenceArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.ExpandedTrackedReferenceArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSCE.ASTNodeArrayArchive ast = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::ast(this), target, stream);
  }

  // required uint32 formula_column = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_formula_column(), target);
  }

  // required uint32 formula_row = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_formula_row(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.ExpandedTrackedReferenceArchive)
  return target;
}

size_t ExpandedTrackedReferenceArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.ExpandedTrackedReferenceArchive)
  size_t total_size = 0;

  if (_internal_has_ast()) {
    // required .TSCE.ASTNodeArrayArchive ast = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ast_);
  }

  if (_internal_has_formula_column()) {
    // required uint32 formula_column = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_formula_column());
  }

  if (_internal_has_formula_row()) {
    // required uint32 formula_row = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_formula_row());
  }

  return total_size;
}
size_t ExpandedTrackedReferenceArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.ExpandedTrackedReferenceArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .TSCE.ASTNodeArrayArchive ast = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ast_);

    // required uint32 formula_column = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_formula_column());

    // required uint32 formula_row = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_formula_row());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExpandedTrackedReferenceArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.ExpandedTrackedReferenceArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ExpandedTrackedReferenceArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ExpandedTrackedReferenceArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.ExpandedTrackedReferenceArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.ExpandedTrackedReferenceArchive)
    MergeFrom(*source);
  }
}

void ExpandedTrackedReferenceArchive::MergeFrom(const ExpandedTrackedReferenceArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.ExpandedTrackedReferenceArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_ast()->::TSCE::ASTNodeArrayArchive::MergeFrom(from._internal_ast());
    }
    if (cached_has_bits & 0x00000002u) {
      formula_column_ = from.formula_column_;
    }
    if (cached_has_bits & 0x00000004u) {
      formula_row_ = from.formula_row_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ExpandedTrackedReferenceArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.ExpandedTrackedReferenceArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExpandedTrackedReferenceArchive::CopyFrom(const ExpandedTrackedReferenceArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.ExpandedTrackedReferenceArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExpandedTrackedReferenceArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_ast()) {
    if (!ast_->IsInitialized()) return false;
  }
  return true;
}

void ExpandedTrackedReferenceArchive::InternalSwap(ExpandedTrackedReferenceArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExpandedTrackedReferenceArchive, formula_row_)
      + sizeof(ExpandedTrackedReferenceArchive::formula_row_)
      - PROTOBUF_FIELD_OFFSET(ExpandedTrackedReferenceArchive, ast_)>(
          reinterpret_cast<char*>(&ast_),
          reinterpret_cast<char*>(&other->ast_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ExpandedTrackedReferenceArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[136]);
}

// ===================================================================

class ReferenceTrackerArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ReferenceTrackerArchive>()._has_bits_);
  static const ::TSP::CFUUIDArchive& uuid(const ReferenceTrackerArchive* msg);
  static void set_has_uuid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSP::CFUUIDArchive&
ReferenceTrackerArchive::_Internal::uuid(const ReferenceTrackerArchive* msg) {
  return *msg->uuid_;
}
void ReferenceTrackerArchive::clear_uuid() {
  if (uuid_ != nullptr) uuid_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void ReferenceTrackerArchive::clear_tracked_reference() {
  tracked_reference_.Clear();
}
ReferenceTrackerArchive::ReferenceTrackerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tracked_reference_(arena),
  contained_tracked_reference_(arena),
  contained_expanded_tracked_reference_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.ReferenceTrackerArchive)
}
ReferenceTrackerArchive::ReferenceTrackerArchive(const ReferenceTrackerArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      tracked_reference_(from.tracked_reference_),
      contained_tracked_reference_(from.contained_tracked_reference_),
      contained_expanded_tracked_reference_(from.contained_expanded_tracked_reference_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_uuid()) {
    uuid_ = new ::TSP::CFUUIDArchive(*from.uuid_);
  } else {
    uuid_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:TSCE.ReferenceTrackerArchive)
}

void ReferenceTrackerArchive::SharedCtor() {
uuid_ = nullptr;
}

ReferenceTrackerArchive::~ReferenceTrackerArchive() {
  // @@protoc_insertion_point(destructor:TSCE.ReferenceTrackerArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReferenceTrackerArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete uuid_;
}

void ReferenceTrackerArchive::ArenaDtor(void* object) {
  ReferenceTrackerArchive* _this = reinterpret_cast< ReferenceTrackerArchive* >(object);
  (void)_this;
}
void ReferenceTrackerArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReferenceTrackerArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReferenceTrackerArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.ReferenceTrackerArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tracked_reference_.Clear();
  contained_tracked_reference_.Clear();
  contained_expanded_tracked_reference_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(uuid_ != nullptr);
    uuid_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReferenceTrackerArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.CFUUIDArchive uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_uuid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .TSP.Reference tracked_reference = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tracked_reference(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSCE.TrackedReferenceArchive contained_tracked_reference = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_contained_tracked_reference(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .TSCE.ExpandedTrackedReferenceArchive contained_expanded_tracked_reference = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_contained_expanded_tracked_reference(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReferenceTrackerArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.ReferenceTrackerArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSP.CFUUIDArchive uuid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::uuid(this), target, stream);
  }

  // repeated .TSP.Reference tracked_reference = 2 [deprecated = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tracked_reference_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_tracked_reference(i), target, stream);
  }

  // repeated .TSCE.TrackedReferenceArchive contained_tracked_reference = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_contained_tracked_reference_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_contained_tracked_reference(i), target, stream);
  }

  // repeated .TSCE.ExpandedTrackedReferenceArchive contained_expanded_tracked_reference = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_contained_expanded_tracked_reference_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_contained_expanded_tracked_reference(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.ReferenceTrackerArchive)
  return target;
}

size_t ReferenceTrackerArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.ReferenceTrackerArchive)
  size_t total_size = 0;

  // required .TSP.CFUUIDArchive uuid = 1;
  if (_internal_has_uuid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *uuid_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference tracked_reference = 2 [deprecated = true];
  total_size += 1UL * this->_internal_tracked_reference_size();
  for (const auto& msg : this->tracked_reference_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSCE.TrackedReferenceArchive contained_tracked_reference = 3;
  total_size += 1UL * this->_internal_contained_tracked_reference_size();
  for (const auto& msg : this->contained_tracked_reference_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSCE.ExpandedTrackedReferenceArchive contained_expanded_tracked_reference = 4;
  total_size += 1UL * this->_internal_contained_expanded_tracked_reference_size();
  for (const auto& msg : this->contained_expanded_tracked_reference_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReferenceTrackerArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.ReferenceTrackerArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ReferenceTrackerArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReferenceTrackerArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.ReferenceTrackerArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.ReferenceTrackerArchive)
    MergeFrom(*source);
  }
}

void ReferenceTrackerArchive::MergeFrom(const ReferenceTrackerArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.ReferenceTrackerArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tracked_reference_.MergeFrom(from.tracked_reference_);
  contained_tracked_reference_.MergeFrom(from.contained_tracked_reference_);
  contained_expanded_tracked_reference_.MergeFrom(from.contained_expanded_tracked_reference_);
  if (from._internal_has_uuid()) {
    _internal_mutable_uuid()->::TSP::CFUUIDArchive::MergeFrom(from._internal_uuid());
  }
}

void ReferenceTrackerArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.ReferenceTrackerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReferenceTrackerArchive::CopyFrom(const ReferenceTrackerArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.ReferenceTrackerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReferenceTrackerArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(tracked_reference_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(contained_tracked_reference_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(contained_expanded_tracked_reference_)) return false;
  return true;
}

void ReferenceTrackerArchive::InternalSwap(ReferenceTrackerArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tracked_reference_.InternalSwap(&other->tracked_reference_);
  contained_tracked_reference_.InternalSwap(&other->contained_tracked_reference_);
  contained_expanded_tracked_reference_.InternalSwap(&other->contained_expanded_tracked_reference_);
  swap(uuid_, other->uuid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReferenceTrackerArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[137]);
}

// ===================================================================

class BooleanCellValueArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<BooleanCellValueArchive>()._has_bits_);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSK::FormatStructArchive& format(const BooleanCellValueArchive* msg);
  static void set_has_format(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_format_is_explicit(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::TSK::FormatStructArchive&
BooleanCellValueArchive::_Internal::format(const BooleanCellValueArchive* msg) {
  return *msg->format_;
}
void BooleanCellValueArchive::clear_format() {
  if (format_ != nullptr) format_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
BooleanCellValueArchive::BooleanCellValueArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.BooleanCellValueArchive)
}
BooleanCellValueArchive::BooleanCellValueArchive(const BooleanCellValueArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_format()) {
    format_ = new ::TSK::FormatStructArchive(*from.format_);
  } else {
    format_ = nullptr;
  }
  ::memcpy(&value_, &from.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&format_is_explicit_) -
    reinterpret_cast<char*>(&value_)) + sizeof(format_is_explicit_));
  // @@protoc_insertion_point(copy_constructor:TSCE.BooleanCellValueArchive)
}

void BooleanCellValueArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&format_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&format_is_explicit_) -
    reinterpret_cast<char*>(&format_)) + sizeof(format_is_explicit_));
}

BooleanCellValueArchive::~BooleanCellValueArchive() {
  // @@protoc_insertion_point(destructor:TSCE.BooleanCellValueArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BooleanCellValueArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete format_;
}

void BooleanCellValueArchive::ArenaDtor(void* object) {
  BooleanCellValueArchive* _this = reinterpret_cast< BooleanCellValueArchive* >(object);
  (void)_this;
}
void BooleanCellValueArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BooleanCellValueArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BooleanCellValueArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.BooleanCellValueArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(format_ != nullptr);
    format_->Clear();
  }
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&format_is_explicit_) -
      reinterpret_cast<char*>(&value_)) + sizeof(format_is_explicit_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BooleanCellValueArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bool value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSK.FormatStructArchive format = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_format(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool format_is_explicit = 3 [default = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_format_is_explicit(&has_bits);
          format_is_explicit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BooleanCellValueArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.BooleanCellValueArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool value = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_value(), target);
  }

  // optional .TSK.FormatStructArchive format = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::format(this), target, stream);
  }

  // optional bool format_is_explicit = 3 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_format_is_explicit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.BooleanCellValueArchive)
  return target;
}

size_t BooleanCellValueArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.BooleanCellValueArchive)
  size_t total_size = 0;

  // required bool value = 1;
  if (_internal_has_value()) {
    total_size += 1 + 1;
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSK.FormatStructArchive format = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *format_);
  }

  // optional bool format_is_explicit = 3 [default = false];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BooleanCellValueArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.BooleanCellValueArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const BooleanCellValueArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BooleanCellValueArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.BooleanCellValueArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.BooleanCellValueArchive)
    MergeFrom(*source);
  }
}

void BooleanCellValueArchive::MergeFrom(const BooleanCellValueArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.BooleanCellValueArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_format()->::TSK::FormatStructArchive::MergeFrom(from._internal_format());
    }
    if (cached_has_bits & 0x00000002u) {
      value_ = from.value_;
    }
    if (cached_has_bits & 0x00000004u) {
      format_is_explicit_ = from.format_is_explicit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BooleanCellValueArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.BooleanCellValueArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BooleanCellValueArchive::CopyFrom(const BooleanCellValueArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.BooleanCellValueArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BooleanCellValueArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_format()) {
    if (!format_->IsInitialized()) return false;
  }
  return true;
}

void BooleanCellValueArchive::InternalSwap(BooleanCellValueArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BooleanCellValueArchive, format_is_explicit_)
      + sizeof(BooleanCellValueArchive::format_is_explicit_)
      - PROTOBUF_FIELD_OFFSET(BooleanCellValueArchive, format_)>(
          reinterpret_cast<char*>(&format_),
          reinterpret_cast<char*>(&other->format_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BooleanCellValueArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[138]);
}

// ===================================================================

class DateCellValueArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<DateCellValueArchive>()._has_bits_);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSK::FormatStructArchive& format(const DateCellValueArchive* msg);
  static void set_has_format(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_format_is_implicit(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_format_is_explicit(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSK::FormatStructArchive&
DateCellValueArchive::_Internal::format(const DateCellValueArchive* msg) {
  return *msg->format_;
}
void DateCellValueArchive::clear_format() {
  if (format_ != nullptr) format_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
DateCellValueArchive::DateCellValueArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.DateCellValueArchive)
}
DateCellValueArchive::DateCellValueArchive(const DateCellValueArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_format()) {
    format_ = new ::TSK::FormatStructArchive(*from.format_);
  } else {
    format_ = nullptr;
  }
  ::memcpy(&value_, &from.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&format_is_explicit_) -
    reinterpret_cast<char*>(&value_)) + sizeof(format_is_explicit_));
  // @@protoc_insertion_point(copy_constructor:TSCE.DateCellValueArchive)
}

void DateCellValueArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&format_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&format_is_explicit_) -
    reinterpret_cast<char*>(&format_)) + sizeof(format_is_explicit_));
}

DateCellValueArchive::~DateCellValueArchive() {
  // @@protoc_insertion_point(destructor:TSCE.DateCellValueArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DateCellValueArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete format_;
}

void DateCellValueArchive::ArenaDtor(void* object) {
  DateCellValueArchive* _this = reinterpret_cast< DateCellValueArchive* >(object);
  (void)_this;
}
void DateCellValueArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DateCellValueArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DateCellValueArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.DateCellValueArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(format_ != nullptr);
    format_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&format_is_explicit_) -
        reinterpret_cast<char*>(&value_)) + sizeof(format_is_explicit_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DateCellValueArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required double value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required .TSK.FormatStructArchive format = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_format(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool format_is_implicit = 3 [deprecated = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_format_is_implicit(&has_bits);
          format_is_implicit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool format_is_explicit = 4 [default = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_format_is_explicit(&has_bits);
          format_is_explicit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DateCellValueArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.DateCellValueArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double value = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_value(), target);
  }

  // required .TSK.FormatStructArchive format = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::format(this), target, stream);
  }

  // optional bool format_is_implicit = 3 [deprecated = true];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_format_is_implicit(), target);
  }

  // optional bool format_is_explicit = 4 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_format_is_explicit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.DateCellValueArchive)
  return target;
}

size_t DateCellValueArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.DateCellValueArchive)
  size_t total_size = 0;

  if (_internal_has_format()) {
    // required .TSK.FormatStructArchive format = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *format_);
  }

  if (_internal_has_value()) {
    // required double value = 1;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t DateCellValueArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.DateCellValueArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSK.FormatStructArchive format = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *format_);

    // required double value = 1;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000cu) {
    // optional bool format_is_implicit = 3 [deprecated = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool format_is_explicit = 4 [default = false];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DateCellValueArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.DateCellValueArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const DateCellValueArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DateCellValueArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.DateCellValueArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.DateCellValueArchive)
    MergeFrom(*source);
  }
}

void DateCellValueArchive::MergeFrom(const DateCellValueArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.DateCellValueArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_format()->::TSK::FormatStructArchive::MergeFrom(from._internal_format());
    }
    if (cached_has_bits & 0x00000002u) {
      value_ = from.value_;
    }
    if (cached_has_bits & 0x00000004u) {
      format_is_implicit_ = from.format_is_implicit_;
    }
    if (cached_has_bits & 0x00000008u) {
      format_is_explicit_ = from.format_is_explicit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DateCellValueArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.DateCellValueArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DateCellValueArchive::CopyFrom(const DateCellValueArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.DateCellValueArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DateCellValueArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_format()) {
    if (!format_->IsInitialized()) return false;
  }
  return true;
}

void DateCellValueArchive::InternalSwap(DateCellValueArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DateCellValueArchive, format_is_explicit_)
      + sizeof(DateCellValueArchive::format_is_explicit_)
      - PROTOBUF_FIELD_OFFSET(DateCellValueArchive, format_)>(
          reinterpret_cast<char*>(&format_),
          reinterpret_cast<char*>(&other->format_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DateCellValueArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[139]);
}

// ===================================================================

class NumberCellValueArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<NumberCellValueArchive>()._has_bits_);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_unit_index(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_currency_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSK::FormatStructArchive& format(const NumberCellValueArchive* msg);
  static void set_has_format(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_format_is_implicit(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_format_is_explicit(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_decimal_low(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_decimal_high(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::TSK::FormatStructArchive&
NumberCellValueArchive::_Internal::format(const NumberCellValueArchive* msg) {
  return *msg->format_;
}
void NumberCellValueArchive::clear_format() {
  if (format_ != nullptr) format_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
NumberCellValueArchive::NumberCellValueArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.NumberCellValueArchive)
}
NumberCellValueArchive::NumberCellValueArchive(const NumberCellValueArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  currency_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_currency_code()) {
    currency_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_currency_code(), 
      GetArena());
  }
  if (from._internal_has_format()) {
    format_ = new ::TSK::FormatStructArchive(*from.format_);
  } else {
    format_ = nullptr;
  }
  ::memcpy(&value_, &from.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&decimal_high_) -
    reinterpret_cast<char*>(&value_)) + sizeof(decimal_high_));
  // @@protoc_insertion_point(copy_constructor:TSCE.NumberCellValueArchive)
}

void NumberCellValueArchive::SharedCtor() {
currency_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&format_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&decimal_high_) -
    reinterpret_cast<char*>(&format_)) + sizeof(decimal_high_));
}

NumberCellValueArchive::~NumberCellValueArchive() {
  // @@protoc_insertion_point(destructor:TSCE.NumberCellValueArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NumberCellValueArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  currency_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete format_;
}

void NumberCellValueArchive::ArenaDtor(void* object) {
  NumberCellValueArchive* _this = reinterpret_cast< NumberCellValueArchive* >(object);
  (void)_this;
}
void NumberCellValueArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NumberCellValueArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NumberCellValueArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.NumberCellValueArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      currency_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(format_ != nullptr);
      format_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&decimal_high_) -
        reinterpret_cast<char*>(&value_)) + sizeof(decimal_high_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NumberCellValueArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int32 unit_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_unit_index(&has_bits);
          unit_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSK.FormatStructArchive format = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_format(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool format_is_implicit = 4 [deprecated = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_format_is_implicit(&has_bits);
          format_is_implicit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string currency_code = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_currency_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSCE.NumberCellValueArchive.currency_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool format_is_explicit = 6 [default = false];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_format_is_explicit(&has_bits);
          format_is_explicit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 decimal_low = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_decimal_low(&has_bits);
          decimal_low_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 decimal_high = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_decimal_high(&has_bits);
          decimal_high_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NumberCellValueArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.NumberCellValueArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double value = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_value(), target);
  }

  // optional int32 unit_index = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_unit_index(), target);
  }

  // required .TSK.FormatStructArchive format = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::format(this), target, stream);
  }

  // optional bool format_is_implicit = 4 [deprecated = true];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_format_is_implicit(), target);
  }

  // optional string currency_code = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_currency_code().data(), static_cast<int>(this->_internal_currency_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCE.NumberCellValueArchive.currency_code");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_currency_code(), target);
  }

  // optional bool format_is_explicit = 6 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_format_is_explicit(), target);
  }

  // optional uint64 decimal_low = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_decimal_low(), target);
  }

  // optional uint64 decimal_high = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_decimal_high(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.NumberCellValueArchive)
  return target;
}

size_t NumberCellValueArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.NumberCellValueArchive)
  size_t total_size = 0;

  // required .TSK.FormatStructArchive format = 3;
  if (_internal_has_format()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *format_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string currency_code = 5;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_currency_code());
  }

  if (cached_has_bits & 0x000000fcu) {
    // optional double value = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional int32 unit_index = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_unit_index());
    }

    // optional bool format_is_implicit = 4 [deprecated = true];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool format_is_explicit = 6 [default = false];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional uint64 decimal_low = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_decimal_low());
    }

    // optional uint64 decimal_high = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_decimal_high());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NumberCellValueArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.NumberCellValueArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const NumberCellValueArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NumberCellValueArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.NumberCellValueArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.NumberCellValueArchive)
    MergeFrom(*source);
  }
}

void NumberCellValueArchive::MergeFrom(const NumberCellValueArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.NumberCellValueArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_currency_code(from._internal_currency_code());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_format()->::TSK::FormatStructArchive::MergeFrom(from._internal_format());
    }
    if (cached_has_bits & 0x00000004u) {
      value_ = from.value_;
    }
    if (cached_has_bits & 0x00000008u) {
      unit_index_ = from.unit_index_;
    }
    if (cached_has_bits & 0x00000010u) {
      format_is_implicit_ = from.format_is_implicit_;
    }
    if (cached_has_bits & 0x00000020u) {
      format_is_explicit_ = from.format_is_explicit_;
    }
    if (cached_has_bits & 0x00000040u) {
      decimal_low_ = from.decimal_low_;
    }
    if (cached_has_bits & 0x00000080u) {
      decimal_high_ = from.decimal_high_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NumberCellValueArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.NumberCellValueArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NumberCellValueArchive::CopyFrom(const NumberCellValueArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.NumberCellValueArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NumberCellValueArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_format()) {
    if (!format_->IsInitialized()) return false;
  }
  return true;
}

void NumberCellValueArchive::InternalSwap(NumberCellValueArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  currency_code_.Swap(&other->currency_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NumberCellValueArchive, decimal_high_)
      + sizeof(NumberCellValueArchive::decimal_high_)
      - PROTOBUF_FIELD_OFFSET(NumberCellValueArchive, format_)>(
          reinterpret_cast<char*>(&format_),
          reinterpret_cast<char*>(&other->format_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NumberCellValueArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[140]);
}

// ===================================================================

class StringCellValueArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<StringCellValueArchive>()._has_bits_);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSK::FormatStructArchive& format(const StringCellValueArchive* msg);
  static void set_has_format(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_format_is_implicit(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_format_is_explicit(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_regex(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_is_case_sensitive_regex(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSK::FormatStructArchive&
StringCellValueArchive::_Internal::format(const StringCellValueArchive* msg) {
  return *msg->format_;
}
void StringCellValueArchive::clear_format() {
  if (format_ != nullptr) format_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
StringCellValueArchive::StringCellValueArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.StringCellValueArchive)
}
StringCellValueArchive::StringCellValueArchive(const StringCellValueArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_value()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArena());
  }
  if (from._internal_has_format()) {
    format_ = new ::TSK::FormatStructArchive(*from.format_);
  } else {
    format_ = nullptr;
  }
  ::memcpy(&format_is_implicit_, &from.format_is_implicit_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_case_sensitive_regex_) -
    reinterpret_cast<char*>(&format_is_implicit_)) + sizeof(is_case_sensitive_regex_));
  // @@protoc_insertion_point(copy_constructor:TSCE.StringCellValueArchive)
}

void StringCellValueArchive::SharedCtor() {
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&format_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_case_sensitive_regex_) -
    reinterpret_cast<char*>(&format_)) + sizeof(is_case_sensitive_regex_));
}

StringCellValueArchive::~StringCellValueArchive() {
  // @@protoc_insertion_point(destructor:TSCE.StringCellValueArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StringCellValueArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete format_;
}

void StringCellValueArchive::ArenaDtor(void* object) {
  StringCellValueArchive* _this = reinterpret_cast< StringCellValueArchive* >(object);
  (void)_this;
}
void StringCellValueArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StringCellValueArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StringCellValueArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.StringCellValueArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(format_ != nullptr);
      format_->Clear();
    }
  }
  ::memset(&format_is_implicit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_case_sensitive_regex_) -
      reinterpret_cast<char*>(&format_is_implicit_)) + sizeof(is_case_sensitive_regex_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StringCellValueArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSCE.StringCellValueArchive.value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .TSK.FormatStructArchive format = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_format(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool format_is_implicit = 3 [deprecated = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_format_is_implicit(&has_bits);
          format_is_implicit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool format_is_explicit = 4 [default = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_format_is_explicit(&has_bits);
          format_is_explicit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_regex = 5 [default = false];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_is_regex(&has_bits);
          is_regex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_case_sensitive_regex = 6 [default = false];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_is_case_sensitive_regex(&has_bits);
          is_case_sensitive_regex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StringCellValueArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.StringCellValueArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCE.StringCellValueArchive.value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_value(), target);
  }

  // required .TSK.FormatStructArchive format = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::format(this), target, stream);
  }

  // optional bool format_is_implicit = 3 [deprecated = true];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_format_is_implicit(), target);
  }

  // optional bool format_is_explicit = 4 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_format_is_explicit(), target);
  }

  // optional bool is_regex = 5 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_is_regex(), target);
  }

  // optional bool is_case_sensitive_regex = 6 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_is_case_sensitive_regex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.StringCellValueArchive)
  return target;
}

size_t StringCellValueArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.StringCellValueArchive)
  size_t total_size = 0;

  if (_internal_has_value()) {
    // required string value = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  if (_internal_has_format()) {
    // required .TSK.FormatStructArchive format = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *format_);
  }

  return total_size;
}
size_t StringCellValueArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.StringCellValueArchive)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string value = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());

    // required .TSK.FormatStructArchive format = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *format_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003cu) {
    // optional bool format_is_implicit = 3 [deprecated = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool format_is_explicit = 4 [default = false];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool is_regex = 5 [default = false];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool is_case_sensitive_regex = 6 [default = false];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StringCellValueArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.StringCellValueArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const StringCellValueArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StringCellValueArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.StringCellValueArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.StringCellValueArchive)
    MergeFrom(*source);
  }
}

void StringCellValueArchive::MergeFrom(const StringCellValueArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.StringCellValueArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_value(from._internal_value());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_format()->::TSK::FormatStructArchive::MergeFrom(from._internal_format());
    }
    if (cached_has_bits & 0x00000004u) {
      format_is_implicit_ = from.format_is_implicit_;
    }
    if (cached_has_bits & 0x00000008u) {
      format_is_explicit_ = from.format_is_explicit_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_regex_ = from.is_regex_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_case_sensitive_regex_ = from.is_case_sensitive_regex_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StringCellValueArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.StringCellValueArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StringCellValueArchive::CopyFrom(const StringCellValueArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.StringCellValueArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringCellValueArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_format()) {
    if (!format_->IsInitialized()) return false;
  }
  return true;
}

void StringCellValueArchive::InternalSwap(StringCellValueArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StringCellValueArchive, is_case_sensitive_regex_)
      + sizeof(StringCellValueArchive::is_case_sensitive_regex_)
      - PROTOBUF_FIELD_OFFSET(StringCellValueArchive, format_)>(
          reinterpret_cast<char*>(&format_),
          reinterpret_cast<char*>(&other->format_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StringCellValueArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[141]);
}

// ===================================================================

class ErrorCellValueArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ErrorCellValueArchive>()._has_bits_);
  static void set_has_error_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_extra_info_int(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_extra_info_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_extra_info_double(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000008) ^ 0x00000008) != 0;
  }
};

ErrorCellValueArchive::ErrorCellValueArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.ErrorCellValueArchive)
}
ErrorCellValueArchive::ErrorCellValueArchive(const ErrorCellValueArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  extra_info_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_extra_info_string()) {
    extra_info_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_extra_info_string(), 
      GetArena());
  }
  ::memcpy(&extra_info_double_, &from.extra_info_double_,
    static_cast<size_t>(reinterpret_cast<char*>(&error_type_) -
    reinterpret_cast<char*>(&extra_info_double_)) + sizeof(error_type_));
  // @@protoc_insertion_point(copy_constructor:TSCE.ErrorCellValueArchive)
}

void ErrorCellValueArchive::SharedCtor() {
extra_info_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&extra_info_double_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&extra_info_int_) -
    reinterpret_cast<char*>(&extra_info_double_)) + sizeof(extra_info_int_));
error_type_ = 1;
}

ErrorCellValueArchive::~ErrorCellValueArchive() {
  // @@protoc_insertion_point(destructor:TSCE.ErrorCellValueArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ErrorCellValueArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  extra_info_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ErrorCellValueArchive::ArenaDtor(void* object) {
  ErrorCellValueArchive* _this = reinterpret_cast< ErrorCellValueArchive* >(object);
  (void)_this;
}
void ErrorCellValueArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ErrorCellValueArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ErrorCellValueArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.ErrorCellValueArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    extra_info_string_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&extra_info_double_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&extra_info_int_) -
        reinterpret_cast<char*>(&extra_info_double_)) + sizeof(extra_info_int_));
    error_type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ErrorCellValueArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCE.ErrorCellValueArchive.ErrorType error_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSCE::ErrorCellValueArchive_ErrorType_IsValid(val))) {
            _internal_set_error_type(static_cast<::TSCE::ErrorCellValueArchive_ErrorType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 extra_info_int = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_extra_info_int(&has_bits);
          extra_info_int_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string extra_info_string = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_extra_info_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TSCE.ErrorCellValueArchive.extra_info_string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double extra_info_double = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_extra_info_double(&has_bits);
          extra_info_double_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ErrorCellValueArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.ErrorCellValueArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSCE.ErrorCellValueArchive.ErrorType error_type = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_error_type(), target);
  }

  // optional int32 extra_info_int = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_extra_info_int(), target);
  }

  // optional string extra_info_string = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_extra_info_string().data(), static_cast<int>(this->_internal_extra_info_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCE.ErrorCellValueArchive.extra_info_string");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_extra_info_string(), target);
  }

  // optional double extra_info_double = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_extra_info_double(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.ErrorCellValueArchive)
  return target;
}

size_t ErrorCellValueArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.ErrorCellValueArchive)
  size_t total_size = 0;

  // required .TSCE.ErrorCellValueArchive.ErrorType error_type = 1;
  if (_internal_has_error_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_error_type());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string extra_info_string = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_extra_info_string());
    }

    // optional double extra_info_double = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional int32 extra_info_int = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_extra_info_int());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ErrorCellValueArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.ErrorCellValueArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const ErrorCellValueArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ErrorCellValueArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.ErrorCellValueArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.ErrorCellValueArchive)
    MergeFrom(*source);
  }
}

void ErrorCellValueArchive::MergeFrom(const ErrorCellValueArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.ErrorCellValueArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_extra_info_string(from._internal_extra_info_string());
    }
    if (cached_has_bits & 0x00000002u) {
      extra_info_double_ = from.extra_info_double_;
    }
    if (cached_has_bits & 0x00000004u) {
      extra_info_int_ = from.extra_info_int_;
    }
    if (cached_has_bits & 0x00000008u) {
      error_type_ = from.error_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ErrorCellValueArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.ErrorCellValueArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ErrorCellValueArchive::CopyFrom(const ErrorCellValueArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.ErrorCellValueArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ErrorCellValueArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ErrorCellValueArchive::InternalSwap(ErrorCellValueArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  extra_info_string_.Swap(&other->extra_info_string_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ErrorCellValueArchive, extra_info_int_)
      + sizeof(ErrorCellValueArchive::extra_info_int_)
      - PROTOBUF_FIELD_OFFSET(ErrorCellValueArchive, extra_info_double_)>(
          reinterpret_cast<char*>(&extra_info_double_),
          reinterpret_cast<char*>(&other->extra_info_double_));
  swap(error_type_, other->error_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ErrorCellValueArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[142]);
}

// ===================================================================

class CellValueArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CellValueArchive>()._has_bits_);
  static void set_has_cell_value_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSCE::BooleanCellValueArchive& boolean_value(const CellValueArchive* msg);
  static void set_has_boolean_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSCE::DateCellValueArchive& date_value(const CellValueArchive* msg);
  static void set_has_date_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSCE::NumberCellValueArchive& number_value(const CellValueArchive* msg);
  static void set_has_number_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSCE::StringCellValueArchive& string_value(const CellValueArchive* msg);
  static void set_has_string_value(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSCE::ErrorCellValueArchive& error_value(const CellValueArchive* msg);
  static void set_has_error_value(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000020) ^ 0x00000020) != 0;
  }
};

const ::TSCE::BooleanCellValueArchive&
CellValueArchive::_Internal::boolean_value(const CellValueArchive* msg) {
  return *msg->boolean_value_;
}
const ::TSCE::DateCellValueArchive&
CellValueArchive::_Internal::date_value(const CellValueArchive* msg) {
  return *msg->date_value_;
}
const ::TSCE::NumberCellValueArchive&
CellValueArchive::_Internal::number_value(const CellValueArchive* msg) {
  return *msg->number_value_;
}
const ::TSCE::StringCellValueArchive&
CellValueArchive::_Internal::string_value(const CellValueArchive* msg) {
  return *msg->string_value_;
}
const ::TSCE::ErrorCellValueArchive&
CellValueArchive::_Internal::error_value(const CellValueArchive* msg) {
  return *msg->error_value_;
}
CellValueArchive::CellValueArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TSCE.CellValueArchive)
}
CellValueArchive::CellValueArchive(const CellValueArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_boolean_value()) {
    boolean_value_ = new ::TSCE::BooleanCellValueArchive(*from.boolean_value_);
  } else {
    boolean_value_ = nullptr;
  }
  if (from._internal_has_date_value()) {
    date_value_ = new ::TSCE::DateCellValueArchive(*from.date_value_);
  } else {
    date_value_ = nullptr;
  }
  if (from._internal_has_number_value()) {
    number_value_ = new ::TSCE::NumberCellValueArchive(*from.number_value_);
  } else {
    number_value_ = nullptr;
  }
  if (from._internal_has_string_value()) {
    string_value_ = new ::TSCE::StringCellValueArchive(*from.string_value_);
  } else {
    string_value_ = nullptr;
  }
  if (from._internal_has_error_value()) {
    error_value_ = new ::TSCE::ErrorCellValueArchive(*from.error_value_);
  } else {
    error_value_ = nullptr;
  }
  cell_value_type_ = from.cell_value_type_;
  // @@protoc_insertion_point(copy_constructor:TSCE.CellValueArchive)
}

void CellValueArchive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&boolean_value_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&error_value_) -
    reinterpret_cast<char*>(&boolean_value_)) + sizeof(error_value_));
cell_value_type_ = 1;
}

CellValueArchive::~CellValueArchive() {
  // @@protoc_insertion_point(destructor:TSCE.CellValueArchive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CellValueArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete boolean_value_;
  if (this != internal_default_instance()) delete date_value_;
  if (this != internal_default_instance()) delete number_value_;
  if (this != internal_default_instance()) delete string_value_;
  if (this != internal_default_instance()) delete error_value_;
}

void CellValueArchive::ArenaDtor(void* object) {
  CellValueArchive* _this = reinterpret_cast< CellValueArchive* >(object);
  (void)_this;
}
void CellValueArchive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CellValueArchive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CellValueArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.CellValueArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(boolean_value_ != nullptr);
      boolean_value_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(date_value_ != nullptr);
      date_value_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(number_value_ != nullptr);
      number_value_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(string_value_ != nullptr);
      string_value_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(error_value_ != nullptr);
      error_value_->Clear();
    }
    cell_value_type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CellValueArchive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCE.CellValueArchive.CellValueType cell_value_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSCE::CellValueArchive_CellValueType_IsValid(val))) {
            _internal_set_cell_value_type(static_cast<::TSCE::CellValueArchive_CellValueType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .TSCE.BooleanCellValueArchive boolean_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_boolean_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCE.DateCellValueArchive date_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_date_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCE.NumberCellValueArchive number_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_number_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCE.StringCellValueArchive string_value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_string_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .TSCE.ErrorCellValueArchive error_value = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_error_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CellValueArchive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.CellValueArchive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .TSCE.CellValueArchive.CellValueType cell_value_type = 1;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_cell_value_type(), target);
  }

  // optional .TSCE.BooleanCellValueArchive boolean_value = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::boolean_value(this), target, stream);
  }

  // optional .TSCE.DateCellValueArchive date_value = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::date_value(this), target, stream);
  }

  // optional .TSCE.NumberCellValueArchive number_value = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::number_value(this), target, stream);
  }

  // optional .TSCE.StringCellValueArchive string_value = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::string_value(this), target, stream);
  }

  // optional .TSCE.ErrorCellValueArchive error_value = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::error_value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.CellValueArchive)
  return target;
}

size_t CellValueArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.CellValueArchive)
  size_t total_size = 0;

  // required .TSCE.CellValueArchive.CellValueType cell_value_type = 1;
  if (_internal_has_cell_value_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_cell_value_type());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .TSCE.BooleanCellValueArchive boolean_value = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *boolean_value_);
    }

    // optional .TSCE.DateCellValueArchive date_value = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *date_value_);
    }

    // optional .TSCE.NumberCellValueArchive number_value = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *number_value_);
    }

    // optional .TSCE.StringCellValueArchive string_value = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *string_value_);
    }

    // optional .TSCE.ErrorCellValueArchive error_value = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *error_value_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CellValueArchive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TSCE.CellValueArchive)
  GOOGLE_DCHECK_NE(&from, this);
  const CellValueArchive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CellValueArchive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TSCE.CellValueArchive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TSCE.CellValueArchive)
    MergeFrom(*source);
  }
}

void CellValueArchive::MergeFrom(const CellValueArchive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TSCE.CellValueArchive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_boolean_value()->::TSCE::BooleanCellValueArchive::MergeFrom(from._internal_boolean_value());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_date_value()->::TSCE::DateCellValueArchive::MergeFrom(from._internal_date_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_number_value()->::TSCE::NumberCellValueArchive::MergeFrom(from._internal_number_value());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_string_value()->::TSCE::StringCellValueArchive::MergeFrom(from._internal_string_value());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_error_value()->::TSCE::ErrorCellValueArchive::MergeFrom(from._internal_error_value());
    }
    if (cached_has_bits & 0x00000020u) {
      cell_value_type_ = from.cell_value_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CellValueArchive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TSCE.CellValueArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CellValueArchive::CopyFrom(const CellValueArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.CellValueArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellValueArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_boolean_value()) {
    if (!boolean_value_->IsInitialized()) return false;
  }
  if (_internal_has_date_value()) {
    if (!date_value_->IsInitialized()) return false;
  }
  if (_internal_has_number_value()) {
    if (!number_value_->IsInitialized()) return false;
  }
  if (_internal_has_string_value()) {
    if (!string_value_->IsInitialized()) return false;
  }
  if (_internal_has_error_value()) {
    if (!error_value_->IsInitialized()) return false;
  }
  return true;
}

void CellValueArchive::InternalSwap(CellValueArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CellValueArchive, error_value_)
      + sizeof(CellValueArchive::error_value_)
      - PROTOBUF_FIELD_OFFSET(CellValueArchive, boolean_value_)>(
          reinterpret_cast<char*>(&boolean_value_),
          reinterpret_cast<char*>(&other->boolean_value_));
  swap(cell_value_type_, other->cell_value_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CellValueArchive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[143]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace TSCE
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TSCE::CellReferenceArchive* Arena::CreateMaybeMessage< ::TSCE::CellReferenceArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::CellReferenceArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::InternalCellReferenceArchive* Arena::CreateMaybeMessage< ::TSCE::InternalCellReferenceArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::InternalCellReferenceArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::RangeReferenceArchive* Arena::CreateMaybeMessage< ::TSCE::RangeReferenceArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::RangeReferenceArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::InternalRangeReferenceArchive* Arena::CreateMaybeMessage< ::TSCE::InternalRangeReferenceArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::InternalRangeReferenceArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::IndexSetArchive_IndexSetEntry* Arena::CreateMaybeMessage< ::TSCE::IndexSetArchive_IndexSetEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::IndexSetArchive_IndexSetEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::IndexSetArchive* Arena::CreateMaybeMessage< ::TSCE::IndexSetArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::IndexSetArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::CellCoordSetArchive_ColumnEntry* Arena::CreateMaybeMessage< ::TSCE::CellCoordSetArchive_ColumnEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::CellCoordSetArchive_ColumnEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::CellCoordSetArchive* Arena::CreateMaybeMessage< ::TSCE::CellCoordSetArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::CellCoordSetArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::InternalCellRefSetArchive_OwnerEntry* Arena::CreateMaybeMessage< ::TSCE::InternalCellRefSetArchive_OwnerEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::InternalCellRefSetArchive_OwnerEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::InternalCellRefSetArchive* Arena::CreateMaybeMessage< ::TSCE::InternalCellRefSetArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::InternalCellRefSetArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::ColumnRowSize* Arena::CreateMaybeMessage< ::TSCE::ColumnRowSize >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::ColumnRowSize >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::CellRectArchive* Arena::CreateMaybeMessage< ::TSCE::CellRectArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::CellRectArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::CellRefSetArchive_OwnerEntry* Arena::CreateMaybeMessage< ::TSCE::CellRefSetArchive_OwnerEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::CellRefSetArchive_OwnerEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::CellRefSetArchive* Arena::CreateMaybeMessage< ::TSCE::CellRefSetArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::CellRefSetArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::UidCoordSetArchive_ColumnEntry* Arena::CreateMaybeMessage< ::TSCE::UidCoordSetArchive_ColumnEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::UidCoordSetArchive_ColumnEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::UidCoordSetArchive* Arena::CreateMaybeMessage< ::TSCE::UidCoordSetArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::UidCoordSetArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::UidCellRefSetArchive_OwnerEntry* Arena::CreateMaybeMessage< ::TSCE::UidCellRefSetArchive_OwnerEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::UidCellRefSetArchive_OwnerEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::UidCellRefSetArchive* Arena::CreateMaybeMessage< ::TSCE::UidCellRefSetArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::UidCellRefSetArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::ReferencesToDirtyArchive* Arena::CreateMaybeMessage< ::TSCE::ReferencesToDirtyArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::ReferencesToDirtyArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::CoordMapperArchive_BaseToViewEntry* Arena::CreateMaybeMessage< ::TSCE::CoordMapperArchive_BaseToViewEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::CoordMapperArchive_BaseToViewEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::CoordMapperArchive* Arena::CreateMaybeMessage< ::TSCE::CoordMapperArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::CoordMapperArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::ReferenceArchive* Arena::CreateMaybeMessage< ::TSCE::ReferenceArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::ReferenceArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::EdgeArchive* Arena::CreateMaybeMessage< ::TSCE::EdgeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::EdgeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::EdgesArchive* Arena::CreateMaybeMessage< ::TSCE::EdgesArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::EdgesArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::ExpandedEdgesArchive* Arena::CreateMaybeMessage< ::TSCE::ExpandedEdgesArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::ExpandedEdgesArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::CellRecordArchive* Arena::CreateMaybeMessage< ::TSCE::CellRecordArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::CellRecordArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::CellDependenciesArchive* Arena::CreateMaybeMessage< ::TSCE::CellDependenciesArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::CellDependenciesArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::CellRecordExpandedArchive* Arena::CreateMaybeMessage< ::TSCE::CellRecordExpandedArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::CellRecordExpandedArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::CellDependenciesExpandedArchive* Arena::CreateMaybeMessage< ::TSCE::CellDependenciesExpandedArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::CellDependenciesExpandedArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::CellRecordTileArchive* Arena::CreateMaybeMessage< ::TSCE::CellRecordTileArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::CellRecordTileArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::CellDependenciesTiledArchive* Arena::CreateMaybeMessage< ::TSCE::CellDependenciesTiledArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::CellDependenciesTiledArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::VolatileDependenciesArchive* Arena::CreateMaybeMessage< ::TSCE::VolatileDependenciesArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::VolatileDependenciesArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::VolatileDependenciesExpandedArchive* Arena::CreateMaybeMessage< ::TSCE::VolatileDependenciesExpandedArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::VolatileDependenciesExpandedArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::RTreeInternalNodeContentsArchive* Arena::CreateMaybeMessage< ::TSCE::RTreeInternalNodeContentsArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::RTreeInternalNodeContentsArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::RTreeLeafNodeContentsArchive* Arena::CreateMaybeMessage< ::TSCE::RTreeLeafNodeContentsArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::RTreeLeafNodeContentsArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::RTreeNodeArchive* Arena::CreateMaybeMessage< ::TSCE::RTreeNodeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::RTreeNodeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::RTreeArchive* Arena::CreateMaybeMessage< ::TSCE::RTreeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::RTreeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::RangeBackDependencyArchive* Arena::CreateMaybeMessage< ::TSCE::RangeBackDependencyArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::RangeBackDependencyArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::RangeDependenciesArchive* Arena::CreateMaybeMessage< ::TSCE::RangeDependenciesArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::RangeDependenciesArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::RangePrecedentsTileArchive_FromToRangeArchive* Arena::CreateMaybeMessage< ::TSCE::RangePrecedentsTileArchive_FromToRangeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::RangePrecedentsTileArchive_FromToRangeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::RangePrecedentsTileArchive* Arena::CreateMaybeMessage< ::TSCE::RangePrecedentsTileArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::RangePrecedentsTileArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::RangeDependenciesTiledArchive* Arena::CreateMaybeMessage< ::TSCE::RangeDependenciesTiledArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::RangeDependenciesTiledArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::SpanningDependenciesArchive_ReferringColumnToLocalCells* Arena::CreateMaybeMessage< ::TSCE::SpanningDependenciesArchive_ReferringColumnToLocalCells >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::SpanningDependenciesArchive_ReferringColumnToLocalCells >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::SpanningDependenciesArchive_ReferringColumnToRemoteCells* Arena::CreateMaybeMessage< ::TSCE::SpanningDependenciesArchive_ReferringColumnToRemoteCells >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::SpanningDependenciesArchive_ReferringColumnToRemoteCells >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::SpanningDependenciesArchive* Arena::CreateMaybeMessage< ::TSCE::SpanningDependenciesArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::SpanningDependenciesArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::SpanningDependenciesExpandedArchive_ExtentRange* Arena::CreateMaybeMessage< ::TSCE::SpanningDependenciesExpandedArchive_ExtentRange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::SpanningDependenciesExpandedArchive_ExtentRange >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext* Arena::CreateMaybeMessage< ::TSCE::SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::SpanningDependenciesExpandedArchive_CellCoordRefersToExtents* Arena::CreateMaybeMessage< ::TSCE::SpanningDependenciesExpandedArchive_CellCoordRefersToExtents >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::SpanningDependenciesExpandedArchive_CellCoordRefersToExtents >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::SpanningDependenciesExpandedArchive* Arena::CreateMaybeMessage< ::TSCE::SpanningDependenciesExpandedArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::SpanningDependenciesExpandedArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::WholeOwnerDependenciesArchive* Arena::CreateMaybeMessage< ::TSCE::WholeOwnerDependenciesArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::WholeOwnerDependenciesArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::WholeOwnerDependenciesExpandedArchive* Arena::CreateMaybeMessage< ::TSCE::WholeOwnerDependenciesExpandedArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::WholeOwnerDependenciesExpandedArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::CellErrorsArchive_ErrorForCell* Arena::CreateMaybeMessage< ::TSCE::CellErrorsArchive_ErrorForCell >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::CellErrorsArchive_ErrorForCell >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::CellErrorsArchive* Arena::CreateMaybeMessage< ::TSCE::CellErrorsArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::CellErrorsArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::UuidReferencesArchive_TableRef* Arena::CreateMaybeMessage< ::TSCE::UuidReferencesArchive_TableRef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::UuidReferencesArchive_TableRef >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::UuidReferencesArchive_UuidRef* Arena::CreateMaybeMessage< ::TSCE::UuidReferencesArchive_UuidRef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::UuidReferencesArchive_UuidRef >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::UuidReferencesArchive_TableWithUuidRef* Arena::CreateMaybeMessage< ::TSCE::UuidReferencesArchive_TableWithUuidRef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::UuidReferencesArchive_TableWithUuidRef >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::UuidReferencesArchive* Arena::CreateMaybeMessage< ::TSCE::UuidReferencesArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::UuidReferencesArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::FormulaOwnerDependenciesArchive* Arena::CreateMaybeMessage< ::TSCE::FormulaOwnerDependenciesArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::FormulaOwnerDependenciesArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::FormulaOwnerInfoArchive* Arena::CreateMaybeMessage< ::TSCE::FormulaOwnerInfoArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::FormulaOwnerInfoArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::SubFormulaOwnerIDArchive* Arena::CreateMaybeMessage< ::TSCE::SubFormulaOwnerIDArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::SubFormulaOwnerIDArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::OwnerIDMapArchive_OwnerIDMapArchiveEntry* Arena::CreateMaybeMessage< ::TSCE::OwnerIDMapArchive_OwnerIDMapArchiveEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::OwnerIDMapArchive_OwnerIDMapArchiveEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::OwnerIDMapArchive* Arena::CreateMaybeMessage< ::TSCE::OwnerIDMapArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::OwnerIDMapArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::UidLookupListArchive* Arena::CreateMaybeMessage< ::TSCE::UidLookupListArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::UidLookupListArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::DependencyTrackerArchive* Arena::CreateMaybeMessage< ::TSCE::DependencyTrackerArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::DependencyTrackerArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::RemoteDataSpecifierArchive* Arena::CreateMaybeMessage< ::TSCE::RemoteDataSpecifierArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::RemoteDataSpecifierArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::RemoteDataValueMapArchive_RemoteDataMapEntry* Arena::CreateMaybeMessage< ::TSCE::RemoteDataValueMapArchive_RemoteDataMapEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::RemoteDataValueMapArchive_RemoteDataMapEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::RemoteDataValueMapArchive* Arena::CreateMaybeMessage< ::TSCE::RemoteDataValueMapArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::RemoteDataValueMapArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::StockArchive_AttributeEntry* Arena::CreateMaybeMessage< ::TSCE::StockArchive_AttributeEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::StockArchive_AttributeEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::StockArchive* Arena::CreateMaybeMessage< ::TSCE::StockArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::StockArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::RemoteDataStoreArchive* Arena::CreateMaybeMessage< ::TSCE::RemoteDataStoreArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::RemoteDataStoreArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::NameTrackedReferencePair* Arena::CreateMaybeMessage< ::TSCE::NameTrackedReferencePair >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::NameTrackedReferencePair >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::NamesByTrackedReferenceArchive* Arena::CreateMaybeMessage< ::TSCE::NamesByTrackedReferenceArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::NamesByTrackedReferenceArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::NamedReferenceManagerArchive* Arena::CreateMaybeMessage< ::TSCE::NamedReferenceManagerArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::NamedReferenceManagerArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::UuidSetStoreArchive_UuidSet* Arena::CreateMaybeMessage< ::TSCE::UuidSetStoreArchive_UuidSet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::UuidSetStoreArchive_UuidSet >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::UuidSetStoreArchive* Arena::CreateMaybeMessage< ::TSCE::UuidSetStoreArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::UuidSetStoreArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::UuidReferenceMapArchive_CellRefsForUuid* Arena::CreateMaybeMessage< ::TSCE::UuidReferenceMapArchive_CellRefsForUuid >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::UuidReferenceMapArchive_CellRefsForUuid >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::UuidReferenceMapArchive* Arena::CreateMaybeMessage< ::TSCE::UuidReferenceMapArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::UuidReferenceMapArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::GroupByNodeMapArchive_CellRefsForGroupNode* Arena::CreateMaybeMessage< ::TSCE::GroupByNodeMapArchive_CellRefsForGroupNode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::GroupByNodeMapArchive_CellRefsForGroupNode >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::GroupByNodeMapArchive_GroupNodesForGroupBy* Arena::CreateMaybeMessage< ::TSCE::GroupByNodeMapArchive_GroupNodesForGroupBy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::GroupByNodeMapArchive_GroupNodesForGroupBy >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::GroupByNodeMapArchive* Arena::CreateMaybeMessage< ::TSCE::GroupByNodeMapArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::GroupByNodeMapArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::CalculationEngineArchive* Arena::CreateMaybeMessage< ::TSCE::CalculationEngineArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::CalculationEngineArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::PreserveColumnRowFlagsArchive* Arena::CreateMaybeMessage< ::TSCE::PreserveColumnRowFlagsArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::PreserveColumnRowFlagsArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::CategoryReferenceArchive_CatRefUidList* Arena::CreateMaybeMessage< ::TSCE::CategoryReferenceArchive_CatRefUidList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::CategoryReferenceArchive_CatRefUidList >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::CategoryReferenceArchive* Arena::CreateMaybeMessage< ::TSCE::CategoryReferenceArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::CategoryReferenceArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive* Arena::CreateMaybeMessage< ::TSCE::ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive* Arena::CreateMaybeMessage< ::TSCE::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::ASTNodeArrayArchive_ASTColumnCoordinateArchive* Arena::CreateMaybeMessage< ::TSCE::ASTNodeArrayArchive_ASTColumnCoordinateArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::ASTNodeArrayArchive_ASTColumnCoordinateArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::ASTNodeArrayArchive_ASTRowCoordinateArchive* Arena::CreateMaybeMessage< ::TSCE::ASTNodeArrayArchive_ASTRowCoordinateArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::ASTNodeArrayArchive_ASTRowCoordinateArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::ASTNodeArrayArchive_ASTUidList* Arena::CreateMaybeMessage< ::TSCE::ASTNodeArrayArchive_ASTUidList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::ASTNodeArrayArchive_ASTUidList >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::ASTNodeArrayArchive_ASTUidTract* Arena::CreateMaybeMessage< ::TSCE::ASTNodeArrayArchive_ASTUidTract >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::ASTNodeArrayArchive_ASTUidTract >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::ASTNodeArrayArchive_ASTStickyBits* Arena::CreateMaybeMessage< ::TSCE::ASTNodeArrayArchive_ASTStickyBits >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::ASTNodeArrayArchive_ASTStickyBits >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::ASTNodeArrayArchive_ASTUidTractList* Arena::CreateMaybeMessage< ::TSCE::ASTNodeArrayArchive_ASTUidTractList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::ASTNodeArrayArchive_ASTUidTractList >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::ASTNodeArrayArchive_ASTUidCoordinateArchive* Arena::CreateMaybeMessage< ::TSCE::ASTNodeArrayArchive_ASTUidCoordinateArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::ASTNodeArrayArchive_ASTUidCoordinateArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::ASTNodeArrayArchive_ASTCategoryReferenceArchive* Arena::CreateMaybeMessage< ::TSCE::ASTNodeArrayArchive_ASTCategoryReferenceArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::ASTNodeArrayArchive_ASTCategoryReferenceArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive* Arena::CreateMaybeMessage< ::TSCE::ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive* Arena::CreateMaybeMessage< ::TSCE::ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::ASTNodeArrayArchive_ASTColonTractArchive* Arena::CreateMaybeMessage< ::TSCE::ASTNodeArrayArchive_ASTColonTractArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::ASTNodeArrayArchive_ASTColonTractArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive* Arena::CreateMaybeMessage< ::TSCE::ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::ASTNodeArrayArchive_ASTLetNodeWhitespace* Arena::CreateMaybeMessage< ::TSCE::ASTNodeArrayArchive_ASTLetNodeWhitespace >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::ASTNodeArrayArchive_ASTLetNodeWhitespace >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::ASTNodeArrayArchive_ASTNodeArchive* Arena::CreateMaybeMessage< ::TSCE::ASTNodeArrayArchive_ASTNodeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::ASTNodeArrayArchive_ASTNodeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::ASTNodeArrayArchive* Arena::CreateMaybeMessage< ::TSCE::ASTNodeArrayArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::ASTNodeArrayArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::FormulaTranslationFlagsArchive* Arena::CreateMaybeMessage< ::TSCE::FormulaTranslationFlagsArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::FormulaTranslationFlagsArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::FormulaArchive* Arena::CreateMaybeMessage< ::TSCE::FormulaArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::FormulaArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::FunctorArchive* Arena::CreateMaybeMessage< ::TSCE::FunctorArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::FunctorArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::FormatStructArchive* Arena::CreateMaybeMessage< ::TSCE::FormatStructArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::FormatStructArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::RangeCoordinateArchive* Arena::CreateMaybeMessage< ::TSCE::RangeCoordinateArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::RangeCoordinateArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::TableTransposeInfoArchive* Arena::CreateMaybeMessage< ::TSCE::TableTransposeInfoArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::TableTransposeInfoArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::MergeOriginMovedArchive* Arena::CreateMaybeMessage< ::TSCE::MergeOriginMovedArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::MergeOriginMovedArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::OwnerUIDMapperArchive* Arena::CreateMaybeMessage< ::TSCE::OwnerUIDMapperArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::OwnerUIDMapperArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::RewriteTableUIDInfoArchive_TableUIDMapEntryArchive* Arena::CreateMaybeMessage< ::TSCE::RewriteTableUIDInfoArchive_TableUIDMapEntryArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::RewriteTableUIDInfoArchive_TableUIDMapEntryArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::RewriteTableUIDInfoArchive* Arena::CreateMaybeMessage< ::TSCE::RewriteTableUIDInfoArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::RewriteTableUIDInfoArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::GroupByChangeArchive_GroupingColumnChangeArchive* Arena::CreateMaybeMessage< ::TSCE::GroupByChangeArchive_GroupingColumnChangeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::GroupByChangeArchive_GroupingColumnChangeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::GroupByChangeArchive* Arena::CreateMaybeMessage< ::TSCE::GroupByChangeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::GroupByChangeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::RewriteGroupNodeUIDInfoArchive* Arena::CreateMaybeMessage< ::TSCE::RewriteGroupNodeUIDInfoArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::RewriteGroupNodeUIDInfoArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::IndexedUidsArchive_IndexedUid* Arena::CreateMaybeMessage< ::TSCE::IndexedUidsArchive_IndexedUid >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::IndexedUidsArchive_IndexedUid >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::IndexedUidsArchive* Arena::CreateMaybeMessage< ::TSCE::IndexedUidsArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::IndexedUidsArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::RewriteRangeEntryArchive* Arena::CreateMaybeMessage< ::TSCE::RewriteRangeEntryArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::RewriteRangeEntryArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::ColumnOrRowUuidsInfoArchive* Arena::CreateMaybeMessage< ::TSCE::ColumnOrRowUuidsInfoArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::ColumnOrRowUuidsInfoArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::RegionInfoArchive* Arena::CreateMaybeMessage< ::TSCE::RegionInfoArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::RegionInfoArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::RegionMovedInfoArchive* Arena::CreateMaybeMessage< ::TSCE::RegionMovedInfoArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::RegionMovedInfoArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::MergeSourceArchive* Arena::CreateMaybeMessage< ::TSCE::MergeSourceArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::MergeSourceArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::FormulaRewriteSpecArchive* Arena::CreateMaybeMessage< ::TSCE::FormulaRewriteSpecArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::FormulaRewriteSpecArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::HauntedOwnerArchive* Arena::CreateMaybeMessage< ::TSCE::HauntedOwnerArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::HauntedOwnerArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::CellCoordinateArchive* Arena::CreateMaybeMessage< ::TSCE::CellCoordinateArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::CellCoordinateArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::CellCoordinateVectorArchive* Arena::CreateMaybeMessage< ::TSCE::CellCoordinateVectorArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::CellCoordinateVectorArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::ExpandedCellRefObjectPairArchive* Arena::CreateMaybeMessage< ::TSCE::ExpandedCellRefObjectPairArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::ExpandedCellRefObjectPairArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::ExpandedCellRefObjectMapArchive* Arena::CreateMaybeMessage< ::TSCE::ExpandedCellRefObjectMapArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::ExpandedCellRefObjectMapArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::FormulaAtCoordArchive* Arena::CreateMaybeMessage< ::TSCE::FormulaAtCoordArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::FormulaAtCoordArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::FormulaCoordPairsByOwnerArchive* Arena::CreateMaybeMessage< ::TSCE::FormulaCoordPairsByOwnerArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::FormulaCoordPairsByOwnerArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::FormulasForUndoArchive* Arena::CreateMaybeMessage< ::TSCE::FormulasForUndoArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::FormulasForUndoArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::FormulaRewriteCommandArchive* Arena::CreateMaybeMessage< ::TSCE::FormulaRewriteCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::FormulaRewriteCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::ExtendTableIDHistoryCommandArchive* Arena::CreateMaybeMessage< ::TSCE::ExtendTableIDHistoryCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::ExtendTableIDHistoryCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::NumberTrackedReferencePairArchive* Arena::CreateMaybeMessage< ::TSCE::NumberTrackedReferencePairArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::NumberTrackedReferencePairArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::NumberToTrackedReferenceMapArchive* Arena::CreateMaybeMessage< ::TSCE::NumberToTrackedReferenceMapArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::NumberToTrackedReferenceMapArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::TrackedReferencesRewriteCommandArchive* Arena::CreateMaybeMessage< ::TSCE::TrackedReferencesRewriteCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::TrackedReferencesRewriteCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::TrackedReferenceArchive* Arena::CreateMaybeMessage< ::TSCE::TrackedReferenceArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::TrackedReferenceArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::ExpandedTrackedReferenceArchive* Arena::CreateMaybeMessage< ::TSCE::ExpandedTrackedReferenceArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::ExpandedTrackedReferenceArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::ReferenceTrackerArchive* Arena::CreateMaybeMessage< ::TSCE::ReferenceTrackerArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::ReferenceTrackerArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::BooleanCellValueArchive* Arena::CreateMaybeMessage< ::TSCE::BooleanCellValueArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::BooleanCellValueArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::DateCellValueArchive* Arena::CreateMaybeMessage< ::TSCE::DateCellValueArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::DateCellValueArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::NumberCellValueArchive* Arena::CreateMaybeMessage< ::TSCE::NumberCellValueArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::NumberCellValueArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::StringCellValueArchive* Arena::CreateMaybeMessage< ::TSCE::StringCellValueArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::StringCellValueArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::ErrorCellValueArchive* Arena::CreateMaybeMessage< ::TSCE::ErrorCellValueArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::ErrorCellValueArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::CellValueArchive* Arena::CreateMaybeMessage< ::TSCE::CellValueArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::CellValueArchive >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
